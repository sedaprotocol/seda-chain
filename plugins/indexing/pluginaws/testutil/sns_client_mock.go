// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/thomasvandam/.go/pkg/mod/github.com/aws/aws-sdk-go@v1.55.5/service/sns/snsiface/interface.go
//
// Generated by this command:
//
//	mockgen -source=/Users/thomasvandam/.go/pkg/mod/github.com/aws/aws-sdk-go@v1.55.5/service/sns/snsiface/interface.go -package testutil -destination=plugins/indexing/pluginaws/testutil/sns_client_mock.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	sns "github.com/aws/aws-sdk-go/service/sns"
	gomock "go.uber.org/mock/gomock"
)

// MockSNSAPI is a mock of SNSAPI interface.
type MockSNSAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSNSAPIMockRecorder
	isgomock struct{}
}

// MockSNSAPIMockRecorder is the mock recorder for MockSNSAPI.
type MockSNSAPIMockRecorder struct {
	mock *MockSNSAPI
}

// NewMockSNSAPI creates a new mock instance.
func NewMockSNSAPI(ctrl *gomock.Controller) *MockSNSAPI {
	mock := &MockSNSAPI{ctrl: ctrl}
	mock.recorder = &MockSNSAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSNSAPI) EXPECT() *MockSNSAPIMockRecorder {
	return m.recorder
}

// AddPermission mocks base method.
func (m *MockSNSAPI) AddPermission(arg0 *sns.AddPermissionInput) (*sns.AddPermissionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPermission", arg0)
	ret0, _ := ret[0].(*sns.AddPermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPermission indicates an expected call of AddPermission.
func (mr *MockSNSAPIMockRecorder) AddPermission(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermission", reflect.TypeOf((*MockSNSAPI)(nil).AddPermission), arg0)
}

// AddPermissionRequest mocks base method.
func (m *MockSNSAPI) AddPermissionRequest(arg0 *sns.AddPermissionInput) (*request.Request, *sns.AddPermissionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPermissionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.AddPermissionOutput)
	return ret0, ret1
}

// AddPermissionRequest indicates an expected call of AddPermissionRequest.
func (mr *MockSNSAPIMockRecorder) AddPermissionRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermissionRequest", reflect.TypeOf((*MockSNSAPI)(nil).AddPermissionRequest), arg0)
}

// AddPermissionWithContext mocks base method.
func (m *MockSNSAPI) AddPermissionWithContext(arg0 aws.Context, arg1 *sns.AddPermissionInput, arg2 ...request.Option) (*sns.AddPermissionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddPermissionWithContext", varargs...)
	ret0, _ := ret[0].(*sns.AddPermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPermissionWithContext indicates an expected call of AddPermissionWithContext.
func (mr *MockSNSAPIMockRecorder) AddPermissionWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermissionWithContext", reflect.TypeOf((*MockSNSAPI)(nil).AddPermissionWithContext), varargs...)
}

// CheckIfPhoneNumberIsOptedOut mocks base method.
func (m *MockSNSAPI) CheckIfPhoneNumberIsOptedOut(arg0 *sns.CheckIfPhoneNumberIsOptedOutInput) (*sns.CheckIfPhoneNumberIsOptedOutOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfPhoneNumberIsOptedOut", arg0)
	ret0, _ := ret[0].(*sns.CheckIfPhoneNumberIsOptedOutOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfPhoneNumberIsOptedOut indicates an expected call of CheckIfPhoneNumberIsOptedOut.
func (mr *MockSNSAPIMockRecorder) CheckIfPhoneNumberIsOptedOut(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfPhoneNumberIsOptedOut", reflect.TypeOf((*MockSNSAPI)(nil).CheckIfPhoneNumberIsOptedOut), arg0)
}

// CheckIfPhoneNumberIsOptedOutRequest mocks base method.
func (m *MockSNSAPI) CheckIfPhoneNumberIsOptedOutRequest(arg0 *sns.CheckIfPhoneNumberIsOptedOutInput) (*request.Request, *sns.CheckIfPhoneNumberIsOptedOutOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfPhoneNumberIsOptedOutRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.CheckIfPhoneNumberIsOptedOutOutput)
	return ret0, ret1
}

// CheckIfPhoneNumberIsOptedOutRequest indicates an expected call of CheckIfPhoneNumberIsOptedOutRequest.
func (mr *MockSNSAPIMockRecorder) CheckIfPhoneNumberIsOptedOutRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfPhoneNumberIsOptedOutRequest", reflect.TypeOf((*MockSNSAPI)(nil).CheckIfPhoneNumberIsOptedOutRequest), arg0)
}

// CheckIfPhoneNumberIsOptedOutWithContext mocks base method.
func (m *MockSNSAPI) CheckIfPhoneNumberIsOptedOutWithContext(arg0 aws.Context, arg1 *sns.CheckIfPhoneNumberIsOptedOutInput, arg2 ...request.Option) (*sns.CheckIfPhoneNumberIsOptedOutOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckIfPhoneNumberIsOptedOutWithContext", varargs...)
	ret0, _ := ret[0].(*sns.CheckIfPhoneNumberIsOptedOutOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfPhoneNumberIsOptedOutWithContext indicates an expected call of CheckIfPhoneNumberIsOptedOutWithContext.
func (mr *MockSNSAPIMockRecorder) CheckIfPhoneNumberIsOptedOutWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfPhoneNumberIsOptedOutWithContext", reflect.TypeOf((*MockSNSAPI)(nil).CheckIfPhoneNumberIsOptedOutWithContext), varargs...)
}

// ConfirmSubscription mocks base method.
func (m *MockSNSAPI) ConfirmSubscription(arg0 *sns.ConfirmSubscriptionInput) (*sns.ConfirmSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmSubscription", arg0)
	ret0, _ := ret[0].(*sns.ConfirmSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmSubscription indicates an expected call of ConfirmSubscription.
func (mr *MockSNSAPIMockRecorder) ConfirmSubscription(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmSubscription", reflect.TypeOf((*MockSNSAPI)(nil).ConfirmSubscription), arg0)
}

// ConfirmSubscriptionRequest mocks base method.
func (m *MockSNSAPI) ConfirmSubscriptionRequest(arg0 *sns.ConfirmSubscriptionInput) (*request.Request, *sns.ConfirmSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.ConfirmSubscriptionOutput)
	return ret0, ret1
}

// ConfirmSubscriptionRequest indicates an expected call of ConfirmSubscriptionRequest.
func (mr *MockSNSAPIMockRecorder) ConfirmSubscriptionRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmSubscriptionRequest", reflect.TypeOf((*MockSNSAPI)(nil).ConfirmSubscriptionRequest), arg0)
}

// ConfirmSubscriptionWithContext mocks base method.
func (m *MockSNSAPI) ConfirmSubscriptionWithContext(arg0 aws.Context, arg1 *sns.ConfirmSubscriptionInput, arg2 ...request.Option) (*sns.ConfirmSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfirmSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*sns.ConfirmSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmSubscriptionWithContext indicates an expected call of ConfirmSubscriptionWithContext.
func (mr *MockSNSAPIMockRecorder) ConfirmSubscriptionWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmSubscriptionWithContext", reflect.TypeOf((*MockSNSAPI)(nil).ConfirmSubscriptionWithContext), varargs...)
}

// CreatePlatformApplication mocks base method.
func (m *MockSNSAPI) CreatePlatformApplication(arg0 *sns.CreatePlatformApplicationInput) (*sns.CreatePlatformApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlatformApplication", arg0)
	ret0, _ := ret[0].(*sns.CreatePlatformApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlatformApplication indicates an expected call of CreatePlatformApplication.
func (mr *MockSNSAPIMockRecorder) CreatePlatformApplication(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlatformApplication", reflect.TypeOf((*MockSNSAPI)(nil).CreatePlatformApplication), arg0)
}

// CreatePlatformApplicationRequest mocks base method.
func (m *MockSNSAPI) CreatePlatformApplicationRequest(arg0 *sns.CreatePlatformApplicationInput) (*request.Request, *sns.CreatePlatformApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlatformApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.CreatePlatformApplicationOutput)
	return ret0, ret1
}

// CreatePlatformApplicationRequest indicates an expected call of CreatePlatformApplicationRequest.
func (mr *MockSNSAPIMockRecorder) CreatePlatformApplicationRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlatformApplicationRequest", reflect.TypeOf((*MockSNSAPI)(nil).CreatePlatformApplicationRequest), arg0)
}

// CreatePlatformApplicationWithContext mocks base method.
func (m *MockSNSAPI) CreatePlatformApplicationWithContext(arg0 aws.Context, arg1 *sns.CreatePlatformApplicationInput, arg2 ...request.Option) (*sns.CreatePlatformApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePlatformApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*sns.CreatePlatformApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlatformApplicationWithContext indicates an expected call of CreatePlatformApplicationWithContext.
func (mr *MockSNSAPIMockRecorder) CreatePlatformApplicationWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlatformApplicationWithContext", reflect.TypeOf((*MockSNSAPI)(nil).CreatePlatformApplicationWithContext), varargs...)
}

// CreatePlatformEndpoint mocks base method.
func (m *MockSNSAPI) CreatePlatformEndpoint(arg0 *sns.CreatePlatformEndpointInput) (*sns.CreatePlatformEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlatformEndpoint", arg0)
	ret0, _ := ret[0].(*sns.CreatePlatformEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlatformEndpoint indicates an expected call of CreatePlatformEndpoint.
func (mr *MockSNSAPIMockRecorder) CreatePlatformEndpoint(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlatformEndpoint", reflect.TypeOf((*MockSNSAPI)(nil).CreatePlatformEndpoint), arg0)
}

// CreatePlatformEndpointRequest mocks base method.
func (m *MockSNSAPI) CreatePlatformEndpointRequest(arg0 *sns.CreatePlatformEndpointInput) (*request.Request, *sns.CreatePlatformEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlatformEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.CreatePlatformEndpointOutput)
	return ret0, ret1
}

// CreatePlatformEndpointRequest indicates an expected call of CreatePlatformEndpointRequest.
func (mr *MockSNSAPIMockRecorder) CreatePlatformEndpointRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlatformEndpointRequest", reflect.TypeOf((*MockSNSAPI)(nil).CreatePlatformEndpointRequest), arg0)
}

// CreatePlatformEndpointWithContext mocks base method.
func (m *MockSNSAPI) CreatePlatformEndpointWithContext(arg0 aws.Context, arg1 *sns.CreatePlatformEndpointInput, arg2 ...request.Option) (*sns.CreatePlatformEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePlatformEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*sns.CreatePlatformEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlatformEndpointWithContext indicates an expected call of CreatePlatformEndpointWithContext.
func (mr *MockSNSAPIMockRecorder) CreatePlatformEndpointWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlatformEndpointWithContext", reflect.TypeOf((*MockSNSAPI)(nil).CreatePlatformEndpointWithContext), varargs...)
}

// CreateSMSSandboxPhoneNumber mocks base method.
func (m *MockSNSAPI) CreateSMSSandboxPhoneNumber(arg0 *sns.CreateSMSSandboxPhoneNumberInput) (*sns.CreateSMSSandboxPhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSMSSandboxPhoneNumber", arg0)
	ret0, _ := ret[0].(*sns.CreateSMSSandboxPhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSMSSandboxPhoneNumber indicates an expected call of CreateSMSSandboxPhoneNumber.
func (mr *MockSNSAPIMockRecorder) CreateSMSSandboxPhoneNumber(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSMSSandboxPhoneNumber", reflect.TypeOf((*MockSNSAPI)(nil).CreateSMSSandboxPhoneNumber), arg0)
}

// CreateSMSSandboxPhoneNumberRequest mocks base method.
func (m *MockSNSAPI) CreateSMSSandboxPhoneNumberRequest(arg0 *sns.CreateSMSSandboxPhoneNumberInput) (*request.Request, *sns.CreateSMSSandboxPhoneNumberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSMSSandboxPhoneNumberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.CreateSMSSandboxPhoneNumberOutput)
	return ret0, ret1
}

// CreateSMSSandboxPhoneNumberRequest indicates an expected call of CreateSMSSandboxPhoneNumberRequest.
func (mr *MockSNSAPIMockRecorder) CreateSMSSandboxPhoneNumberRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSMSSandboxPhoneNumberRequest", reflect.TypeOf((*MockSNSAPI)(nil).CreateSMSSandboxPhoneNumberRequest), arg0)
}

// CreateSMSSandboxPhoneNumberWithContext mocks base method.
func (m *MockSNSAPI) CreateSMSSandboxPhoneNumberWithContext(arg0 aws.Context, arg1 *sns.CreateSMSSandboxPhoneNumberInput, arg2 ...request.Option) (*sns.CreateSMSSandboxPhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSMSSandboxPhoneNumberWithContext", varargs...)
	ret0, _ := ret[0].(*sns.CreateSMSSandboxPhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSMSSandboxPhoneNumberWithContext indicates an expected call of CreateSMSSandboxPhoneNumberWithContext.
func (mr *MockSNSAPIMockRecorder) CreateSMSSandboxPhoneNumberWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSMSSandboxPhoneNumberWithContext", reflect.TypeOf((*MockSNSAPI)(nil).CreateSMSSandboxPhoneNumberWithContext), varargs...)
}

// CreateTopic mocks base method.
func (m *MockSNSAPI) CreateTopic(arg0 *sns.CreateTopicInput) (*sns.CreateTopicOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopic", arg0)
	ret0, _ := ret[0].(*sns.CreateTopicOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopic indicates an expected call of CreateTopic.
func (mr *MockSNSAPIMockRecorder) CreateTopic(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockSNSAPI)(nil).CreateTopic), arg0)
}

// CreateTopicRequest mocks base method.
func (m *MockSNSAPI) CreateTopicRequest(arg0 *sns.CreateTopicInput) (*request.Request, *sns.CreateTopicOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopicRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.CreateTopicOutput)
	return ret0, ret1
}

// CreateTopicRequest indicates an expected call of CreateTopicRequest.
func (mr *MockSNSAPIMockRecorder) CreateTopicRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopicRequest", reflect.TypeOf((*MockSNSAPI)(nil).CreateTopicRequest), arg0)
}

// CreateTopicWithContext mocks base method.
func (m *MockSNSAPI) CreateTopicWithContext(arg0 aws.Context, arg1 *sns.CreateTopicInput, arg2 ...request.Option) (*sns.CreateTopicOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTopicWithContext", varargs...)
	ret0, _ := ret[0].(*sns.CreateTopicOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopicWithContext indicates an expected call of CreateTopicWithContext.
func (mr *MockSNSAPIMockRecorder) CreateTopicWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopicWithContext", reflect.TypeOf((*MockSNSAPI)(nil).CreateTopicWithContext), varargs...)
}

// DeleteEndpoint mocks base method.
func (m *MockSNSAPI) DeleteEndpoint(arg0 *sns.DeleteEndpointInput) (*sns.DeleteEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndpoint", arg0)
	ret0, _ := ret[0].(*sns.DeleteEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEndpoint indicates an expected call of DeleteEndpoint.
func (mr *MockSNSAPIMockRecorder) DeleteEndpoint(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpoint", reflect.TypeOf((*MockSNSAPI)(nil).DeleteEndpoint), arg0)
}

// DeleteEndpointRequest mocks base method.
func (m *MockSNSAPI) DeleteEndpointRequest(arg0 *sns.DeleteEndpointInput) (*request.Request, *sns.DeleteEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.DeleteEndpointOutput)
	return ret0, ret1
}

// DeleteEndpointRequest indicates an expected call of DeleteEndpointRequest.
func (mr *MockSNSAPIMockRecorder) DeleteEndpointRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpointRequest", reflect.TypeOf((*MockSNSAPI)(nil).DeleteEndpointRequest), arg0)
}

// DeleteEndpointWithContext mocks base method.
func (m *MockSNSAPI) DeleteEndpointWithContext(arg0 aws.Context, arg1 *sns.DeleteEndpointInput, arg2 ...request.Option) (*sns.DeleteEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*sns.DeleteEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEndpointWithContext indicates an expected call of DeleteEndpointWithContext.
func (mr *MockSNSAPIMockRecorder) DeleteEndpointWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpointWithContext", reflect.TypeOf((*MockSNSAPI)(nil).DeleteEndpointWithContext), varargs...)
}

// DeletePlatformApplication mocks base method.
func (m *MockSNSAPI) DeletePlatformApplication(arg0 *sns.DeletePlatformApplicationInput) (*sns.DeletePlatformApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlatformApplication", arg0)
	ret0, _ := ret[0].(*sns.DeletePlatformApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePlatformApplication indicates an expected call of DeletePlatformApplication.
func (mr *MockSNSAPIMockRecorder) DeletePlatformApplication(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlatformApplication", reflect.TypeOf((*MockSNSAPI)(nil).DeletePlatformApplication), arg0)
}

// DeletePlatformApplicationRequest mocks base method.
func (m *MockSNSAPI) DeletePlatformApplicationRequest(arg0 *sns.DeletePlatformApplicationInput) (*request.Request, *sns.DeletePlatformApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlatformApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.DeletePlatformApplicationOutput)
	return ret0, ret1
}

// DeletePlatformApplicationRequest indicates an expected call of DeletePlatformApplicationRequest.
func (mr *MockSNSAPIMockRecorder) DeletePlatformApplicationRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlatformApplicationRequest", reflect.TypeOf((*MockSNSAPI)(nil).DeletePlatformApplicationRequest), arg0)
}

// DeletePlatformApplicationWithContext mocks base method.
func (m *MockSNSAPI) DeletePlatformApplicationWithContext(arg0 aws.Context, arg1 *sns.DeletePlatformApplicationInput, arg2 ...request.Option) (*sns.DeletePlatformApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePlatformApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*sns.DeletePlatformApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePlatformApplicationWithContext indicates an expected call of DeletePlatformApplicationWithContext.
func (mr *MockSNSAPIMockRecorder) DeletePlatformApplicationWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlatformApplicationWithContext", reflect.TypeOf((*MockSNSAPI)(nil).DeletePlatformApplicationWithContext), varargs...)
}

// DeleteSMSSandboxPhoneNumber mocks base method.
func (m *MockSNSAPI) DeleteSMSSandboxPhoneNumber(arg0 *sns.DeleteSMSSandboxPhoneNumberInput) (*sns.DeleteSMSSandboxPhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSMSSandboxPhoneNumber", arg0)
	ret0, _ := ret[0].(*sns.DeleteSMSSandboxPhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSMSSandboxPhoneNumber indicates an expected call of DeleteSMSSandboxPhoneNumber.
func (mr *MockSNSAPIMockRecorder) DeleteSMSSandboxPhoneNumber(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSMSSandboxPhoneNumber", reflect.TypeOf((*MockSNSAPI)(nil).DeleteSMSSandboxPhoneNumber), arg0)
}

// DeleteSMSSandboxPhoneNumberRequest mocks base method.
func (m *MockSNSAPI) DeleteSMSSandboxPhoneNumberRequest(arg0 *sns.DeleteSMSSandboxPhoneNumberInput) (*request.Request, *sns.DeleteSMSSandboxPhoneNumberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSMSSandboxPhoneNumberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.DeleteSMSSandboxPhoneNumberOutput)
	return ret0, ret1
}

// DeleteSMSSandboxPhoneNumberRequest indicates an expected call of DeleteSMSSandboxPhoneNumberRequest.
func (mr *MockSNSAPIMockRecorder) DeleteSMSSandboxPhoneNumberRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSMSSandboxPhoneNumberRequest", reflect.TypeOf((*MockSNSAPI)(nil).DeleteSMSSandboxPhoneNumberRequest), arg0)
}

// DeleteSMSSandboxPhoneNumberWithContext mocks base method.
func (m *MockSNSAPI) DeleteSMSSandboxPhoneNumberWithContext(arg0 aws.Context, arg1 *sns.DeleteSMSSandboxPhoneNumberInput, arg2 ...request.Option) (*sns.DeleteSMSSandboxPhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSMSSandboxPhoneNumberWithContext", varargs...)
	ret0, _ := ret[0].(*sns.DeleteSMSSandboxPhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSMSSandboxPhoneNumberWithContext indicates an expected call of DeleteSMSSandboxPhoneNumberWithContext.
func (mr *MockSNSAPIMockRecorder) DeleteSMSSandboxPhoneNumberWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSMSSandboxPhoneNumberWithContext", reflect.TypeOf((*MockSNSAPI)(nil).DeleteSMSSandboxPhoneNumberWithContext), varargs...)
}

// DeleteTopic mocks base method.
func (m *MockSNSAPI) DeleteTopic(arg0 *sns.DeleteTopicInput) (*sns.DeleteTopicOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopic", arg0)
	ret0, _ := ret[0].(*sns.DeleteTopicOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTopic indicates an expected call of DeleteTopic.
func (mr *MockSNSAPIMockRecorder) DeleteTopic(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopic", reflect.TypeOf((*MockSNSAPI)(nil).DeleteTopic), arg0)
}

// DeleteTopicRequest mocks base method.
func (m *MockSNSAPI) DeleteTopicRequest(arg0 *sns.DeleteTopicInput) (*request.Request, *sns.DeleteTopicOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopicRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.DeleteTopicOutput)
	return ret0, ret1
}

// DeleteTopicRequest indicates an expected call of DeleteTopicRequest.
func (mr *MockSNSAPIMockRecorder) DeleteTopicRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopicRequest", reflect.TypeOf((*MockSNSAPI)(nil).DeleteTopicRequest), arg0)
}

// DeleteTopicWithContext mocks base method.
func (m *MockSNSAPI) DeleteTopicWithContext(arg0 aws.Context, arg1 *sns.DeleteTopicInput, arg2 ...request.Option) (*sns.DeleteTopicOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTopicWithContext", varargs...)
	ret0, _ := ret[0].(*sns.DeleteTopicOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTopicWithContext indicates an expected call of DeleteTopicWithContext.
func (mr *MockSNSAPIMockRecorder) DeleteTopicWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopicWithContext", reflect.TypeOf((*MockSNSAPI)(nil).DeleteTopicWithContext), varargs...)
}

// GetDataProtectionPolicy mocks base method.
func (m *MockSNSAPI) GetDataProtectionPolicy(arg0 *sns.GetDataProtectionPolicyInput) (*sns.GetDataProtectionPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataProtectionPolicy", arg0)
	ret0, _ := ret[0].(*sns.GetDataProtectionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataProtectionPolicy indicates an expected call of GetDataProtectionPolicy.
func (mr *MockSNSAPIMockRecorder) GetDataProtectionPolicy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataProtectionPolicy", reflect.TypeOf((*MockSNSAPI)(nil).GetDataProtectionPolicy), arg0)
}

// GetDataProtectionPolicyRequest mocks base method.
func (m *MockSNSAPI) GetDataProtectionPolicyRequest(arg0 *sns.GetDataProtectionPolicyInput) (*request.Request, *sns.GetDataProtectionPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataProtectionPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.GetDataProtectionPolicyOutput)
	return ret0, ret1
}

// GetDataProtectionPolicyRequest indicates an expected call of GetDataProtectionPolicyRequest.
func (mr *MockSNSAPIMockRecorder) GetDataProtectionPolicyRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataProtectionPolicyRequest", reflect.TypeOf((*MockSNSAPI)(nil).GetDataProtectionPolicyRequest), arg0)
}

// GetDataProtectionPolicyWithContext mocks base method.
func (m *MockSNSAPI) GetDataProtectionPolicyWithContext(arg0 aws.Context, arg1 *sns.GetDataProtectionPolicyInput, arg2 ...request.Option) (*sns.GetDataProtectionPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataProtectionPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*sns.GetDataProtectionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataProtectionPolicyWithContext indicates an expected call of GetDataProtectionPolicyWithContext.
func (mr *MockSNSAPIMockRecorder) GetDataProtectionPolicyWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataProtectionPolicyWithContext", reflect.TypeOf((*MockSNSAPI)(nil).GetDataProtectionPolicyWithContext), varargs...)
}

// GetEndpointAttributes mocks base method.
func (m *MockSNSAPI) GetEndpointAttributes(arg0 *sns.GetEndpointAttributesInput) (*sns.GetEndpointAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpointAttributes", arg0)
	ret0, _ := ret[0].(*sns.GetEndpointAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpointAttributes indicates an expected call of GetEndpointAttributes.
func (mr *MockSNSAPIMockRecorder) GetEndpointAttributes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpointAttributes", reflect.TypeOf((*MockSNSAPI)(nil).GetEndpointAttributes), arg0)
}

// GetEndpointAttributesRequest mocks base method.
func (m *MockSNSAPI) GetEndpointAttributesRequest(arg0 *sns.GetEndpointAttributesInput) (*request.Request, *sns.GetEndpointAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpointAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.GetEndpointAttributesOutput)
	return ret0, ret1
}

// GetEndpointAttributesRequest indicates an expected call of GetEndpointAttributesRequest.
func (mr *MockSNSAPIMockRecorder) GetEndpointAttributesRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpointAttributesRequest", reflect.TypeOf((*MockSNSAPI)(nil).GetEndpointAttributesRequest), arg0)
}

// GetEndpointAttributesWithContext mocks base method.
func (m *MockSNSAPI) GetEndpointAttributesWithContext(arg0 aws.Context, arg1 *sns.GetEndpointAttributesInput, arg2 ...request.Option) (*sns.GetEndpointAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEndpointAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sns.GetEndpointAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpointAttributesWithContext indicates an expected call of GetEndpointAttributesWithContext.
func (mr *MockSNSAPIMockRecorder) GetEndpointAttributesWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpointAttributesWithContext", reflect.TypeOf((*MockSNSAPI)(nil).GetEndpointAttributesWithContext), varargs...)
}

// GetPlatformApplicationAttributes mocks base method.
func (m *MockSNSAPI) GetPlatformApplicationAttributes(arg0 *sns.GetPlatformApplicationAttributesInput) (*sns.GetPlatformApplicationAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformApplicationAttributes", arg0)
	ret0, _ := ret[0].(*sns.GetPlatformApplicationAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatformApplicationAttributes indicates an expected call of GetPlatformApplicationAttributes.
func (mr *MockSNSAPIMockRecorder) GetPlatformApplicationAttributes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformApplicationAttributes", reflect.TypeOf((*MockSNSAPI)(nil).GetPlatformApplicationAttributes), arg0)
}

// GetPlatformApplicationAttributesRequest mocks base method.
func (m *MockSNSAPI) GetPlatformApplicationAttributesRequest(arg0 *sns.GetPlatformApplicationAttributesInput) (*request.Request, *sns.GetPlatformApplicationAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformApplicationAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.GetPlatformApplicationAttributesOutput)
	return ret0, ret1
}

// GetPlatformApplicationAttributesRequest indicates an expected call of GetPlatformApplicationAttributesRequest.
func (mr *MockSNSAPIMockRecorder) GetPlatformApplicationAttributesRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformApplicationAttributesRequest", reflect.TypeOf((*MockSNSAPI)(nil).GetPlatformApplicationAttributesRequest), arg0)
}

// GetPlatformApplicationAttributesWithContext mocks base method.
func (m *MockSNSAPI) GetPlatformApplicationAttributesWithContext(arg0 aws.Context, arg1 *sns.GetPlatformApplicationAttributesInput, arg2 ...request.Option) (*sns.GetPlatformApplicationAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPlatformApplicationAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sns.GetPlatformApplicationAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatformApplicationAttributesWithContext indicates an expected call of GetPlatformApplicationAttributesWithContext.
func (mr *MockSNSAPIMockRecorder) GetPlatformApplicationAttributesWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformApplicationAttributesWithContext", reflect.TypeOf((*MockSNSAPI)(nil).GetPlatformApplicationAttributesWithContext), varargs...)
}

// GetSMSAttributes mocks base method.
func (m *MockSNSAPI) GetSMSAttributes(arg0 *sns.GetSMSAttributesInput) (*sns.GetSMSAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSMSAttributes", arg0)
	ret0, _ := ret[0].(*sns.GetSMSAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSMSAttributes indicates an expected call of GetSMSAttributes.
func (mr *MockSNSAPIMockRecorder) GetSMSAttributes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSMSAttributes", reflect.TypeOf((*MockSNSAPI)(nil).GetSMSAttributes), arg0)
}

// GetSMSAttributesRequest mocks base method.
func (m *MockSNSAPI) GetSMSAttributesRequest(arg0 *sns.GetSMSAttributesInput) (*request.Request, *sns.GetSMSAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSMSAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.GetSMSAttributesOutput)
	return ret0, ret1
}

// GetSMSAttributesRequest indicates an expected call of GetSMSAttributesRequest.
func (mr *MockSNSAPIMockRecorder) GetSMSAttributesRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSMSAttributesRequest", reflect.TypeOf((*MockSNSAPI)(nil).GetSMSAttributesRequest), arg0)
}

// GetSMSAttributesWithContext mocks base method.
func (m *MockSNSAPI) GetSMSAttributesWithContext(arg0 aws.Context, arg1 *sns.GetSMSAttributesInput, arg2 ...request.Option) (*sns.GetSMSAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSMSAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sns.GetSMSAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSMSAttributesWithContext indicates an expected call of GetSMSAttributesWithContext.
func (mr *MockSNSAPIMockRecorder) GetSMSAttributesWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSMSAttributesWithContext", reflect.TypeOf((*MockSNSAPI)(nil).GetSMSAttributesWithContext), varargs...)
}

// GetSMSSandboxAccountStatus mocks base method.
func (m *MockSNSAPI) GetSMSSandboxAccountStatus(arg0 *sns.GetSMSSandboxAccountStatusInput) (*sns.GetSMSSandboxAccountStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSMSSandboxAccountStatus", arg0)
	ret0, _ := ret[0].(*sns.GetSMSSandboxAccountStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSMSSandboxAccountStatus indicates an expected call of GetSMSSandboxAccountStatus.
func (mr *MockSNSAPIMockRecorder) GetSMSSandboxAccountStatus(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSMSSandboxAccountStatus", reflect.TypeOf((*MockSNSAPI)(nil).GetSMSSandboxAccountStatus), arg0)
}

// GetSMSSandboxAccountStatusRequest mocks base method.
func (m *MockSNSAPI) GetSMSSandboxAccountStatusRequest(arg0 *sns.GetSMSSandboxAccountStatusInput) (*request.Request, *sns.GetSMSSandboxAccountStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSMSSandboxAccountStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.GetSMSSandboxAccountStatusOutput)
	return ret0, ret1
}

// GetSMSSandboxAccountStatusRequest indicates an expected call of GetSMSSandboxAccountStatusRequest.
func (mr *MockSNSAPIMockRecorder) GetSMSSandboxAccountStatusRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSMSSandboxAccountStatusRequest", reflect.TypeOf((*MockSNSAPI)(nil).GetSMSSandboxAccountStatusRequest), arg0)
}

// GetSMSSandboxAccountStatusWithContext mocks base method.
func (m *MockSNSAPI) GetSMSSandboxAccountStatusWithContext(arg0 aws.Context, arg1 *sns.GetSMSSandboxAccountStatusInput, arg2 ...request.Option) (*sns.GetSMSSandboxAccountStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSMSSandboxAccountStatusWithContext", varargs...)
	ret0, _ := ret[0].(*sns.GetSMSSandboxAccountStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSMSSandboxAccountStatusWithContext indicates an expected call of GetSMSSandboxAccountStatusWithContext.
func (mr *MockSNSAPIMockRecorder) GetSMSSandboxAccountStatusWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSMSSandboxAccountStatusWithContext", reflect.TypeOf((*MockSNSAPI)(nil).GetSMSSandboxAccountStatusWithContext), varargs...)
}

// GetSubscriptionAttributes mocks base method.
func (m *MockSNSAPI) GetSubscriptionAttributes(arg0 *sns.GetSubscriptionAttributesInput) (*sns.GetSubscriptionAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionAttributes", arg0)
	ret0, _ := ret[0].(*sns.GetSubscriptionAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionAttributes indicates an expected call of GetSubscriptionAttributes.
func (mr *MockSNSAPIMockRecorder) GetSubscriptionAttributes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionAttributes", reflect.TypeOf((*MockSNSAPI)(nil).GetSubscriptionAttributes), arg0)
}

// GetSubscriptionAttributesRequest mocks base method.
func (m *MockSNSAPI) GetSubscriptionAttributesRequest(arg0 *sns.GetSubscriptionAttributesInput) (*request.Request, *sns.GetSubscriptionAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.GetSubscriptionAttributesOutput)
	return ret0, ret1
}

// GetSubscriptionAttributesRequest indicates an expected call of GetSubscriptionAttributesRequest.
func (mr *MockSNSAPIMockRecorder) GetSubscriptionAttributesRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionAttributesRequest", reflect.TypeOf((*MockSNSAPI)(nil).GetSubscriptionAttributesRequest), arg0)
}

// GetSubscriptionAttributesWithContext mocks base method.
func (m *MockSNSAPI) GetSubscriptionAttributesWithContext(arg0 aws.Context, arg1 *sns.GetSubscriptionAttributesInput, arg2 ...request.Option) (*sns.GetSubscriptionAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubscriptionAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sns.GetSubscriptionAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionAttributesWithContext indicates an expected call of GetSubscriptionAttributesWithContext.
func (mr *MockSNSAPIMockRecorder) GetSubscriptionAttributesWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionAttributesWithContext", reflect.TypeOf((*MockSNSAPI)(nil).GetSubscriptionAttributesWithContext), varargs...)
}

// GetTopicAttributes mocks base method.
func (m *MockSNSAPI) GetTopicAttributes(arg0 *sns.GetTopicAttributesInput) (*sns.GetTopicAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicAttributes", arg0)
	ret0, _ := ret[0].(*sns.GetTopicAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicAttributes indicates an expected call of GetTopicAttributes.
func (mr *MockSNSAPIMockRecorder) GetTopicAttributes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicAttributes", reflect.TypeOf((*MockSNSAPI)(nil).GetTopicAttributes), arg0)
}

// GetTopicAttributesRequest mocks base method.
func (m *MockSNSAPI) GetTopicAttributesRequest(arg0 *sns.GetTopicAttributesInput) (*request.Request, *sns.GetTopicAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.GetTopicAttributesOutput)
	return ret0, ret1
}

// GetTopicAttributesRequest indicates an expected call of GetTopicAttributesRequest.
func (mr *MockSNSAPIMockRecorder) GetTopicAttributesRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicAttributesRequest", reflect.TypeOf((*MockSNSAPI)(nil).GetTopicAttributesRequest), arg0)
}

// GetTopicAttributesWithContext mocks base method.
func (m *MockSNSAPI) GetTopicAttributesWithContext(arg0 aws.Context, arg1 *sns.GetTopicAttributesInput, arg2 ...request.Option) (*sns.GetTopicAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTopicAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sns.GetTopicAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicAttributesWithContext indicates an expected call of GetTopicAttributesWithContext.
func (mr *MockSNSAPIMockRecorder) GetTopicAttributesWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicAttributesWithContext", reflect.TypeOf((*MockSNSAPI)(nil).GetTopicAttributesWithContext), varargs...)
}

// ListEndpointsByPlatformApplication mocks base method.
func (m *MockSNSAPI) ListEndpointsByPlatformApplication(arg0 *sns.ListEndpointsByPlatformApplicationInput) (*sns.ListEndpointsByPlatformApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEndpointsByPlatformApplication", arg0)
	ret0, _ := ret[0].(*sns.ListEndpointsByPlatformApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEndpointsByPlatformApplication indicates an expected call of ListEndpointsByPlatformApplication.
func (mr *MockSNSAPIMockRecorder) ListEndpointsByPlatformApplication(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointsByPlatformApplication", reflect.TypeOf((*MockSNSAPI)(nil).ListEndpointsByPlatformApplication), arg0)
}

// ListEndpointsByPlatformApplicationPages mocks base method.
func (m *MockSNSAPI) ListEndpointsByPlatformApplicationPages(arg0 *sns.ListEndpointsByPlatformApplicationInput, arg1 func(*sns.ListEndpointsByPlatformApplicationOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEndpointsByPlatformApplicationPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEndpointsByPlatformApplicationPages indicates an expected call of ListEndpointsByPlatformApplicationPages.
func (mr *MockSNSAPIMockRecorder) ListEndpointsByPlatformApplicationPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointsByPlatformApplicationPages", reflect.TypeOf((*MockSNSAPI)(nil).ListEndpointsByPlatformApplicationPages), arg0, arg1)
}

// ListEndpointsByPlatformApplicationPagesWithContext mocks base method.
func (m *MockSNSAPI) ListEndpointsByPlatformApplicationPagesWithContext(arg0 aws.Context, arg1 *sns.ListEndpointsByPlatformApplicationInput, arg2 func(*sns.ListEndpointsByPlatformApplicationOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEndpointsByPlatformApplicationPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEndpointsByPlatformApplicationPagesWithContext indicates an expected call of ListEndpointsByPlatformApplicationPagesWithContext.
func (mr *MockSNSAPIMockRecorder) ListEndpointsByPlatformApplicationPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointsByPlatformApplicationPagesWithContext", reflect.TypeOf((*MockSNSAPI)(nil).ListEndpointsByPlatformApplicationPagesWithContext), varargs...)
}

// ListEndpointsByPlatformApplicationRequest mocks base method.
func (m *MockSNSAPI) ListEndpointsByPlatformApplicationRequest(arg0 *sns.ListEndpointsByPlatformApplicationInput) (*request.Request, *sns.ListEndpointsByPlatformApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEndpointsByPlatformApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.ListEndpointsByPlatformApplicationOutput)
	return ret0, ret1
}

// ListEndpointsByPlatformApplicationRequest indicates an expected call of ListEndpointsByPlatformApplicationRequest.
func (mr *MockSNSAPIMockRecorder) ListEndpointsByPlatformApplicationRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointsByPlatformApplicationRequest", reflect.TypeOf((*MockSNSAPI)(nil).ListEndpointsByPlatformApplicationRequest), arg0)
}

// ListEndpointsByPlatformApplicationWithContext mocks base method.
func (m *MockSNSAPI) ListEndpointsByPlatformApplicationWithContext(arg0 aws.Context, arg1 *sns.ListEndpointsByPlatformApplicationInput, arg2 ...request.Option) (*sns.ListEndpointsByPlatformApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEndpointsByPlatformApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*sns.ListEndpointsByPlatformApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEndpointsByPlatformApplicationWithContext indicates an expected call of ListEndpointsByPlatformApplicationWithContext.
func (mr *MockSNSAPIMockRecorder) ListEndpointsByPlatformApplicationWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointsByPlatformApplicationWithContext", reflect.TypeOf((*MockSNSAPI)(nil).ListEndpointsByPlatformApplicationWithContext), varargs...)
}

// ListOriginationNumbers mocks base method.
func (m *MockSNSAPI) ListOriginationNumbers(arg0 *sns.ListOriginationNumbersInput) (*sns.ListOriginationNumbersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOriginationNumbers", arg0)
	ret0, _ := ret[0].(*sns.ListOriginationNumbersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOriginationNumbers indicates an expected call of ListOriginationNumbers.
func (mr *MockSNSAPIMockRecorder) ListOriginationNumbers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOriginationNumbers", reflect.TypeOf((*MockSNSAPI)(nil).ListOriginationNumbers), arg0)
}

// ListOriginationNumbersPages mocks base method.
func (m *MockSNSAPI) ListOriginationNumbersPages(arg0 *sns.ListOriginationNumbersInput, arg1 func(*sns.ListOriginationNumbersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOriginationNumbersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOriginationNumbersPages indicates an expected call of ListOriginationNumbersPages.
func (mr *MockSNSAPIMockRecorder) ListOriginationNumbersPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOriginationNumbersPages", reflect.TypeOf((*MockSNSAPI)(nil).ListOriginationNumbersPages), arg0, arg1)
}

// ListOriginationNumbersPagesWithContext mocks base method.
func (m *MockSNSAPI) ListOriginationNumbersPagesWithContext(arg0 aws.Context, arg1 *sns.ListOriginationNumbersInput, arg2 func(*sns.ListOriginationNumbersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOriginationNumbersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOriginationNumbersPagesWithContext indicates an expected call of ListOriginationNumbersPagesWithContext.
func (mr *MockSNSAPIMockRecorder) ListOriginationNumbersPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOriginationNumbersPagesWithContext", reflect.TypeOf((*MockSNSAPI)(nil).ListOriginationNumbersPagesWithContext), varargs...)
}

// ListOriginationNumbersRequest mocks base method.
func (m *MockSNSAPI) ListOriginationNumbersRequest(arg0 *sns.ListOriginationNumbersInput) (*request.Request, *sns.ListOriginationNumbersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOriginationNumbersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.ListOriginationNumbersOutput)
	return ret0, ret1
}

// ListOriginationNumbersRequest indicates an expected call of ListOriginationNumbersRequest.
func (mr *MockSNSAPIMockRecorder) ListOriginationNumbersRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOriginationNumbersRequest", reflect.TypeOf((*MockSNSAPI)(nil).ListOriginationNumbersRequest), arg0)
}

// ListOriginationNumbersWithContext mocks base method.
func (m *MockSNSAPI) ListOriginationNumbersWithContext(arg0 aws.Context, arg1 *sns.ListOriginationNumbersInput, arg2 ...request.Option) (*sns.ListOriginationNumbersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOriginationNumbersWithContext", varargs...)
	ret0, _ := ret[0].(*sns.ListOriginationNumbersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOriginationNumbersWithContext indicates an expected call of ListOriginationNumbersWithContext.
func (mr *MockSNSAPIMockRecorder) ListOriginationNumbersWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOriginationNumbersWithContext", reflect.TypeOf((*MockSNSAPI)(nil).ListOriginationNumbersWithContext), varargs...)
}

// ListPhoneNumbersOptedOut mocks base method.
func (m *MockSNSAPI) ListPhoneNumbersOptedOut(arg0 *sns.ListPhoneNumbersOptedOutInput) (*sns.ListPhoneNumbersOptedOutOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPhoneNumbersOptedOut", arg0)
	ret0, _ := ret[0].(*sns.ListPhoneNumbersOptedOutOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPhoneNumbersOptedOut indicates an expected call of ListPhoneNumbersOptedOut.
func (mr *MockSNSAPIMockRecorder) ListPhoneNumbersOptedOut(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumbersOptedOut", reflect.TypeOf((*MockSNSAPI)(nil).ListPhoneNumbersOptedOut), arg0)
}

// ListPhoneNumbersOptedOutPages mocks base method.
func (m *MockSNSAPI) ListPhoneNumbersOptedOutPages(arg0 *sns.ListPhoneNumbersOptedOutInput, arg1 func(*sns.ListPhoneNumbersOptedOutOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPhoneNumbersOptedOutPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPhoneNumbersOptedOutPages indicates an expected call of ListPhoneNumbersOptedOutPages.
func (mr *MockSNSAPIMockRecorder) ListPhoneNumbersOptedOutPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumbersOptedOutPages", reflect.TypeOf((*MockSNSAPI)(nil).ListPhoneNumbersOptedOutPages), arg0, arg1)
}

// ListPhoneNumbersOptedOutPagesWithContext mocks base method.
func (m *MockSNSAPI) ListPhoneNumbersOptedOutPagesWithContext(arg0 aws.Context, arg1 *sns.ListPhoneNumbersOptedOutInput, arg2 func(*sns.ListPhoneNumbersOptedOutOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPhoneNumbersOptedOutPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPhoneNumbersOptedOutPagesWithContext indicates an expected call of ListPhoneNumbersOptedOutPagesWithContext.
func (mr *MockSNSAPIMockRecorder) ListPhoneNumbersOptedOutPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumbersOptedOutPagesWithContext", reflect.TypeOf((*MockSNSAPI)(nil).ListPhoneNumbersOptedOutPagesWithContext), varargs...)
}

// ListPhoneNumbersOptedOutRequest mocks base method.
func (m *MockSNSAPI) ListPhoneNumbersOptedOutRequest(arg0 *sns.ListPhoneNumbersOptedOutInput) (*request.Request, *sns.ListPhoneNumbersOptedOutOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPhoneNumbersOptedOutRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.ListPhoneNumbersOptedOutOutput)
	return ret0, ret1
}

// ListPhoneNumbersOptedOutRequest indicates an expected call of ListPhoneNumbersOptedOutRequest.
func (mr *MockSNSAPIMockRecorder) ListPhoneNumbersOptedOutRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumbersOptedOutRequest", reflect.TypeOf((*MockSNSAPI)(nil).ListPhoneNumbersOptedOutRequest), arg0)
}

// ListPhoneNumbersOptedOutWithContext mocks base method.
func (m *MockSNSAPI) ListPhoneNumbersOptedOutWithContext(arg0 aws.Context, arg1 *sns.ListPhoneNumbersOptedOutInput, arg2 ...request.Option) (*sns.ListPhoneNumbersOptedOutOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPhoneNumbersOptedOutWithContext", varargs...)
	ret0, _ := ret[0].(*sns.ListPhoneNumbersOptedOutOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPhoneNumbersOptedOutWithContext indicates an expected call of ListPhoneNumbersOptedOutWithContext.
func (mr *MockSNSAPIMockRecorder) ListPhoneNumbersOptedOutWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumbersOptedOutWithContext", reflect.TypeOf((*MockSNSAPI)(nil).ListPhoneNumbersOptedOutWithContext), varargs...)
}

// ListPlatformApplications mocks base method.
func (m *MockSNSAPI) ListPlatformApplications(arg0 *sns.ListPlatformApplicationsInput) (*sns.ListPlatformApplicationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlatformApplications", arg0)
	ret0, _ := ret[0].(*sns.ListPlatformApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlatformApplications indicates an expected call of ListPlatformApplications.
func (mr *MockSNSAPIMockRecorder) ListPlatformApplications(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlatformApplications", reflect.TypeOf((*MockSNSAPI)(nil).ListPlatformApplications), arg0)
}

// ListPlatformApplicationsPages mocks base method.
func (m *MockSNSAPI) ListPlatformApplicationsPages(arg0 *sns.ListPlatformApplicationsInput, arg1 func(*sns.ListPlatformApplicationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlatformApplicationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPlatformApplicationsPages indicates an expected call of ListPlatformApplicationsPages.
func (mr *MockSNSAPIMockRecorder) ListPlatformApplicationsPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlatformApplicationsPages", reflect.TypeOf((*MockSNSAPI)(nil).ListPlatformApplicationsPages), arg0, arg1)
}

// ListPlatformApplicationsPagesWithContext mocks base method.
func (m *MockSNSAPI) ListPlatformApplicationsPagesWithContext(arg0 aws.Context, arg1 *sns.ListPlatformApplicationsInput, arg2 func(*sns.ListPlatformApplicationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPlatformApplicationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPlatformApplicationsPagesWithContext indicates an expected call of ListPlatformApplicationsPagesWithContext.
func (mr *MockSNSAPIMockRecorder) ListPlatformApplicationsPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlatformApplicationsPagesWithContext", reflect.TypeOf((*MockSNSAPI)(nil).ListPlatformApplicationsPagesWithContext), varargs...)
}

// ListPlatformApplicationsRequest mocks base method.
func (m *MockSNSAPI) ListPlatformApplicationsRequest(arg0 *sns.ListPlatformApplicationsInput) (*request.Request, *sns.ListPlatformApplicationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlatformApplicationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.ListPlatformApplicationsOutput)
	return ret0, ret1
}

// ListPlatformApplicationsRequest indicates an expected call of ListPlatformApplicationsRequest.
func (mr *MockSNSAPIMockRecorder) ListPlatformApplicationsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlatformApplicationsRequest", reflect.TypeOf((*MockSNSAPI)(nil).ListPlatformApplicationsRequest), arg0)
}

// ListPlatformApplicationsWithContext mocks base method.
func (m *MockSNSAPI) ListPlatformApplicationsWithContext(arg0 aws.Context, arg1 *sns.ListPlatformApplicationsInput, arg2 ...request.Option) (*sns.ListPlatformApplicationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPlatformApplicationsWithContext", varargs...)
	ret0, _ := ret[0].(*sns.ListPlatformApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlatformApplicationsWithContext indicates an expected call of ListPlatformApplicationsWithContext.
func (mr *MockSNSAPIMockRecorder) ListPlatformApplicationsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlatformApplicationsWithContext", reflect.TypeOf((*MockSNSAPI)(nil).ListPlatformApplicationsWithContext), varargs...)
}

// ListSMSSandboxPhoneNumbers mocks base method.
func (m *MockSNSAPI) ListSMSSandboxPhoneNumbers(arg0 *sns.ListSMSSandboxPhoneNumbersInput) (*sns.ListSMSSandboxPhoneNumbersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSMSSandboxPhoneNumbers", arg0)
	ret0, _ := ret[0].(*sns.ListSMSSandboxPhoneNumbersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSMSSandboxPhoneNumbers indicates an expected call of ListSMSSandboxPhoneNumbers.
func (mr *MockSNSAPIMockRecorder) ListSMSSandboxPhoneNumbers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSMSSandboxPhoneNumbers", reflect.TypeOf((*MockSNSAPI)(nil).ListSMSSandboxPhoneNumbers), arg0)
}

// ListSMSSandboxPhoneNumbersPages mocks base method.
func (m *MockSNSAPI) ListSMSSandboxPhoneNumbersPages(arg0 *sns.ListSMSSandboxPhoneNumbersInput, arg1 func(*sns.ListSMSSandboxPhoneNumbersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSMSSandboxPhoneNumbersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSMSSandboxPhoneNumbersPages indicates an expected call of ListSMSSandboxPhoneNumbersPages.
func (mr *MockSNSAPIMockRecorder) ListSMSSandboxPhoneNumbersPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSMSSandboxPhoneNumbersPages", reflect.TypeOf((*MockSNSAPI)(nil).ListSMSSandboxPhoneNumbersPages), arg0, arg1)
}

// ListSMSSandboxPhoneNumbersPagesWithContext mocks base method.
func (m *MockSNSAPI) ListSMSSandboxPhoneNumbersPagesWithContext(arg0 aws.Context, arg1 *sns.ListSMSSandboxPhoneNumbersInput, arg2 func(*sns.ListSMSSandboxPhoneNumbersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSMSSandboxPhoneNumbersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSMSSandboxPhoneNumbersPagesWithContext indicates an expected call of ListSMSSandboxPhoneNumbersPagesWithContext.
func (mr *MockSNSAPIMockRecorder) ListSMSSandboxPhoneNumbersPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSMSSandboxPhoneNumbersPagesWithContext", reflect.TypeOf((*MockSNSAPI)(nil).ListSMSSandboxPhoneNumbersPagesWithContext), varargs...)
}

// ListSMSSandboxPhoneNumbersRequest mocks base method.
func (m *MockSNSAPI) ListSMSSandboxPhoneNumbersRequest(arg0 *sns.ListSMSSandboxPhoneNumbersInput) (*request.Request, *sns.ListSMSSandboxPhoneNumbersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSMSSandboxPhoneNumbersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.ListSMSSandboxPhoneNumbersOutput)
	return ret0, ret1
}

// ListSMSSandboxPhoneNumbersRequest indicates an expected call of ListSMSSandboxPhoneNumbersRequest.
func (mr *MockSNSAPIMockRecorder) ListSMSSandboxPhoneNumbersRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSMSSandboxPhoneNumbersRequest", reflect.TypeOf((*MockSNSAPI)(nil).ListSMSSandboxPhoneNumbersRequest), arg0)
}

// ListSMSSandboxPhoneNumbersWithContext mocks base method.
func (m *MockSNSAPI) ListSMSSandboxPhoneNumbersWithContext(arg0 aws.Context, arg1 *sns.ListSMSSandboxPhoneNumbersInput, arg2 ...request.Option) (*sns.ListSMSSandboxPhoneNumbersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSMSSandboxPhoneNumbersWithContext", varargs...)
	ret0, _ := ret[0].(*sns.ListSMSSandboxPhoneNumbersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSMSSandboxPhoneNumbersWithContext indicates an expected call of ListSMSSandboxPhoneNumbersWithContext.
func (mr *MockSNSAPIMockRecorder) ListSMSSandboxPhoneNumbersWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSMSSandboxPhoneNumbersWithContext", reflect.TypeOf((*MockSNSAPI)(nil).ListSMSSandboxPhoneNumbersWithContext), varargs...)
}

// ListSubscriptions mocks base method.
func (m *MockSNSAPI) ListSubscriptions(arg0 *sns.ListSubscriptionsInput) (*sns.ListSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptions", arg0)
	ret0, _ := ret[0].(*sns.ListSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptions indicates an expected call of ListSubscriptions.
func (mr *MockSNSAPIMockRecorder) ListSubscriptions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptions", reflect.TypeOf((*MockSNSAPI)(nil).ListSubscriptions), arg0)
}

// ListSubscriptionsByTopic mocks base method.
func (m *MockSNSAPI) ListSubscriptionsByTopic(arg0 *sns.ListSubscriptionsByTopicInput) (*sns.ListSubscriptionsByTopicOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionsByTopic", arg0)
	ret0, _ := ret[0].(*sns.ListSubscriptionsByTopicOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionsByTopic indicates an expected call of ListSubscriptionsByTopic.
func (mr *MockSNSAPIMockRecorder) ListSubscriptionsByTopic(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionsByTopic", reflect.TypeOf((*MockSNSAPI)(nil).ListSubscriptionsByTopic), arg0)
}

// ListSubscriptionsByTopicPages mocks base method.
func (m *MockSNSAPI) ListSubscriptionsByTopicPages(arg0 *sns.ListSubscriptionsByTopicInput, arg1 func(*sns.ListSubscriptionsByTopicOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionsByTopicPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSubscriptionsByTopicPages indicates an expected call of ListSubscriptionsByTopicPages.
func (mr *MockSNSAPIMockRecorder) ListSubscriptionsByTopicPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionsByTopicPages", reflect.TypeOf((*MockSNSAPI)(nil).ListSubscriptionsByTopicPages), arg0, arg1)
}

// ListSubscriptionsByTopicPagesWithContext mocks base method.
func (m *MockSNSAPI) ListSubscriptionsByTopicPagesWithContext(arg0 aws.Context, arg1 *sns.ListSubscriptionsByTopicInput, arg2 func(*sns.ListSubscriptionsByTopicOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscriptionsByTopicPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSubscriptionsByTopicPagesWithContext indicates an expected call of ListSubscriptionsByTopicPagesWithContext.
func (mr *MockSNSAPIMockRecorder) ListSubscriptionsByTopicPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionsByTopicPagesWithContext", reflect.TypeOf((*MockSNSAPI)(nil).ListSubscriptionsByTopicPagesWithContext), varargs...)
}

// ListSubscriptionsByTopicRequest mocks base method.
func (m *MockSNSAPI) ListSubscriptionsByTopicRequest(arg0 *sns.ListSubscriptionsByTopicInput) (*request.Request, *sns.ListSubscriptionsByTopicOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionsByTopicRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.ListSubscriptionsByTopicOutput)
	return ret0, ret1
}

// ListSubscriptionsByTopicRequest indicates an expected call of ListSubscriptionsByTopicRequest.
func (mr *MockSNSAPIMockRecorder) ListSubscriptionsByTopicRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionsByTopicRequest", reflect.TypeOf((*MockSNSAPI)(nil).ListSubscriptionsByTopicRequest), arg0)
}

// ListSubscriptionsByTopicWithContext mocks base method.
func (m *MockSNSAPI) ListSubscriptionsByTopicWithContext(arg0 aws.Context, arg1 *sns.ListSubscriptionsByTopicInput, arg2 ...request.Option) (*sns.ListSubscriptionsByTopicOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscriptionsByTopicWithContext", varargs...)
	ret0, _ := ret[0].(*sns.ListSubscriptionsByTopicOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionsByTopicWithContext indicates an expected call of ListSubscriptionsByTopicWithContext.
func (mr *MockSNSAPIMockRecorder) ListSubscriptionsByTopicWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionsByTopicWithContext", reflect.TypeOf((*MockSNSAPI)(nil).ListSubscriptionsByTopicWithContext), varargs...)
}

// ListSubscriptionsPages mocks base method.
func (m *MockSNSAPI) ListSubscriptionsPages(arg0 *sns.ListSubscriptionsInput, arg1 func(*sns.ListSubscriptionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSubscriptionsPages indicates an expected call of ListSubscriptionsPages.
func (mr *MockSNSAPIMockRecorder) ListSubscriptionsPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionsPages", reflect.TypeOf((*MockSNSAPI)(nil).ListSubscriptionsPages), arg0, arg1)
}

// ListSubscriptionsPagesWithContext mocks base method.
func (m *MockSNSAPI) ListSubscriptionsPagesWithContext(arg0 aws.Context, arg1 *sns.ListSubscriptionsInput, arg2 func(*sns.ListSubscriptionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscriptionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSubscriptionsPagesWithContext indicates an expected call of ListSubscriptionsPagesWithContext.
func (mr *MockSNSAPIMockRecorder) ListSubscriptionsPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionsPagesWithContext", reflect.TypeOf((*MockSNSAPI)(nil).ListSubscriptionsPagesWithContext), varargs...)
}

// ListSubscriptionsRequest mocks base method.
func (m *MockSNSAPI) ListSubscriptionsRequest(arg0 *sns.ListSubscriptionsInput) (*request.Request, *sns.ListSubscriptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.ListSubscriptionsOutput)
	return ret0, ret1
}

// ListSubscriptionsRequest indicates an expected call of ListSubscriptionsRequest.
func (mr *MockSNSAPIMockRecorder) ListSubscriptionsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionsRequest", reflect.TypeOf((*MockSNSAPI)(nil).ListSubscriptionsRequest), arg0)
}

// ListSubscriptionsWithContext mocks base method.
func (m *MockSNSAPI) ListSubscriptionsWithContext(arg0 aws.Context, arg1 *sns.ListSubscriptionsInput, arg2 ...request.Option) (*sns.ListSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscriptionsWithContext", varargs...)
	ret0, _ := ret[0].(*sns.ListSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionsWithContext indicates an expected call of ListSubscriptionsWithContext.
func (mr *MockSNSAPIMockRecorder) ListSubscriptionsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionsWithContext", reflect.TypeOf((*MockSNSAPI)(nil).ListSubscriptionsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockSNSAPI) ListTagsForResource(arg0 *sns.ListTagsForResourceInput) (*sns.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*sns.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockSNSAPIMockRecorder) ListTagsForResource(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSNSAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockSNSAPI) ListTagsForResourceRequest(arg0 *sns.ListTagsForResourceInput) (*request.Request, *sns.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockSNSAPIMockRecorder) ListTagsForResourceRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockSNSAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockSNSAPI) ListTagsForResourceWithContext(arg0 aws.Context, arg1 *sns.ListTagsForResourceInput, arg2 ...request.Option) (*sns.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*sns.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockSNSAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockSNSAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTopics mocks base method.
func (m *MockSNSAPI) ListTopics(arg0 *sns.ListTopicsInput) (*sns.ListTopicsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTopics", arg0)
	ret0, _ := ret[0].(*sns.ListTopicsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTopics indicates an expected call of ListTopics.
func (mr *MockSNSAPIMockRecorder) ListTopics(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopics", reflect.TypeOf((*MockSNSAPI)(nil).ListTopics), arg0)
}

// ListTopicsPages mocks base method.
func (m *MockSNSAPI) ListTopicsPages(arg0 *sns.ListTopicsInput, arg1 func(*sns.ListTopicsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTopicsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTopicsPages indicates an expected call of ListTopicsPages.
func (mr *MockSNSAPIMockRecorder) ListTopicsPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopicsPages", reflect.TypeOf((*MockSNSAPI)(nil).ListTopicsPages), arg0, arg1)
}

// ListTopicsPagesWithContext mocks base method.
func (m *MockSNSAPI) ListTopicsPagesWithContext(arg0 aws.Context, arg1 *sns.ListTopicsInput, arg2 func(*sns.ListTopicsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTopicsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTopicsPagesWithContext indicates an expected call of ListTopicsPagesWithContext.
func (mr *MockSNSAPIMockRecorder) ListTopicsPagesWithContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopicsPagesWithContext", reflect.TypeOf((*MockSNSAPI)(nil).ListTopicsPagesWithContext), varargs...)
}

// ListTopicsRequest mocks base method.
func (m *MockSNSAPI) ListTopicsRequest(arg0 *sns.ListTopicsInput) (*request.Request, *sns.ListTopicsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTopicsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.ListTopicsOutput)
	return ret0, ret1
}

// ListTopicsRequest indicates an expected call of ListTopicsRequest.
func (mr *MockSNSAPIMockRecorder) ListTopicsRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopicsRequest", reflect.TypeOf((*MockSNSAPI)(nil).ListTopicsRequest), arg0)
}

// ListTopicsWithContext mocks base method.
func (m *MockSNSAPI) ListTopicsWithContext(arg0 aws.Context, arg1 *sns.ListTopicsInput, arg2 ...request.Option) (*sns.ListTopicsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTopicsWithContext", varargs...)
	ret0, _ := ret[0].(*sns.ListTopicsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTopicsWithContext indicates an expected call of ListTopicsWithContext.
func (mr *MockSNSAPIMockRecorder) ListTopicsWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopicsWithContext", reflect.TypeOf((*MockSNSAPI)(nil).ListTopicsWithContext), varargs...)
}

// OptInPhoneNumber mocks base method.
func (m *MockSNSAPI) OptInPhoneNumber(arg0 *sns.OptInPhoneNumberInput) (*sns.OptInPhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptInPhoneNumber", arg0)
	ret0, _ := ret[0].(*sns.OptInPhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OptInPhoneNumber indicates an expected call of OptInPhoneNumber.
func (mr *MockSNSAPIMockRecorder) OptInPhoneNumber(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptInPhoneNumber", reflect.TypeOf((*MockSNSAPI)(nil).OptInPhoneNumber), arg0)
}

// OptInPhoneNumberRequest mocks base method.
func (m *MockSNSAPI) OptInPhoneNumberRequest(arg0 *sns.OptInPhoneNumberInput) (*request.Request, *sns.OptInPhoneNumberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptInPhoneNumberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.OptInPhoneNumberOutput)
	return ret0, ret1
}

// OptInPhoneNumberRequest indicates an expected call of OptInPhoneNumberRequest.
func (mr *MockSNSAPIMockRecorder) OptInPhoneNumberRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptInPhoneNumberRequest", reflect.TypeOf((*MockSNSAPI)(nil).OptInPhoneNumberRequest), arg0)
}

// OptInPhoneNumberWithContext mocks base method.
func (m *MockSNSAPI) OptInPhoneNumberWithContext(arg0 aws.Context, arg1 *sns.OptInPhoneNumberInput, arg2 ...request.Option) (*sns.OptInPhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OptInPhoneNumberWithContext", varargs...)
	ret0, _ := ret[0].(*sns.OptInPhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OptInPhoneNumberWithContext indicates an expected call of OptInPhoneNumberWithContext.
func (mr *MockSNSAPIMockRecorder) OptInPhoneNumberWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptInPhoneNumberWithContext", reflect.TypeOf((*MockSNSAPI)(nil).OptInPhoneNumberWithContext), varargs...)
}

// Publish mocks base method.
func (m *MockSNSAPI) Publish(arg0 *sns.PublishInput) (*sns.PublishOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0)
	ret0, _ := ret[0].(*sns.PublishOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockSNSAPIMockRecorder) Publish(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockSNSAPI)(nil).Publish), arg0)
}

// PublishBatch mocks base method.
func (m *MockSNSAPI) PublishBatch(arg0 *sns.PublishBatchInput) (*sns.PublishBatchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishBatch", arg0)
	ret0, _ := ret[0].(*sns.PublishBatchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishBatch indicates an expected call of PublishBatch.
func (mr *MockSNSAPIMockRecorder) PublishBatch(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishBatch", reflect.TypeOf((*MockSNSAPI)(nil).PublishBatch), arg0)
}

// PublishBatchRequest mocks base method.
func (m *MockSNSAPI) PublishBatchRequest(arg0 *sns.PublishBatchInput) (*request.Request, *sns.PublishBatchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishBatchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.PublishBatchOutput)
	return ret0, ret1
}

// PublishBatchRequest indicates an expected call of PublishBatchRequest.
func (mr *MockSNSAPIMockRecorder) PublishBatchRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishBatchRequest", reflect.TypeOf((*MockSNSAPI)(nil).PublishBatchRequest), arg0)
}

// PublishBatchWithContext mocks base method.
func (m *MockSNSAPI) PublishBatchWithContext(arg0 aws.Context, arg1 *sns.PublishBatchInput, arg2 ...request.Option) (*sns.PublishBatchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishBatchWithContext", varargs...)
	ret0, _ := ret[0].(*sns.PublishBatchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishBatchWithContext indicates an expected call of PublishBatchWithContext.
func (mr *MockSNSAPIMockRecorder) PublishBatchWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishBatchWithContext", reflect.TypeOf((*MockSNSAPI)(nil).PublishBatchWithContext), varargs...)
}

// PublishRequest mocks base method.
func (m *MockSNSAPI) PublishRequest(arg0 *sns.PublishInput) (*request.Request, *sns.PublishOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.PublishOutput)
	return ret0, ret1
}

// PublishRequest indicates an expected call of PublishRequest.
func (mr *MockSNSAPIMockRecorder) PublishRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRequest", reflect.TypeOf((*MockSNSAPI)(nil).PublishRequest), arg0)
}

// PublishWithContext mocks base method.
func (m *MockSNSAPI) PublishWithContext(arg0 aws.Context, arg1 *sns.PublishInput, arg2 ...request.Option) (*sns.PublishOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishWithContext", varargs...)
	ret0, _ := ret[0].(*sns.PublishOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishWithContext indicates an expected call of PublishWithContext.
func (mr *MockSNSAPIMockRecorder) PublishWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWithContext", reflect.TypeOf((*MockSNSAPI)(nil).PublishWithContext), varargs...)
}

// PutDataProtectionPolicy mocks base method.
func (m *MockSNSAPI) PutDataProtectionPolicy(arg0 *sns.PutDataProtectionPolicyInput) (*sns.PutDataProtectionPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDataProtectionPolicy", arg0)
	ret0, _ := ret[0].(*sns.PutDataProtectionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDataProtectionPolicy indicates an expected call of PutDataProtectionPolicy.
func (mr *MockSNSAPIMockRecorder) PutDataProtectionPolicy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDataProtectionPolicy", reflect.TypeOf((*MockSNSAPI)(nil).PutDataProtectionPolicy), arg0)
}

// PutDataProtectionPolicyRequest mocks base method.
func (m *MockSNSAPI) PutDataProtectionPolicyRequest(arg0 *sns.PutDataProtectionPolicyInput) (*request.Request, *sns.PutDataProtectionPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDataProtectionPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.PutDataProtectionPolicyOutput)
	return ret0, ret1
}

// PutDataProtectionPolicyRequest indicates an expected call of PutDataProtectionPolicyRequest.
func (mr *MockSNSAPIMockRecorder) PutDataProtectionPolicyRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDataProtectionPolicyRequest", reflect.TypeOf((*MockSNSAPI)(nil).PutDataProtectionPolicyRequest), arg0)
}

// PutDataProtectionPolicyWithContext mocks base method.
func (m *MockSNSAPI) PutDataProtectionPolicyWithContext(arg0 aws.Context, arg1 *sns.PutDataProtectionPolicyInput, arg2 ...request.Option) (*sns.PutDataProtectionPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutDataProtectionPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*sns.PutDataProtectionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDataProtectionPolicyWithContext indicates an expected call of PutDataProtectionPolicyWithContext.
func (mr *MockSNSAPIMockRecorder) PutDataProtectionPolicyWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDataProtectionPolicyWithContext", reflect.TypeOf((*MockSNSAPI)(nil).PutDataProtectionPolicyWithContext), varargs...)
}

// RemovePermission mocks base method.
func (m *MockSNSAPI) RemovePermission(arg0 *sns.RemovePermissionInput) (*sns.RemovePermissionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePermission", arg0)
	ret0, _ := ret[0].(*sns.RemovePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePermission indicates an expected call of RemovePermission.
func (mr *MockSNSAPIMockRecorder) RemovePermission(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePermission", reflect.TypeOf((*MockSNSAPI)(nil).RemovePermission), arg0)
}

// RemovePermissionRequest mocks base method.
func (m *MockSNSAPI) RemovePermissionRequest(arg0 *sns.RemovePermissionInput) (*request.Request, *sns.RemovePermissionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePermissionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.RemovePermissionOutput)
	return ret0, ret1
}

// RemovePermissionRequest indicates an expected call of RemovePermissionRequest.
func (mr *MockSNSAPIMockRecorder) RemovePermissionRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePermissionRequest", reflect.TypeOf((*MockSNSAPI)(nil).RemovePermissionRequest), arg0)
}

// RemovePermissionWithContext mocks base method.
func (m *MockSNSAPI) RemovePermissionWithContext(arg0 aws.Context, arg1 *sns.RemovePermissionInput, arg2 ...request.Option) (*sns.RemovePermissionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemovePermissionWithContext", varargs...)
	ret0, _ := ret[0].(*sns.RemovePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePermissionWithContext indicates an expected call of RemovePermissionWithContext.
func (mr *MockSNSAPIMockRecorder) RemovePermissionWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePermissionWithContext", reflect.TypeOf((*MockSNSAPI)(nil).RemovePermissionWithContext), varargs...)
}

// SetEndpointAttributes mocks base method.
func (m *MockSNSAPI) SetEndpointAttributes(arg0 *sns.SetEndpointAttributesInput) (*sns.SetEndpointAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEndpointAttributes", arg0)
	ret0, _ := ret[0].(*sns.SetEndpointAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEndpointAttributes indicates an expected call of SetEndpointAttributes.
func (mr *MockSNSAPIMockRecorder) SetEndpointAttributes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEndpointAttributes", reflect.TypeOf((*MockSNSAPI)(nil).SetEndpointAttributes), arg0)
}

// SetEndpointAttributesRequest mocks base method.
func (m *MockSNSAPI) SetEndpointAttributesRequest(arg0 *sns.SetEndpointAttributesInput) (*request.Request, *sns.SetEndpointAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEndpointAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.SetEndpointAttributesOutput)
	return ret0, ret1
}

// SetEndpointAttributesRequest indicates an expected call of SetEndpointAttributesRequest.
func (mr *MockSNSAPIMockRecorder) SetEndpointAttributesRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEndpointAttributesRequest", reflect.TypeOf((*MockSNSAPI)(nil).SetEndpointAttributesRequest), arg0)
}

// SetEndpointAttributesWithContext mocks base method.
func (m *MockSNSAPI) SetEndpointAttributesWithContext(arg0 aws.Context, arg1 *sns.SetEndpointAttributesInput, arg2 ...request.Option) (*sns.SetEndpointAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetEndpointAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sns.SetEndpointAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEndpointAttributesWithContext indicates an expected call of SetEndpointAttributesWithContext.
func (mr *MockSNSAPIMockRecorder) SetEndpointAttributesWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEndpointAttributesWithContext", reflect.TypeOf((*MockSNSAPI)(nil).SetEndpointAttributesWithContext), varargs...)
}

// SetPlatformApplicationAttributes mocks base method.
func (m *MockSNSAPI) SetPlatformApplicationAttributes(arg0 *sns.SetPlatformApplicationAttributesInput) (*sns.SetPlatformApplicationAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPlatformApplicationAttributes", arg0)
	ret0, _ := ret[0].(*sns.SetPlatformApplicationAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPlatformApplicationAttributes indicates an expected call of SetPlatformApplicationAttributes.
func (mr *MockSNSAPIMockRecorder) SetPlatformApplicationAttributes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPlatformApplicationAttributes", reflect.TypeOf((*MockSNSAPI)(nil).SetPlatformApplicationAttributes), arg0)
}

// SetPlatformApplicationAttributesRequest mocks base method.
func (m *MockSNSAPI) SetPlatformApplicationAttributesRequest(arg0 *sns.SetPlatformApplicationAttributesInput) (*request.Request, *sns.SetPlatformApplicationAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPlatformApplicationAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.SetPlatformApplicationAttributesOutput)
	return ret0, ret1
}

// SetPlatformApplicationAttributesRequest indicates an expected call of SetPlatformApplicationAttributesRequest.
func (mr *MockSNSAPIMockRecorder) SetPlatformApplicationAttributesRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPlatformApplicationAttributesRequest", reflect.TypeOf((*MockSNSAPI)(nil).SetPlatformApplicationAttributesRequest), arg0)
}

// SetPlatformApplicationAttributesWithContext mocks base method.
func (m *MockSNSAPI) SetPlatformApplicationAttributesWithContext(arg0 aws.Context, arg1 *sns.SetPlatformApplicationAttributesInput, arg2 ...request.Option) (*sns.SetPlatformApplicationAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetPlatformApplicationAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sns.SetPlatformApplicationAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPlatformApplicationAttributesWithContext indicates an expected call of SetPlatformApplicationAttributesWithContext.
func (mr *MockSNSAPIMockRecorder) SetPlatformApplicationAttributesWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPlatformApplicationAttributesWithContext", reflect.TypeOf((*MockSNSAPI)(nil).SetPlatformApplicationAttributesWithContext), varargs...)
}

// SetSMSAttributes mocks base method.
func (m *MockSNSAPI) SetSMSAttributes(arg0 *sns.SetSMSAttributesInput) (*sns.SetSMSAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSMSAttributes", arg0)
	ret0, _ := ret[0].(*sns.SetSMSAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSMSAttributes indicates an expected call of SetSMSAttributes.
func (mr *MockSNSAPIMockRecorder) SetSMSAttributes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSMSAttributes", reflect.TypeOf((*MockSNSAPI)(nil).SetSMSAttributes), arg0)
}

// SetSMSAttributesRequest mocks base method.
func (m *MockSNSAPI) SetSMSAttributesRequest(arg0 *sns.SetSMSAttributesInput) (*request.Request, *sns.SetSMSAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSMSAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.SetSMSAttributesOutput)
	return ret0, ret1
}

// SetSMSAttributesRequest indicates an expected call of SetSMSAttributesRequest.
func (mr *MockSNSAPIMockRecorder) SetSMSAttributesRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSMSAttributesRequest", reflect.TypeOf((*MockSNSAPI)(nil).SetSMSAttributesRequest), arg0)
}

// SetSMSAttributesWithContext mocks base method.
func (m *MockSNSAPI) SetSMSAttributesWithContext(arg0 aws.Context, arg1 *sns.SetSMSAttributesInput, arg2 ...request.Option) (*sns.SetSMSAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetSMSAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sns.SetSMSAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSMSAttributesWithContext indicates an expected call of SetSMSAttributesWithContext.
func (mr *MockSNSAPIMockRecorder) SetSMSAttributesWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSMSAttributesWithContext", reflect.TypeOf((*MockSNSAPI)(nil).SetSMSAttributesWithContext), varargs...)
}

// SetSubscriptionAttributes mocks base method.
func (m *MockSNSAPI) SetSubscriptionAttributes(arg0 *sns.SetSubscriptionAttributesInput) (*sns.SetSubscriptionAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSubscriptionAttributes", arg0)
	ret0, _ := ret[0].(*sns.SetSubscriptionAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSubscriptionAttributes indicates an expected call of SetSubscriptionAttributes.
func (mr *MockSNSAPIMockRecorder) SetSubscriptionAttributes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSubscriptionAttributes", reflect.TypeOf((*MockSNSAPI)(nil).SetSubscriptionAttributes), arg0)
}

// SetSubscriptionAttributesRequest mocks base method.
func (m *MockSNSAPI) SetSubscriptionAttributesRequest(arg0 *sns.SetSubscriptionAttributesInput) (*request.Request, *sns.SetSubscriptionAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSubscriptionAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.SetSubscriptionAttributesOutput)
	return ret0, ret1
}

// SetSubscriptionAttributesRequest indicates an expected call of SetSubscriptionAttributesRequest.
func (mr *MockSNSAPIMockRecorder) SetSubscriptionAttributesRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSubscriptionAttributesRequest", reflect.TypeOf((*MockSNSAPI)(nil).SetSubscriptionAttributesRequest), arg0)
}

// SetSubscriptionAttributesWithContext mocks base method.
func (m *MockSNSAPI) SetSubscriptionAttributesWithContext(arg0 aws.Context, arg1 *sns.SetSubscriptionAttributesInput, arg2 ...request.Option) (*sns.SetSubscriptionAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetSubscriptionAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sns.SetSubscriptionAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSubscriptionAttributesWithContext indicates an expected call of SetSubscriptionAttributesWithContext.
func (mr *MockSNSAPIMockRecorder) SetSubscriptionAttributesWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSubscriptionAttributesWithContext", reflect.TypeOf((*MockSNSAPI)(nil).SetSubscriptionAttributesWithContext), varargs...)
}

// SetTopicAttributes mocks base method.
func (m *MockSNSAPI) SetTopicAttributes(arg0 *sns.SetTopicAttributesInput) (*sns.SetTopicAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTopicAttributes", arg0)
	ret0, _ := ret[0].(*sns.SetTopicAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTopicAttributes indicates an expected call of SetTopicAttributes.
func (mr *MockSNSAPIMockRecorder) SetTopicAttributes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTopicAttributes", reflect.TypeOf((*MockSNSAPI)(nil).SetTopicAttributes), arg0)
}

// SetTopicAttributesRequest mocks base method.
func (m *MockSNSAPI) SetTopicAttributesRequest(arg0 *sns.SetTopicAttributesInput) (*request.Request, *sns.SetTopicAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTopicAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.SetTopicAttributesOutput)
	return ret0, ret1
}

// SetTopicAttributesRequest indicates an expected call of SetTopicAttributesRequest.
func (mr *MockSNSAPIMockRecorder) SetTopicAttributesRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTopicAttributesRequest", reflect.TypeOf((*MockSNSAPI)(nil).SetTopicAttributesRequest), arg0)
}

// SetTopicAttributesWithContext mocks base method.
func (m *MockSNSAPI) SetTopicAttributesWithContext(arg0 aws.Context, arg1 *sns.SetTopicAttributesInput, arg2 ...request.Option) (*sns.SetTopicAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetTopicAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sns.SetTopicAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTopicAttributesWithContext indicates an expected call of SetTopicAttributesWithContext.
func (mr *MockSNSAPIMockRecorder) SetTopicAttributesWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTopicAttributesWithContext", reflect.TypeOf((*MockSNSAPI)(nil).SetTopicAttributesWithContext), varargs...)
}

// Subscribe mocks base method.
func (m *MockSNSAPI) Subscribe(arg0 *sns.SubscribeInput) (*sns.SubscribeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(*sns.SubscribeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSNSAPIMockRecorder) Subscribe(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSNSAPI)(nil).Subscribe), arg0)
}

// SubscribeRequest mocks base method.
func (m *MockSNSAPI) SubscribeRequest(arg0 *sns.SubscribeInput) (*request.Request, *sns.SubscribeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.SubscribeOutput)
	return ret0, ret1
}

// SubscribeRequest indicates an expected call of SubscribeRequest.
func (mr *MockSNSAPIMockRecorder) SubscribeRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeRequest", reflect.TypeOf((*MockSNSAPI)(nil).SubscribeRequest), arg0)
}

// SubscribeWithContext mocks base method.
func (m *MockSNSAPI) SubscribeWithContext(arg0 aws.Context, arg1 *sns.SubscribeInput, arg2 ...request.Option) (*sns.SubscribeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeWithContext", varargs...)
	ret0, _ := ret[0].(*sns.SubscribeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeWithContext indicates an expected call of SubscribeWithContext.
func (mr *MockSNSAPIMockRecorder) SubscribeWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeWithContext", reflect.TypeOf((*MockSNSAPI)(nil).SubscribeWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockSNSAPI) TagResource(arg0 *sns.TagResourceInput) (*sns.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*sns.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockSNSAPIMockRecorder) TagResource(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockSNSAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockSNSAPI) TagResourceRequest(arg0 *sns.TagResourceInput) (*request.Request, *sns.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockSNSAPIMockRecorder) TagResourceRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockSNSAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockSNSAPI) TagResourceWithContext(arg0 aws.Context, arg1 *sns.TagResourceInput, arg2 ...request.Option) (*sns.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*sns.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockSNSAPIMockRecorder) TagResourceWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockSNSAPI)(nil).TagResourceWithContext), varargs...)
}

// Unsubscribe mocks base method.
func (m *MockSNSAPI) Unsubscribe(arg0 *sns.UnsubscribeInput) (*sns.UnsubscribeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", arg0)
	ret0, _ := ret[0].(*sns.UnsubscribeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockSNSAPIMockRecorder) Unsubscribe(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockSNSAPI)(nil).Unsubscribe), arg0)
}

// UnsubscribeRequest mocks base method.
func (m *MockSNSAPI) UnsubscribeRequest(arg0 *sns.UnsubscribeInput) (*request.Request, *sns.UnsubscribeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsubscribeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.UnsubscribeOutput)
	return ret0, ret1
}

// UnsubscribeRequest indicates an expected call of UnsubscribeRequest.
func (mr *MockSNSAPIMockRecorder) UnsubscribeRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeRequest", reflect.TypeOf((*MockSNSAPI)(nil).UnsubscribeRequest), arg0)
}

// UnsubscribeWithContext mocks base method.
func (m *MockSNSAPI) UnsubscribeWithContext(arg0 aws.Context, arg1 *sns.UnsubscribeInput, arg2 ...request.Option) (*sns.UnsubscribeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsubscribeWithContext", varargs...)
	ret0, _ := ret[0].(*sns.UnsubscribeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnsubscribeWithContext indicates an expected call of UnsubscribeWithContext.
func (mr *MockSNSAPIMockRecorder) UnsubscribeWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeWithContext", reflect.TypeOf((*MockSNSAPI)(nil).UnsubscribeWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockSNSAPI) UntagResource(arg0 *sns.UntagResourceInput) (*sns.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*sns.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockSNSAPIMockRecorder) UntagResource(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockSNSAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockSNSAPI) UntagResourceRequest(arg0 *sns.UntagResourceInput) (*request.Request, *sns.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockSNSAPIMockRecorder) UntagResourceRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockSNSAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockSNSAPI) UntagResourceWithContext(arg0 aws.Context, arg1 *sns.UntagResourceInput, arg2 ...request.Option) (*sns.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*sns.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockSNSAPIMockRecorder) UntagResourceWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockSNSAPI)(nil).UntagResourceWithContext), varargs...)
}

// VerifySMSSandboxPhoneNumber mocks base method.
func (m *MockSNSAPI) VerifySMSSandboxPhoneNumber(arg0 *sns.VerifySMSSandboxPhoneNumberInput) (*sns.VerifySMSSandboxPhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifySMSSandboxPhoneNumber", arg0)
	ret0, _ := ret[0].(*sns.VerifySMSSandboxPhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifySMSSandboxPhoneNumber indicates an expected call of VerifySMSSandboxPhoneNumber.
func (mr *MockSNSAPIMockRecorder) VerifySMSSandboxPhoneNumber(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySMSSandboxPhoneNumber", reflect.TypeOf((*MockSNSAPI)(nil).VerifySMSSandboxPhoneNumber), arg0)
}

// VerifySMSSandboxPhoneNumberRequest mocks base method.
func (m *MockSNSAPI) VerifySMSSandboxPhoneNumberRequest(arg0 *sns.VerifySMSSandboxPhoneNumberInput) (*request.Request, *sns.VerifySMSSandboxPhoneNumberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifySMSSandboxPhoneNumberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sns.VerifySMSSandboxPhoneNumberOutput)
	return ret0, ret1
}

// VerifySMSSandboxPhoneNumberRequest indicates an expected call of VerifySMSSandboxPhoneNumberRequest.
func (mr *MockSNSAPIMockRecorder) VerifySMSSandboxPhoneNumberRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySMSSandboxPhoneNumberRequest", reflect.TypeOf((*MockSNSAPI)(nil).VerifySMSSandboxPhoneNumberRequest), arg0)
}

// VerifySMSSandboxPhoneNumberWithContext mocks base method.
func (m *MockSNSAPI) VerifySMSSandboxPhoneNumberWithContext(arg0 aws.Context, arg1 *sns.VerifySMSSandboxPhoneNumberInput, arg2 ...request.Option) (*sns.VerifySMSSandboxPhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifySMSSandboxPhoneNumberWithContext", varargs...)
	ret0, _ := ret[0].(*sns.VerifySMSSandboxPhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifySMSSandboxPhoneNumberWithContext indicates an expected call of VerifySMSSandboxPhoneNumberWithContext.
func (mr *MockSNSAPIMockRecorder) VerifySMSSandboxPhoneNumberWithContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySMSSandboxPhoneNumberWithContext", reflect.TypeOf((*MockSNSAPI)(nil).VerifySMSSandboxPhoneNumberWithContext), varargs...)
}
