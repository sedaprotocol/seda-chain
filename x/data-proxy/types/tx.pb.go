// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sedachain/data_proxy/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// All data required for a new data proxy.
type MsgRegisterDataProxy struct {
	// admin_address is the address that can update the proxy config.
	AdminAddress string `protobuf:"bytes,1,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// payout_address defines the address to which the data proxy fees should be
	// transferred.
	PayoutAddress string `protobuf:"bytes,2,opt,name=payout_address,json=payoutAddress,proto3" json:"payout_address,omitempty"`
	// fee defines the amount in aseda this data-proxy charges when utilised.
	Fee *types.Coin `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	// memo defines an optional string which is not used by the protocol.
	Memo string `protobuf:"bytes,4,opt,name=memo,proto3" json:"memo,omitempty"`
	// hex encoded bytes as the expected flow already uses hex encoded bytes to go
	// from the CLI to the browser where the transaction is signed.
	PubKey string `protobuf:"bytes,5,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	// hex encoded bytes as the expected flow already uses hex encoded bytes to go
	// from the CLI to the browser where the transaction is signed.
	Signature string `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgRegisterDataProxy) Reset()         { *m = MsgRegisterDataProxy{} }
func (m *MsgRegisterDataProxy) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterDataProxy) ProtoMessage()    {}
func (*MsgRegisterDataProxy) Descriptor() ([]byte, []int) {
	return fileDescriptor_40160e30cd70b841, []int{0}
}
func (m *MsgRegisterDataProxy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterDataProxy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterDataProxy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterDataProxy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterDataProxy.Merge(m, src)
}
func (m *MsgRegisterDataProxy) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterDataProxy) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterDataProxy.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterDataProxy proto.InternalMessageInfo

func (m *MsgRegisterDataProxy) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *MsgRegisterDataProxy) GetPayoutAddress() string {
	if m != nil {
		return m.PayoutAddress
	}
	return ""
}

func (m *MsgRegisterDataProxy) GetFee() *types.Coin {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *MsgRegisterDataProxy) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *MsgRegisterDataProxy) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *MsgRegisterDataProxy) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

// No response required.
type MsgRegisterDataProxyResponse struct {
}

func (m *MsgRegisterDataProxyResponse) Reset()         { *m = MsgRegisterDataProxyResponse{} }
func (m *MsgRegisterDataProxyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterDataProxyResponse) ProtoMessage()    {}
func (*MsgRegisterDataProxyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40160e30cd70b841, []int{1}
}
func (m *MsgRegisterDataProxyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterDataProxyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterDataProxyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterDataProxyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterDataProxyResponse.Merge(m, src)
}
func (m *MsgRegisterDataProxyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterDataProxyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterDataProxyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterDataProxyResponse proto.InternalMessageInfo

// Allow updating memo and payout address instantly and/or scheduling a fee
// update.
type MsgEditDataProxy struct {
	Sender           string      `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	NewPayoutAddress string      `protobuf:"bytes,2,opt,name=new_payout_address,json=newPayoutAddress,proto3" json:"new_payout_address,omitempty"`
	NewMemo          string      `protobuf:"bytes,3,opt,name=new_memo,json=newMemo,proto3" json:"new_memo,omitempty"`
	NewFee           *types.Coin `protobuf:"bytes,4,opt,name=new_fee,json=newFee,proto3" json:"new_fee,omitempty"`
	// 0 will default to the minimum delay configured in the params
	FeeUpdateDelay uint32 `protobuf:"varint,5,opt,name=fee_update_delay,json=feeUpdateDelay,proto3" json:"fee_update_delay,omitempty"`
	// hex encoded bytes as the expected flow is users sending updates from the
	// browser
	PubKey string `protobuf:"bytes,6,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
}

func (m *MsgEditDataProxy) Reset()         { *m = MsgEditDataProxy{} }
func (m *MsgEditDataProxy) String() string { return proto.CompactTextString(m) }
func (*MsgEditDataProxy) ProtoMessage()    {}
func (*MsgEditDataProxy) Descriptor() ([]byte, []int) {
	return fileDescriptor_40160e30cd70b841, []int{2}
}
func (m *MsgEditDataProxy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditDataProxy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditDataProxy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditDataProxy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditDataProxy.Merge(m, src)
}
func (m *MsgEditDataProxy) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditDataProxy) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditDataProxy.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditDataProxy proto.InternalMessageInfo

func (m *MsgEditDataProxy) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgEditDataProxy) GetNewPayoutAddress() string {
	if m != nil {
		return m.NewPayoutAddress
	}
	return ""
}

func (m *MsgEditDataProxy) GetNewMemo() string {
	if m != nil {
		return m.NewMemo
	}
	return ""
}

func (m *MsgEditDataProxy) GetNewFee() *types.Coin {
	if m != nil {
		return m.NewFee
	}
	return nil
}

func (m *MsgEditDataProxy) GetFeeUpdateDelay() uint32 {
	if m != nil {
		return m.FeeUpdateDelay
	}
	return 0
}

func (m *MsgEditDataProxy) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

// Returns the height after which the fee update will go into effect.
type MsgEditDataProxyResponse struct {
	FeeUpdateHeight int64 `protobuf:"varint,1,opt,name=fee_update_height,json=feeUpdateHeight,proto3" json:"fee_update_height,omitempty"`
}

func (m *MsgEditDataProxyResponse) Reset()         { *m = MsgEditDataProxyResponse{} }
func (m *MsgEditDataProxyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEditDataProxyResponse) ProtoMessage()    {}
func (*MsgEditDataProxyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40160e30cd70b841, []int{3}
}
func (m *MsgEditDataProxyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditDataProxyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditDataProxyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditDataProxyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditDataProxyResponse.Merge(m, src)
}
func (m *MsgEditDataProxyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditDataProxyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditDataProxyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditDataProxyResponse proto.InternalMessageInfo

func (m *MsgEditDataProxyResponse) GetFeeUpdateHeight() int64 {
	if m != nil {
		return m.FeeUpdateHeight
	}
	return 0
}

// The request message for the UpdateParams method.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Params    Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_40160e30cd70b841, []int{4}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// No response required.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40160e30cd70b841, []int{5}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterDataProxy)(nil), "sedachain.data_proxy.v1.MsgRegisterDataProxy")
	proto.RegisterType((*MsgRegisterDataProxyResponse)(nil), "sedachain.data_proxy.v1.MsgRegisterDataProxyResponse")
	proto.RegisterType((*MsgEditDataProxy)(nil), "sedachain.data_proxy.v1.MsgEditDataProxy")
	proto.RegisterType((*MsgEditDataProxyResponse)(nil), "sedachain.data_proxy.v1.MsgEditDataProxyResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "sedachain.data_proxy.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "sedachain.data_proxy.v1.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("sedachain/data_proxy/v1/tx.proto", fileDescriptor_40160e30cd70b841) }

var fileDescriptor_40160e30cd70b841 = []byte{
	// 669 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x4d, 0x6b, 0xd4, 0x40,
	0x18, 0xc7, 0x37, 0xbb, 0x6b, 0x6a, 0xa7, 0xdd, 0xbe, 0x0c, 0x85, 0xcd, 0x2e, 0x25, 0x2d, 0x7b,
	0x5a, 0x2b, 0x9b, 0x74, 0x2b, 0x15, 0x29, 0x14, 0xb1, 0xd6, 0x22, 0xc8, 0x62, 0x89, 0x78, 0xf1,
	0x12, 0x66, 0x37, 0x4f, 0xb3, 0xd1, 0x26, 0x13, 0x32, 0x93, 0x6e, 0x73, 0xf5, 0x13, 0x78, 0xf4,
	0xec, 0x27, 0x50, 0xf0, 0x43, 0xf4, 0x58, 0x3c, 0x09, 0x82, 0x48, 0x7b, 0xf0, 0x6b, 0xc8, 0x4c,
	0xb2, 0x6f, 0xb5, 0xdb, 0x6d, 0x6f, 0x33, 0xcf, 0xff, 0x3f, 0xcf, 0xcb, 0x2f, 0x99, 0x41, 0xeb,
	0x0c, 0x1c, 0xd2, 0xe9, 0x12, 0x2f, 0x30, 0x1d, 0xc2, 0x89, 0x1d, 0x46, 0xf4, 0x34, 0x31, 0x4f,
	0x9a, 0x26, 0x3f, 0x35, 0xc2, 0x88, 0x72, 0x8a, 0xcb, 0x03, 0x87, 0x31, 0x74, 0x18, 0x27, 0xcd,
	0xea, 0x8a, 0x4b, 0x5d, 0x2a, 0x3d, 0xa6, 0x58, 0xa5, 0xf6, 0x6a, 0xa5, 0x43, 0x99, 0x4f, 0x99,
	0x9d, 0x0a, 0xe9, 0x26, 0x93, 0xf4, 0x74, 0x67, 0xb6, 0x09, 0x03, 0xf3, 0xa4, 0xd9, 0x06, 0x4e,
	0x9a, 0x66, 0x87, 0x7a, 0x41, 0xa6, 0x97, 0x33, 0xdd, 0x67, 0xae, 0xe8, 0xc0, 0x67, 0x6e, 0x26,
	0xd4, 0x27, 0x35, 0x39, 0xd2, 0x90, 0x74, 0xd6, 0xbe, 0xe4, 0xd1, 0x4a, 0x8b, 0xb9, 0x16, 0xb8,
	0x1e, 0xe3, 0x10, 0xed, 0x13, 0x4e, 0x0e, 0x85, 0x8c, 0x77, 0x51, 0x89, 0x38, 0xbe, 0x17, 0xd8,
	0xc4, 0x71, 0x22, 0x60, 0x4c, 0x53, 0xd6, 0x95, 0xfa, 0xec, 0x9e, 0xf6, 0xe3, 0x7b, 0x63, 0x25,
	0x6b, 0xf2, 0x59, 0xaa, 0xbc, 0xe1, 0x91, 0x17, 0xb8, 0xd6, 0xbc, 0xb4, 0x67, 0x31, 0xfc, 0x14,
	0x2d, 0x84, 0x24, 0xa1, 0x31, 0x1f, 0x9c, 0xcf, 0x4f, 0x39, 0x5f, 0x4a, 0xfd, 0xfd, 0x04, 0x0f,
	0x51, 0xe1, 0x08, 0x40, 0x2b, 0xac, 0x2b, 0xf5, 0xb9, 0xad, 0x8a, 0x91, 0x1d, 0x11, 0x24, 0x8c,
	0x8c, 0x84, 0xf1, 0x9c, 0x7a, 0x81, 0x25, 0x5c, 0x18, 0xa3, 0xa2, 0x0f, 0x3e, 0xd5, 0x8a, 0xa2,
	0x86, 0x25, 0xd7, 0xb8, 0x8c, 0x66, 0xc2, 0xb8, 0x6d, 0x7f, 0x80, 0x44, 0xbb, 0x27, 0xc3, 0x6a,
	0x18, 0xb7, 0x5f, 0x41, 0x82, 0x57, 0xd1, 0x2c, 0xf3, 0xdc, 0x80, 0xf0, 0x38, 0x02, 0x4d, 0x95,
	0xd2, 0x30, 0xb0, 0x83, 0x3f, 0xfe, 0xfd, 0xba, 0x31, 0x3e, 0x7a, 0x4d, 0x47, 0xab, 0xd7, 0x31,
	0xb2, 0x80, 0x85, 0x34, 0x60, 0x50, 0xfb, 0x96, 0x47, 0x4b, 0x2d, 0xe6, 0xbe, 0x70, 0x3c, 0x3e,
	0x04, 0xb8, 0x89, 0x54, 0x06, 0x81, 0x03, 0xd1, 0x54, 0x72, 0x99, 0x0f, 0x1f, 0x20, 0x1c, 0x40,
	0xcf, 0xbe, 0x23, 0xb7, 0xa5, 0x00, 0x7a, 0x87, 0x63, 0xe8, 0x2a, 0xe8, 0xbe, 0xc8, 0x23, 0x89,
	0x14, 0xe4, 0x7c, 0x33, 0x01, 0xf4, 0x5a, 0x02, 0xca, 0x13, 0x24, 0x96, 0xb6, 0x20, 0x5b, 0x9c,
	0x42, 0x76, 0xaf, 0x78, 0xf6, 0x7b, 0x4d, 0xb1, 0xd4, 0x00, 0x7a, 0x07, 0x00, 0xb8, 0x8e, 0x96,
	0x8e, 0x00, 0xec, 0x38, 0x74, 0x08, 0x07, 0xdb, 0x81, 0x63, 0x92, 0x72, 0x2d, 0x59, 0x0b, 0x47,
	0x00, 0x6f, 0x65, 0x78, 0x5f, 0x44, 0x47, 0xc1, 0xab, 0xa3, 0xe0, 0x77, 0xe6, 0x04, 0xda, 0x6c,
	0xd8, 0xda, 0x01, 0xd2, 0xae, 0x22, 0xeb, 0xf3, 0xc4, 0x1b, 0x68, 0x79, 0xa4, 0x56, 0x17, 0x3c,
	0xb7, 0xcb, 0x25, 0xc5, 0x82, 0xb5, 0x38, 0x28, 0xf6, 0x52, 0x86, 0x6b, 0x9f, 0x15, 0xb4, 0xd8,
	0x62, 0x6e, 0x1a, 0x3b, 0x24, 0x11, 0xf1, 0x19, 0x7e, 0x8c, 0x66, 0x49, 0xcc, 0xbb, 0x34, 0xf2,
	0x78, 0x32, 0x95, 0xfe, 0xd0, 0x8a, 0x77, 0x91, 0x1a, 0xca, 0x0c, 0x12, 0xfa, 0xdc, 0xd6, 0x9a,
	0x31, 0xe1, 0x2a, 0x1b, 0x69, 0x21, 0x89, 0x28, 0x67, 0x65, 0x87, 0x76, 0x16, 0xc4, 0x7c, 0xc3,
	0x74, 0xb5, 0x0a, 0x2a, 0x5f, 0xe9, 0xac, 0x3f, 0xe1, 0xd6, 0xaf, 0x3c, 0x2a, 0xb4, 0x98, 0x8b,
	0x13, 0xb4, 0xfc, 0xff, 0xd5, 0x6b, 0x4c, 0x2c, 0x7b, 0xdd, 0x5f, 0x58, 0xdd, 0xbe, 0x93, 0x7d,
	0x00, 0xd9, 0x47, 0xa5, 0xf1, 0x1f, 0xf6, 0xc1, 0x4d, 0x79, 0xc6, 0xac, 0xd5, 0xe6, 0xad, 0xad,
	0x83, 0x72, 0xef, 0xd1, 0xfc, 0xd8, 0x37, 0xaa, 0xdf, 0x94, 0x62, 0xd4, 0x59, 0xdd, 0xbc, 0xad,
	0xb3, 0x5f, 0x6b, 0xef, 0xf5, 0xd9, 0x85, 0xae, 0x9c, 0x5f, 0xe8, 0xca, 0x9f, 0x0b, 0x5d, 0xf9,
	0x74, 0xa9, 0xe7, 0xce, 0x2f, 0xf5, 0xdc, 0xcf, 0x4b, 0x3d, 0xf7, 0x6e, 0xdb, 0xf5, 0x78, 0x37,
	0x6e, 0x1b, 0x1d, 0xea, 0x9b, 0x22, 0xab, 0x7c, 0x04, 0x3b, 0xf4, 0x58, 0x6e, 0x1a, 0xe9, 0x8b,
	0x79, 0x2a, 0x5f, 0xc9, 0x46, 0xfa, 0x66, 0xf2, 0x24, 0x04, 0xd6, 0x56, 0xa5, 0xef, 0xd1, 0xbf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xe1, 0xa9, 0x6b, 0xfd, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Registers a new data proxy entry in the registry.
	RegisterDataProxy(ctx context.Context, in *MsgRegisterDataProxy, opts ...grpc.CallOption) (*MsgRegisterDataProxyResponse, error)
	// Edits an existing data proxy.
	EditDataProxy(ctx context.Context, in *MsgEditDataProxy, opts ...grpc.CallOption) (*MsgEditDataProxyResponse, error)
	// Used to update the modules parameters through governance.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterDataProxy(ctx context.Context, in *MsgRegisterDataProxy, opts ...grpc.CallOption) (*MsgRegisterDataProxyResponse, error) {
	out := new(MsgRegisterDataProxyResponse)
	err := c.cc.Invoke(ctx, "/sedachain.data_proxy.v1.Msg/RegisterDataProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditDataProxy(ctx context.Context, in *MsgEditDataProxy, opts ...grpc.CallOption) (*MsgEditDataProxyResponse, error) {
	out := new(MsgEditDataProxyResponse)
	err := c.cc.Invoke(ctx, "/sedachain.data_proxy.v1.Msg/EditDataProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/sedachain.data_proxy.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Registers a new data proxy entry in the registry.
	RegisterDataProxy(context.Context, *MsgRegisterDataProxy) (*MsgRegisterDataProxyResponse, error)
	// Edits an existing data proxy.
	EditDataProxy(context.Context, *MsgEditDataProxy) (*MsgEditDataProxyResponse, error)
	// Used to update the modules parameters through governance.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterDataProxy(ctx context.Context, req *MsgRegisterDataProxy) (*MsgRegisterDataProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDataProxy not implemented")
}
func (*UnimplementedMsgServer) EditDataProxy(ctx context.Context, req *MsgEditDataProxy) (*MsgEditDataProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditDataProxy not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterDataProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterDataProxy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterDataProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.data_proxy.v1.Msg/RegisterDataProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterDataProxy(ctx, req.(*MsgRegisterDataProxy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditDataProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEditDataProxy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditDataProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.data_proxy.v1.Msg/EditDataProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditDataProxy(ctx, req.(*MsgEditDataProxy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.data_proxy.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sedachain.data_proxy.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDataProxy",
			Handler:    _Msg_RegisterDataProxy_Handler,
		},
		{
			MethodName: "EditDataProxy",
			Handler:    _Msg_EditDataProxy_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sedachain/data_proxy/v1/tx.proto",
}

func (m *MsgRegisterDataProxy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterDataProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterDataProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x22
	}
	if m.Fee != nil {
		{
			size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PayoutAddress) > 0 {
		i -= len(m.PayoutAddress)
		copy(dAtA[i:], m.PayoutAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PayoutAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterDataProxyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterDataProxyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterDataProxyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgEditDataProxy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditDataProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditDataProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x32
	}
	if m.FeeUpdateDelay != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FeeUpdateDelay))
		i--
		dAtA[i] = 0x28
	}
	if m.NewFee != nil {
		{
			size, err := m.NewFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.NewMemo) > 0 {
		i -= len(m.NewMemo)
		copy(dAtA[i:], m.NewMemo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewMemo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewPayoutAddress) > 0 {
		i -= len(m.NewPayoutAddress)
		copy(dAtA[i:], m.NewPayoutAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewPayoutAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditDataProxyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditDataProxyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditDataProxyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeUpdateHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FeeUpdateHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterDataProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PayoutAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterDataProxyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgEditDataProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewPayoutAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewMemo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NewFee != nil {
		l = m.NewFee.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FeeUpdateDelay != 0 {
		n += 1 + sovTx(uint64(m.FeeUpdateDelay))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEditDataProxyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeeUpdateHeight != 0 {
		n += 1 + sovTx(uint64(m.FeeUpdateHeight))
	}
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterDataProxy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterDataProxy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterDataProxy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayoutAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &types.Coin{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterDataProxyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterDataProxyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterDataProxyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditDataProxy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditDataProxy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditDataProxy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPayoutAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPayoutAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMemo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewMemo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewFee == nil {
				m.NewFee = &types.Coin{}
			}
			if err := m.NewFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeUpdateDelay", wireType)
			}
			m.FeeUpdateDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeUpdateDelay |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditDataProxyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditDataProxyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditDataProxyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeUpdateHeight", wireType)
			}
			m.FeeUpdateHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeUpdateHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
