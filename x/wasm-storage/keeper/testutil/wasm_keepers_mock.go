// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/hykim/go/pkg/mod/github.com/!cosm!wasm/wasmd@v0.53.3/x/wasm/types/exported_keepers.go
//
// Generated by this command:
//
//	mockgen -source=/Users/hykim/go/pkg/mod/github.com/!cosm!wasm/wasmd@v0.53.3/x/wasm/types/exported_keepers.go -package testutil -destination=x/wasm-storage/keeper/testutil/wasm_keepers_mock.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	types "github.com/CosmWasm/wasmd/x/wasm/types"
	types0 "github.com/CosmWasm/wasmvm/v2/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	types2 "github.com/cosmos/ibc-go/modules/capability/types"
	types3 "github.com/cosmos/ibc-go/v8/modules/core/04-channel/types"
	exported "github.com/cosmos/ibc-go/v8/modules/core/exported"
	gomock "go.uber.org/mock/gomock"
)

// MockViewKeeper is a mock of ViewKeeper interface.
type MockViewKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockViewKeeperMockRecorder
	isgomock struct{}
}

// MockViewKeeperMockRecorder is the mock recorder for MockViewKeeper.
type MockViewKeeperMockRecorder struct {
	mock *MockViewKeeper
}

// NewMockViewKeeper creates a new mock instance.
func NewMockViewKeeper(ctrl *gomock.Controller) *MockViewKeeper {
	mock := &MockViewKeeper{ctrl: ctrl}
	mock.recorder = &MockViewKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockViewKeeper) EXPECT() *MockViewKeeperMockRecorder {
	return m.recorder
}

// GetByteCode mocks base method.
func (m *MockViewKeeper) GetByteCode(ctx context.Context, codeID uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByteCode", ctx, codeID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByteCode indicates an expected call of GetByteCode.
func (mr *MockViewKeeperMockRecorder) GetByteCode(ctx, codeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByteCode", reflect.TypeOf((*MockViewKeeper)(nil).GetByteCode), ctx, codeID)
}

// GetCodeInfo mocks base method.
func (m *MockViewKeeper) GetCodeInfo(ctx context.Context, codeID uint64) *types.CodeInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeInfo", ctx, codeID)
	ret0, _ := ret[0].(*types.CodeInfo)
	return ret0
}

// GetCodeInfo indicates an expected call of GetCodeInfo.
func (mr *MockViewKeeperMockRecorder) GetCodeInfo(ctx, codeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeInfo", reflect.TypeOf((*MockViewKeeper)(nil).GetCodeInfo), ctx, codeID)
}

// GetContractHistory mocks base method.
func (m *MockViewKeeper) GetContractHistory(ctx context.Context, contractAddr types1.AccAddress) []types.ContractCodeHistoryEntry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractHistory", ctx, contractAddr)
	ret0, _ := ret[0].([]types.ContractCodeHistoryEntry)
	return ret0
}

// GetContractHistory indicates an expected call of GetContractHistory.
func (mr *MockViewKeeperMockRecorder) GetContractHistory(ctx, contractAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractHistory", reflect.TypeOf((*MockViewKeeper)(nil).GetContractHistory), ctx, contractAddr)
}

// GetContractInfo mocks base method.
func (m *MockViewKeeper) GetContractInfo(ctx context.Context, contractAddress types1.AccAddress) *types.ContractInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractInfo", ctx, contractAddress)
	ret0, _ := ret[0].(*types.ContractInfo)
	return ret0
}

// GetContractInfo indicates an expected call of GetContractInfo.
func (mr *MockViewKeeperMockRecorder) GetContractInfo(ctx, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractInfo", reflect.TypeOf((*MockViewKeeper)(nil).GetContractInfo), ctx, contractAddress)
}

// GetParams mocks base method.
func (m *MockViewKeeper) GetParams(ctx context.Context) types.Params {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParams", ctx)
	ret0, _ := ret[0].(types.Params)
	return ret0
}

// GetParams indicates an expected call of GetParams.
func (mr *MockViewKeeperMockRecorder) GetParams(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParams", reflect.TypeOf((*MockViewKeeper)(nil).GetParams), ctx)
}

// HasContractInfo mocks base method.
func (m *MockViewKeeper) HasContractInfo(ctx context.Context, contractAddress types1.AccAddress) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasContractInfo", ctx, contractAddress)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasContractInfo indicates an expected call of HasContractInfo.
func (mr *MockViewKeeperMockRecorder) HasContractInfo(ctx, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasContractInfo", reflect.TypeOf((*MockViewKeeper)(nil).HasContractInfo), ctx, contractAddress)
}

// IsPinnedCode mocks base method.
func (m *MockViewKeeper) IsPinnedCode(ctx context.Context, codeID uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPinnedCode", ctx, codeID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPinnedCode indicates an expected call of IsPinnedCode.
func (mr *MockViewKeeperMockRecorder) IsPinnedCode(ctx, codeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPinnedCode", reflect.TypeOf((*MockViewKeeper)(nil).IsPinnedCode), ctx, codeID)
}

// IterateCodeInfos mocks base method.
func (m *MockViewKeeper) IterateCodeInfos(ctx context.Context, cb func(uint64, types.CodeInfo) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IterateCodeInfos", ctx, cb)
}

// IterateCodeInfos indicates an expected call of IterateCodeInfos.
func (mr *MockViewKeeperMockRecorder) IterateCodeInfos(ctx, cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IterateCodeInfos", reflect.TypeOf((*MockViewKeeper)(nil).IterateCodeInfos), ctx, cb)
}

// IterateContractInfo mocks base method.
func (m *MockViewKeeper) IterateContractInfo(ctx context.Context, cb func(types1.AccAddress, types.ContractInfo) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IterateContractInfo", ctx, cb)
}

// IterateContractInfo indicates an expected call of IterateContractInfo.
func (mr *MockViewKeeperMockRecorder) IterateContractInfo(ctx, cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IterateContractInfo", reflect.TypeOf((*MockViewKeeper)(nil).IterateContractInfo), ctx, cb)
}

// IterateContractState mocks base method.
func (m *MockViewKeeper) IterateContractState(ctx context.Context, contractAddress types1.AccAddress, cb func([]byte, []byte) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IterateContractState", ctx, contractAddress, cb)
}

// IterateContractState indicates an expected call of IterateContractState.
func (mr *MockViewKeeperMockRecorder) IterateContractState(ctx, contractAddress, cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IterateContractState", reflect.TypeOf((*MockViewKeeper)(nil).IterateContractState), ctx, contractAddress, cb)
}

// IterateContractsByCode mocks base method.
func (m *MockViewKeeper) IterateContractsByCode(ctx context.Context, codeID uint64, cb func(types1.AccAddress) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IterateContractsByCode", ctx, codeID, cb)
}

// IterateContractsByCode indicates an expected call of IterateContractsByCode.
func (mr *MockViewKeeperMockRecorder) IterateContractsByCode(ctx, codeID, cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IterateContractsByCode", reflect.TypeOf((*MockViewKeeper)(nil).IterateContractsByCode), ctx, codeID, cb)
}

// IterateContractsByCreator mocks base method.
func (m *MockViewKeeper) IterateContractsByCreator(ctx context.Context, creator types1.AccAddress, cb func(types1.AccAddress) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IterateContractsByCreator", ctx, creator, cb)
}

// IterateContractsByCreator indicates an expected call of IterateContractsByCreator.
func (mr *MockViewKeeperMockRecorder) IterateContractsByCreator(ctx, creator, cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IterateContractsByCreator", reflect.TypeOf((*MockViewKeeper)(nil).IterateContractsByCreator), ctx, creator, cb)
}

// QueryRaw mocks base method.
func (m *MockViewKeeper) QueryRaw(ctx context.Context, contractAddress types1.AccAddress, key []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRaw", ctx, contractAddress, key)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// QueryRaw indicates an expected call of QueryRaw.
func (mr *MockViewKeeperMockRecorder) QueryRaw(ctx, contractAddress, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRaw", reflect.TypeOf((*MockViewKeeper)(nil).QueryRaw), ctx, contractAddress, key)
}

// QuerySmart mocks base method.
func (m *MockViewKeeper) QuerySmart(ctx context.Context, contractAddr types1.AccAddress, req []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySmart", ctx, contractAddr, req)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySmart indicates an expected call of QuerySmart.
func (mr *MockViewKeeperMockRecorder) QuerySmart(ctx, contractAddr, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySmart", reflect.TypeOf((*MockViewKeeper)(nil).QuerySmart), ctx, contractAddr, req)
}

// MockContractOpsKeeper is a mock of ContractOpsKeeper interface.
type MockContractOpsKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockContractOpsKeeperMockRecorder
	isgomock struct{}
}

// MockContractOpsKeeperMockRecorder is the mock recorder for MockContractOpsKeeper.
type MockContractOpsKeeperMockRecorder struct {
	mock *MockContractOpsKeeper
}

// NewMockContractOpsKeeper creates a new mock instance.
func NewMockContractOpsKeeper(ctrl *gomock.Controller) *MockContractOpsKeeper {
	mock := &MockContractOpsKeeper{ctrl: ctrl}
	mock.recorder = &MockContractOpsKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractOpsKeeper) EXPECT() *MockContractOpsKeeperMockRecorder {
	return m.recorder
}

// ClearContractAdmin mocks base method.
func (m *MockContractOpsKeeper) ClearContractAdmin(ctx types1.Context, contractAddress, caller types1.AccAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearContractAdmin", ctx, contractAddress, caller)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearContractAdmin indicates an expected call of ClearContractAdmin.
func (mr *MockContractOpsKeeperMockRecorder) ClearContractAdmin(ctx, contractAddress, caller any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearContractAdmin", reflect.TypeOf((*MockContractOpsKeeper)(nil).ClearContractAdmin), ctx, contractAddress, caller)
}

// Create mocks base method.
func (m *MockContractOpsKeeper) Create(ctx types1.Context, creator types1.AccAddress, wasmCode []byte, instantiateAccess *types.AccessConfig) (uint64, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, creator, wasmCode, instantiateAccess)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockContractOpsKeeperMockRecorder) Create(ctx, creator, wasmCode, instantiateAccess any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContractOpsKeeper)(nil).Create), ctx, creator, wasmCode, instantiateAccess)
}

// Execute mocks base method.
func (m *MockContractOpsKeeper) Execute(ctx types1.Context, contractAddress, caller types1.AccAddress, msg []byte, coins types1.Coins) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, contractAddress, caller, msg, coins)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockContractOpsKeeperMockRecorder) Execute(ctx, contractAddress, caller, msg, coins any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockContractOpsKeeper)(nil).Execute), ctx, contractAddress, caller, msg, coins)
}

// Instantiate mocks base method.
func (m *MockContractOpsKeeper) Instantiate(ctx types1.Context, codeID uint64, creator, admin types1.AccAddress, initMsg []byte, label string, deposit types1.Coins) (types1.AccAddress, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instantiate", ctx, codeID, creator, admin, initMsg, label, deposit)
	ret0, _ := ret[0].(types1.AccAddress)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Instantiate indicates an expected call of Instantiate.
func (mr *MockContractOpsKeeperMockRecorder) Instantiate(ctx, codeID, creator, admin, initMsg, label, deposit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instantiate", reflect.TypeOf((*MockContractOpsKeeper)(nil).Instantiate), ctx, codeID, creator, admin, initMsg, label, deposit)
}

// Instantiate2 mocks base method.
func (m *MockContractOpsKeeper) Instantiate2(ctx types1.Context, codeID uint64, creator, admin types1.AccAddress, initMsg []byte, label string, deposit types1.Coins, salt []byte, fixMsg bool) (types1.AccAddress, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instantiate2", ctx, codeID, creator, admin, initMsg, label, deposit, salt, fixMsg)
	ret0, _ := ret[0].(types1.AccAddress)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Instantiate2 indicates an expected call of Instantiate2.
func (mr *MockContractOpsKeeperMockRecorder) Instantiate2(ctx, codeID, creator, admin, initMsg, label, deposit, salt, fixMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instantiate2", reflect.TypeOf((*MockContractOpsKeeper)(nil).Instantiate2), ctx, codeID, creator, admin, initMsg, label, deposit, salt, fixMsg)
}

// Migrate mocks base method.
func (m *MockContractOpsKeeper) Migrate(ctx types1.Context, contractAddress, caller types1.AccAddress, newCodeID uint64, msg []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate", ctx, contractAddress, caller, newCodeID, msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Migrate indicates an expected call of Migrate.
func (mr *MockContractOpsKeeperMockRecorder) Migrate(ctx, contractAddress, caller, newCodeID, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockContractOpsKeeper)(nil).Migrate), ctx, contractAddress, caller, newCodeID, msg)
}

// PinCode mocks base method.
func (m *MockContractOpsKeeper) PinCode(ctx types1.Context, codeID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PinCode", ctx, codeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PinCode indicates an expected call of PinCode.
func (mr *MockContractOpsKeeperMockRecorder) PinCode(ctx, codeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PinCode", reflect.TypeOf((*MockContractOpsKeeper)(nil).PinCode), ctx, codeID)
}

// SetAccessConfig mocks base method.
func (m *MockContractOpsKeeper) SetAccessConfig(ctx types1.Context, codeID uint64, caller types1.AccAddress, newConfig types.AccessConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccessConfig", ctx, codeID, caller, newConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccessConfig indicates an expected call of SetAccessConfig.
func (mr *MockContractOpsKeeperMockRecorder) SetAccessConfig(ctx, codeID, caller, newConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccessConfig", reflect.TypeOf((*MockContractOpsKeeper)(nil).SetAccessConfig), ctx, codeID, caller, newConfig)
}

// SetContractInfoExtension mocks base method.
func (m *MockContractOpsKeeper) SetContractInfoExtension(ctx types1.Context, contract types1.AccAddress, extra types.ContractInfoExtension) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetContractInfoExtension", ctx, contract, extra)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetContractInfoExtension indicates an expected call of SetContractInfoExtension.
func (mr *MockContractOpsKeeperMockRecorder) SetContractInfoExtension(ctx, contract, extra any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContractInfoExtension", reflect.TypeOf((*MockContractOpsKeeper)(nil).SetContractInfoExtension), ctx, contract, extra)
}

// Sudo mocks base method.
func (m *MockContractOpsKeeper) Sudo(ctx types1.Context, contractAddress types1.AccAddress, msg []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sudo", ctx, contractAddress, msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sudo indicates an expected call of Sudo.
func (mr *MockContractOpsKeeperMockRecorder) Sudo(ctx, contractAddress, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sudo", reflect.TypeOf((*MockContractOpsKeeper)(nil).Sudo), ctx, contractAddress, msg)
}

// UnpinCode mocks base method.
func (m *MockContractOpsKeeper) UnpinCode(ctx types1.Context, codeID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpinCode", ctx, codeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnpinCode indicates an expected call of UnpinCode.
func (mr *MockContractOpsKeeperMockRecorder) UnpinCode(ctx, codeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpinCode", reflect.TypeOf((*MockContractOpsKeeper)(nil).UnpinCode), ctx, codeID)
}

// UpdateContractAdmin mocks base method.
func (m *MockContractOpsKeeper) UpdateContractAdmin(ctx types1.Context, contractAddress, caller, newAdmin types1.AccAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContractAdmin", ctx, contractAddress, caller, newAdmin)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContractAdmin indicates an expected call of UpdateContractAdmin.
func (mr *MockContractOpsKeeperMockRecorder) UpdateContractAdmin(ctx, contractAddress, caller, newAdmin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContractAdmin", reflect.TypeOf((*MockContractOpsKeeper)(nil).UpdateContractAdmin), ctx, contractAddress, caller, newAdmin)
}

// MockIBCContractKeeper is a mock of IBCContractKeeper interface.
type MockIBCContractKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockIBCContractKeeperMockRecorder
	isgomock struct{}
}

// MockIBCContractKeeperMockRecorder is the mock recorder for MockIBCContractKeeper.
type MockIBCContractKeeperMockRecorder struct {
	mock *MockIBCContractKeeper
}

// NewMockIBCContractKeeper creates a new mock instance.
func NewMockIBCContractKeeper(ctrl *gomock.Controller) *MockIBCContractKeeper {
	mock := &MockIBCContractKeeper{ctrl: ctrl}
	mock.recorder = &MockIBCContractKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBCContractKeeper) EXPECT() *MockIBCContractKeeperMockRecorder {
	return m.recorder
}

// AuthenticateCapability mocks base method.
func (m *MockIBCContractKeeper) AuthenticateCapability(ctx types1.Context, cap *types2.Capability, name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateCapability", ctx, cap, name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AuthenticateCapability indicates an expected call of AuthenticateCapability.
func (mr *MockIBCContractKeeperMockRecorder) AuthenticateCapability(ctx, cap, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateCapability", reflect.TypeOf((*MockIBCContractKeeper)(nil).AuthenticateCapability), ctx, cap, name)
}

// ClaimCapability mocks base method.
func (m *MockIBCContractKeeper) ClaimCapability(ctx types1.Context, cap *types2.Capability, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimCapability", ctx, cap, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClaimCapability indicates an expected call of ClaimCapability.
func (mr *MockIBCContractKeeperMockRecorder) ClaimCapability(ctx, cap, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimCapability", reflect.TypeOf((*MockIBCContractKeeper)(nil).ClaimCapability), ctx, cap, name)
}

// DeleteAsyncAckPacket mocks base method.
func (m *MockIBCContractKeeper) DeleteAsyncAckPacket(ctx context.Context, portID, channelID string, sequence uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteAsyncAckPacket", ctx, portID, channelID, sequence)
}

// DeleteAsyncAckPacket indicates an expected call of DeleteAsyncAckPacket.
func (mr *MockIBCContractKeeperMockRecorder) DeleteAsyncAckPacket(ctx, portID, channelID, sequence any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAsyncAckPacket", reflect.TypeOf((*MockIBCContractKeeper)(nil).DeleteAsyncAckPacket), ctx, portID, channelID, sequence)
}

// IBCDestinationCallback mocks base method.
func (m *MockIBCContractKeeper) IBCDestinationCallback(ctx types1.Context, contractAddr types1.AccAddress, msg types0.IBCDestinationCallbackMsg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IBCDestinationCallback", ctx, contractAddr, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// IBCDestinationCallback indicates an expected call of IBCDestinationCallback.
func (mr *MockIBCContractKeeperMockRecorder) IBCDestinationCallback(ctx, contractAddr, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IBCDestinationCallback", reflect.TypeOf((*MockIBCContractKeeper)(nil).IBCDestinationCallback), ctx, contractAddr, msg)
}

// IBCSourceCallback mocks base method.
func (m *MockIBCContractKeeper) IBCSourceCallback(ctx types1.Context, contractAddr types1.AccAddress, msg types0.IBCSourceCallbackMsg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IBCSourceCallback", ctx, contractAddr, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// IBCSourceCallback indicates an expected call of IBCSourceCallback.
func (mr *MockIBCContractKeeperMockRecorder) IBCSourceCallback(ctx, contractAddr, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IBCSourceCallback", reflect.TypeOf((*MockIBCContractKeeper)(nil).IBCSourceCallback), ctx, contractAddr, msg)
}

// LoadAsyncAckPacket mocks base method.
func (m *MockIBCContractKeeper) LoadAsyncAckPacket(ctx context.Context, portID, channelID string, sequence uint64) (types3.Packet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAsyncAckPacket", ctx, portID, channelID, sequence)
	ret0, _ := ret[0].(types3.Packet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAsyncAckPacket indicates an expected call of LoadAsyncAckPacket.
func (mr *MockIBCContractKeeperMockRecorder) LoadAsyncAckPacket(ctx, portID, channelID, sequence any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAsyncAckPacket", reflect.TypeOf((*MockIBCContractKeeper)(nil).LoadAsyncAckPacket), ctx, portID, channelID, sequence)
}

// OnAckPacket mocks base method.
func (m *MockIBCContractKeeper) OnAckPacket(ctx types1.Context, contractAddr types1.AccAddress, acknowledgement types0.IBCPacketAckMsg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnAckPacket", ctx, contractAddr, acknowledgement)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnAckPacket indicates an expected call of OnAckPacket.
func (mr *MockIBCContractKeeperMockRecorder) OnAckPacket(ctx, contractAddr, acknowledgement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAckPacket", reflect.TypeOf((*MockIBCContractKeeper)(nil).OnAckPacket), ctx, contractAddr, acknowledgement)
}

// OnCloseChannel mocks base method.
func (m *MockIBCContractKeeper) OnCloseChannel(ctx types1.Context, contractAddr types1.AccAddress, msg types0.IBCChannelCloseMsg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnCloseChannel", ctx, contractAddr, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnCloseChannel indicates an expected call of OnCloseChannel.
func (mr *MockIBCContractKeeperMockRecorder) OnCloseChannel(ctx, contractAddr, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnCloseChannel", reflect.TypeOf((*MockIBCContractKeeper)(nil).OnCloseChannel), ctx, contractAddr, msg)
}

// OnConnectChannel mocks base method.
func (m *MockIBCContractKeeper) OnConnectChannel(ctx types1.Context, contractAddr types1.AccAddress, msg types0.IBCChannelConnectMsg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnConnectChannel", ctx, contractAddr, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnConnectChannel indicates an expected call of OnConnectChannel.
func (mr *MockIBCContractKeeperMockRecorder) OnConnectChannel(ctx, contractAddr, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConnectChannel", reflect.TypeOf((*MockIBCContractKeeper)(nil).OnConnectChannel), ctx, contractAddr, msg)
}

// OnOpenChannel mocks base method.
func (m *MockIBCContractKeeper) OnOpenChannel(ctx types1.Context, contractAddr types1.AccAddress, msg types0.IBCChannelOpenMsg) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnOpenChannel", ctx, contractAddr, msg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnOpenChannel indicates an expected call of OnOpenChannel.
func (mr *MockIBCContractKeeperMockRecorder) OnOpenChannel(ctx, contractAddr, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnOpenChannel", reflect.TypeOf((*MockIBCContractKeeper)(nil).OnOpenChannel), ctx, contractAddr, msg)
}

// OnRecvPacket mocks base method.
func (m *MockIBCContractKeeper) OnRecvPacket(ctx types1.Context, contractAddr types1.AccAddress, msg types0.IBCPacketReceiveMsg) (exported.Acknowledgement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnRecvPacket", ctx, contractAddr, msg)
	ret0, _ := ret[0].(exported.Acknowledgement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnRecvPacket indicates an expected call of OnRecvPacket.
func (mr *MockIBCContractKeeperMockRecorder) OnRecvPacket(ctx, contractAddr, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRecvPacket", reflect.TypeOf((*MockIBCContractKeeper)(nil).OnRecvPacket), ctx, contractAddr, msg)
}

// OnTimeoutPacket mocks base method.
func (m *MockIBCContractKeeper) OnTimeoutPacket(ctx types1.Context, contractAddr types1.AccAddress, msg types0.IBCPacketTimeoutMsg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnTimeoutPacket", ctx, contractAddr, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnTimeoutPacket indicates an expected call of OnTimeoutPacket.
func (mr *MockIBCContractKeeperMockRecorder) OnTimeoutPacket(ctx, contractAddr, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnTimeoutPacket", reflect.TypeOf((*MockIBCContractKeeper)(nil).OnTimeoutPacket), ctx, contractAddr, msg)
}

// StoreAsyncAckPacket mocks base method.
func (m *MockIBCContractKeeper) StoreAsyncAckPacket(ctx context.Context, packet types3.Packet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAsyncAckPacket", ctx, packet)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreAsyncAckPacket indicates an expected call of StoreAsyncAckPacket.
func (mr *MockIBCContractKeeperMockRecorder) StoreAsyncAckPacket(ctx, packet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAsyncAckPacket", reflect.TypeOf((*MockIBCContractKeeper)(nil).StoreAsyncAckPacket), ctx, packet)
}
