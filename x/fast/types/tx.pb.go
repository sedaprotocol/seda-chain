// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sedachain/fast/v1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SettleType defines the type of settle (withdraw or burn)
type SettleType int32

const (
	// An unspecified settle type which will throw an error.
	SETTLE_TYPE_UNSPECIFIED SettleType = 0
	// Withdraw the credits to the admin address.
	SETTLE_TYPE_WITHDRAW SettleType = 1
	// Burn the credits.
	SETTLE_TYPE_BURN SettleType = 2
)

var SettleType_name = map[int32]string{
	0: "SETTLE_TYPE_UNSPECIFIED",
	1: "SETTLE_TYPE_WITHDRAW",
	2: "SETTLE_TYPE_BURN",
}

var SettleType_value = map[string]int32{
	"SETTLE_TYPE_UNSPECIFIED": 0,
	"SETTLE_TYPE_WITHDRAW":    1,
	"SETTLE_TYPE_BURN":        2,
}

func (x SettleType) String() string {
	return proto.EnumName(SettleType_name, int32(x))
}

func (SettleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{0}
}

// All data required for a new fast client.
type MsgRegisterFastClient struct {
	// authority is the address that controls the fast module.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// the address that can edit the fast client.
	OwnerAddress string `protobuf:"bytes,2,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	// The public key of the fast client used to verify signed requests as a hex
	// string.
	PublicKey string `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// admin_address defines the address that can perform administrative actions
	// on the fast client.
	AdminAddress string `protobuf:"bytes,4,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// the address of the fast client that is allowed to submit reports.
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// memo defines an optional string which is not used by the protocol.
	Memo string `protobuf:"bytes,6,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (m *MsgRegisterFastClient) Reset()         { *m = MsgRegisterFastClient{} }
func (m *MsgRegisterFastClient) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterFastClient) ProtoMessage()    {}
func (*MsgRegisterFastClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{0}
}
func (m *MsgRegisterFastClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterFastClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterFastClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterFastClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterFastClient.Merge(m, src)
}
func (m *MsgRegisterFastClient) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterFastClient) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterFastClient.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterFastClient proto.InternalMessageInfo

func (m *MsgRegisterFastClient) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgRegisterFastClient) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgRegisterFastClient) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *MsgRegisterFastClient) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *MsgRegisterFastClient) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgRegisterFastClient) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

// MsgRegisterFastClientResponse is the response type for the
// Msg/RegisterFastClient
type MsgRegisterFastClientResponse struct {
}

func (m *MsgRegisterFastClientResponse) Reset()         { *m = MsgRegisterFastClientResponse{} }
func (m *MsgRegisterFastClientResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterFastClientResponse) ProtoMessage()    {}
func (*MsgRegisterFastClientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{1}
}
func (m *MsgRegisterFastClientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterFastClientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterFastClientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterFastClientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterFastClientResponse.Merge(m, src)
}
func (m *MsgRegisterFastClientResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterFastClientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterFastClientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterFastClientResponse proto.InternalMessageInfo

// Allows the owner to edit the fast client.
type MsgEditFastClient struct {
	// this should match the owner_address in the fast client
	OwnerAddress string `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	// the public key of the fast client as a hex string
	FastClientPublicKey string `protobuf:"bytes,2,opt,name=fast_client_public_key,json=fastClientPublicKey,proto3" json:"fast_client_public_key,omitempty"`
	// [optional] the new admin address of the fast client
	NewAdminAddress string `protobuf:"bytes,3,opt,name=new_admin_address,json=newAdminAddress,proto3" json:"new_admin_address,omitempty"`
	// [optional] the new address of the fast client
	NewAddress string `protobuf:"bytes,4,opt,name=new_address,json=newAddress,proto3" json:"new_address,omitempty"`
	// [optional] the new public key of the fast client as a hex string
	NewPublicKey string `protobuf:"bytes,5,opt,name=new_public_key,json=newPublicKey,proto3" json:"new_public_key,omitempty"`
	// [optional] the new memo of the fast client
	NewMemo string `protobuf:"bytes,6,opt,name=new_memo,json=newMemo,proto3" json:"new_memo,omitempty"`
}

func (m *MsgEditFastClient) Reset()         { *m = MsgEditFastClient{} }
func (m *MsgEditFastClient) String() string { return proto.CompactTextString(m) }
func (*MsgEditFastClient) ProtoMessage()    {}
func (*MsgEditFastClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{2}
}
func (m *MsgEditFastClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditFastClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditFastClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditFastClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditFastClient.Merge(m, src)
}
func (m *MsgEditFastClient) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditFastClient) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditFastClient.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditFastClient proto.InternalMessageInfo

func (m *MsgEditFastClient) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgEditFastClient) GetFastClientPublicKey() string {
	if m != nil {
		return m.FastClientPublicKey
	}
	return ""
}

func (m *MsgEditFastClient) GetNewAdminAddress() string {
	if m != nil {
		return m.NewAdminAddress
	}
	return ""
}

func (m *MsgEditFastClient) GetNewAddress() string {
	if m != nil {
		return m.NewAddress
	}
	return ""
}

func (m *MsgEditFastClient) GetNewPublicKey() string {
	if m != nil {
		return m.NewPublicKey
	}
	return ""
}

func (m *MsgEditFastClient) GetNewMemo() string {
	if m != nil {
		return m.NewMemo
	}
	return ""
}

// MsgEditFastClientResponse is the response type for the Msg/EditFastClient RPC
// method.
type MsgEditFastClientResponse struct {
}

func (m *MsgEditFastClientResponse) Reset()         { *m = MsgEditFastClientResponse{} }
func (m *MsgEditFastClientResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEditFastClientResponse) ProtoMessage()    {}
func (*MsgEditFastClientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{3}
}
func (m *MsgEditFastClientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditFastClientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditFastClientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditFastClientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditFastClientResponse.Merge(m, src)
}
func (m *MsgEditFastClientResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditFastClientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditFastClientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditFastClientResponse proto.InternalMessageInfo

// Allows the owner to transfer the ownership of the fast client to a new
// address.
type MsgTransferOwnership struct {
	// this should match the owner_address in the fast client
	OwnerAddress string `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	// the public key of the fast client as a hex string
	FastClientPublicKey string `protobuf:"bytes,2,opt,name=fast_client_public_key,json=fastClientPublicKey,proto3" json:"fast_client_public_key,omitempty"`
	// the new owner address of the fast client
	NewOwnerAddress string `protobuf:"bytes,3,opt,name=new_owner_address,json=newOwnerAddress,proto3" json:"new_owner_address,omitempty"`
}

func (m *MsgTransferOwnership) Reset()         { *m = MsgTransferOwnership{} }
func (m *MsgTransferOwnership) String() string { return proto.CompactTextString(m) }
func (*MsgTransferOwnership) ProtoMessage()    {}
func (*MsgTransferOwnership) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{4}
}
func (m *MsgTransferOwnership) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferOwnership) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferOwnership.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferOwnership) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferOwnership.Merge(m, src)
}
func (m *MsgTransferOwnership) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferOwnership) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferOwnership.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferOwnership proto.InternalMessageInfo

func (m *MsgTransferOwnership) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgTransferOwnership) GetFastClientPublicKey() string {
	if m != nil {
		return m.FastClientPublicKey
	}
	return ""
}

func (m *MsgTransferOwnership) GetNewOwnerAddress() string {
	if m != nil {
		return m.NewOwnerAddress
	}
	return ""
}

// MsgTransferOwnershipResponse is the response type for the
// Msg/TransferOwnership RPC method.
type MsgTransferOwnershipResponse struct {
}

func (m *MsgTransferOwnershipResponse) Reset()         { *m = MsgTransferOwnershipResponse{} }
func (m *MsgTransferOwnershipResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferOwnershipResponse) ProtoMessage()    {}
func (*MsgTransferOwnershipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{5}
}
func (m *MsgTransferOwnershipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferOwnershipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferOwnershipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferOwnershipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferOwnershipResponse.Merge(m, src)
}
func (m *MsgTransferOwnershipResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferOwnershipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferOwnershipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferOwnershipResponse proto.InternalMessageInfo

// Allows the new owner to accept the ownership of the fast client.
type MsgAcceptOwnership struct {
	// the address that is accepting the ownership
	NewOwnerAddress string `protobuf:"bytes,1,opt,name=new_owner_address,json=newOwnerAddress,proto3" json:"new_owner_address,omitempty"`
	// the public key of the fast client as a hex string
	FastClientPublicKey string `protobuf:"bytes,2,opt,name=fast_client_public_key,json=fastClientPublicKey,proto3" json:"fast_client_public_key,omitempty"`
}

func (m *MsgAcceptOwnership) Reset()         { *m = MsgAcceptOwnership{} }
func (m *MsgAcceptOwnership) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptOwnership) ProtoMessage()    {}
func (*MsgAcceptOwnership) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{6}
}
func (m *MsgAcceptOwnership) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptOwnership) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptOwnership.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptOwnership) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptOwnership.Merge(m, src)
}
func (m *MsgAcceptOwnership) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptOwnership) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptOwnership.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptOwnership proto.InternalMessageInfo

func (m *MsgAcceptOwnership) GetNewOwnerAddress() string {
	if m != nil {
		return m.NewOwnerAddress
	}
	return ""
}

func (m *MsgAcceptOwnership) GetFastClientPublicKey() string {
	if m != nil {
		return m.FastClientPublicKey
	}
	return ""
}

// MsgAcceptOwnershipResponse is the response type for the
// Msg/AcceptOwnership RPC method.
type MsgAcceptOwnershipResponse struct {
}

func (m *MsgAcceptOwnershipResponse) Reset()         { *m = MsgAcceptOwnershipResponse{} }
func (m *MsgAcceptOwnershipResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptOwnershipResponse) ProtoMessage()    {}
func (*MsgAcceptOwnershipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{7}
}
func (m *MsgAcceptOwnershipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptOwnershipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptOwnershipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptOwnershipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptOwnershipResponse.Merge(m, src)
}
func (m *MsgAcceptOwnershipResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptOwnershipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptOwnershipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptOwnershipResponse proto.InternalMessageInfo

// Allows the owner to cancel the ownership transfer of the fast client.
type MsgCancelOwnershipTransfer struct {
	// this should match the owner_address in the fast client
	OwnerAddress string `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	// the public key of the fast client as a hex string
	FastClientPublicKey string `protobuf:"bytes,2,opt,name=fast_client_public_key,json=fastClientPublicKey,proto3" json:"fast_client_public_key,omitempty"`
}

func (m *MsgCancelOwnershipTransfer) Reset()         { *m = MsgCancelOwnershipTransfer{} }
func (m *MsgCancelOwnershipTransfer) String() string { return proto.CompactTextString(m) }
func (*MsgCancelOwnershipTransfer) ProtoMessage()    {}
func (*MsgCancelOwnershipTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{8}
}
func (m *MsgCancelOwnershipTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelOwnershipTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelOwnershipTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelOwnershipTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelOwnershipTransfer.Merge(m, src)
}
func (m *MsgCancelOwnershipTransfer) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelOwnershipTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelOwnershipTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelOwnershipTransfer proto.InternalMessageInfo

func (m *MsgCancelOwnershipTransfer) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgCancelOwnershipTransfer) GetFastClientPublicKey() string {
	if m != nil {
		return m.FastClientPublicKey
	}
	return ""
}

// MsgCancelOwnershipTransferResponse is the response type for the
// Msg/CancelOwnershipTransfer RPC method.
type MsgCancelOwnershipTransferResponse struct {
}

func (m *MsgCancelOwnershipTransferResponse) Reset()         { *m = MsgCancelOwnershipTransferResponse{} }
func (m *MsgCancelOwnershipTransferResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelOwnershipTransferResponse) ProtoMessage()    {}
func (*MsgCancelOwnershipTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{9}
}
func (m *MsgCancelOwnershipTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelOwnershipTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelOwnershipTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelOwnershipTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelOwnershipTransferResponse.Merge(m, src)
}
func (m *MsgCancelOwnershipTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelOwnershipTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelOwnershipTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelOwnershipTransferResponse proto.InternalMessageInfo

// Allows the admin to add a user to the fast client.
type MsgAddUser struct {
	// this should match the admin_address in the fast client
	AdminAddress string `protobuf:"bytes,1,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// the public key of the fast client as a hex string
	FastClientPublicKey string `protobuf:"bytes,2,opt,name=fast_client_public_key,json=fastClientPublicKey,proto3" json:"fast_client_public_key,omitempty"`
	// the identifier of the user
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// the amount of credits the user has initially
	InitialCredits cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=initial_credits,json=initialCredits,proto3,customtype=cosmossdk.io/math.Int" json:"initial_credits"`
}

func (m *MsgAddUser) Reset()         { *m = MsgAddUser{} }
func (m *MsgAddUser) String() string { return proto.CompactTextString(m) }
func (*MsgAddUser) ProtoMessage()    {}
func (*MsgAddUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{10}
}
func (m *MsgAddUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddUser.Merge(m, src)
}
func (m *MsgAddUser) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddUser) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddUser.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddUser proto.InternalMessageInfo

func (m *MsgAddUser) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *MsgAddUser) GetFastClientPublicKey() string {
	if m != nil {
		return m.FastClientPublicKey
	}
	return ""
}

func (m *MsgAddUser) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// MsgAddUserResponse is the response type for the Msg/AddUser RPC method.
type MsgAddUserResponse struct {
}

func (m *MsgAddUserResponse) Reset()         { *m = MsgAddUserResponse{} }
func (m *MsgAddUserResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddUserResponse) ProtoMessage()    {}
func (*MsgAddUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{11}
}
func (m *MsgAddUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddUserResponse.Merge(m, src)
}
func (m *MsgAddUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddUserResponse proto.InternalMessageInfo

// Allows the admin to remove a user from the fast client.
type MsgRemoveUser struct {
	// this should match the admin_address in the fast client
	AdminAddress string `protobuf:"bytes,1,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// the public key of the fast client as a hex string
	FastClientPublicKey string `protobuf:"bytes,2,opt,name=fast_client_public_key,json=fastClientPublicKey,proto3" json:"fast_client_public_key,omitempty"`
	// the identifier of the user
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *MsgRemoveUser) Reset()         { *m = MsgRemoveUser{} }
func (m *MsgRemoveUser) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveUser) ProtoMessage()    {}
func (*MsgRemoveUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{12}
}
func (m *MsgRemoveUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveUser.Merge(m, src)
}
func (m *MsgRemoveUser) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveUser) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveUser.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveUser proto.InternalMessageInfo

func (m *MsgRemoveUser) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *MsgRemoveUser) GetFastClientPublicKey() string {
	if m != nil {
		return m.FastClientPublicKey
	}
	return ""
}

func (m *MsgRemoveUser) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// MsgRemoveUserResponse is the response type for the Msg/RemoveUser RPC method.
type MsgRemoveUserResponse struct {
}

func (m *MsgRemoveUserResponse) Reset()         { *m = MsgRemoveUserResponse{} }
func (m *MsgRemoveUserResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveUserResponse) ProtoMessage()    {}
func (*MsgRemoveUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{13}
}
func (m *MsgRemoveUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveUserResponse.Merge(m, src)
}
func (m *MsgRemoveUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveUserResponse proto.InternalMessageInfo

// Allows the admin to top up a user's credits.
type MsgTopUpUser struct {
	// the address that is toping up the user
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// the public key of the fast client as a hex string
	FastClientPublicKey string `protobuf:"bytes,2,opt,name=fast_client_public_key,json=fastClientPublicKey,proto3" json:"fast_client_public_key,omitempty"`
	// the identifier of the user
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// the amount of credits to top up
	Amount cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *MsgTopUpUser) Reset()         { *m = MsgTopUpUser{} }
func (m *MsgTopUpUser) String() string { return proto.CompactTextString(m) }
func (*MsgTopUpUser) ProtoMessage()    {}
func (*MsgTopUpUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{14}
}
func (m *MsgTopUpUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTopUpUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTopUpUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTopUpUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTopUpUser.Merge(m, src)
}
func (m *MsgTopUpUser) XXX_Size() int {
	return m.Size()
}
func (m *MsgTopUpUser) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTopUpUser.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTopUpUser proto.InternalMessageInfo

func (m *MsgTopUpUser) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgTopUpUser) GetFastClientPublicKey() string {
	if m != nil {
		return m.FastClientPublicKey
	}
	return ""
}

func (m *MsgTopUpUser) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// MsgTopUpUserResponse is the response type for the Msg/TopUpUser RPC method.
type MsgTopUpUserResponse struct {
}

func (m *MsgTopUpUserResponse) Reset()         { *m = MsgTopUpUserResponse{} }
func (m *MsgTopUpUserResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTopUpUserResponse) ProtoMessage()    {}
func (*MsgTopUpUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{15}
}
func (m *MsgTopUpUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTopUpUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTopUpUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTopUpUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTopUpUserResponse.Merge(m, src)
}
func (m *MsgTopUpUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTopUpUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTopUpUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTopUpUserResponse proto.InternalMessageInfo

// Allows the admin to settle the credits of the fast client.
type MsgSettleCredits struct {
	// this should match the admin_address in the fast client
	AdminAddress string `protobuf:"bytes,1,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// the public key of the fast client as a hex string
	FastClientPublicKey string `protobuf:"bytes,2,opt,name=fast_client_public_key,json=fastClientPublicKey,proto3" json:"fast_client_public_key,omitempty"`
	// the type of settle
	SettleType SettleType `protobuf:"varint,3,opt,name=settle_type,json=settleType,proto3,enum=sedachain.fast.v1.SettleType" json:"settle_type,omitempty"`
	// the amount of credits to settle
	Amount cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *MsgSettleCredits) Reset()         { *m = MsgSettleCredits{} }
func (m *MsgSettleCredits) String() string { return proto.CompactTextString(m) }
func (*MsgSettleCredits) ProtoMessage()    {}
func (*MsgSettleCredits) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{16}
}
func (m *MsgSettleCredits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSettleCredits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSettleCredits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSettleCredits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSettleCredits.Merge(m, src)
}
func (m *MsgSettleCredits) XXX_Size() int {
	return m.Size()
}
func (m *MsgSettleCredits) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSettleCredits.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSettleCredits proto.InternalMessageInfo

func (m *MsgSettleCredits) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *MsgSettleCredits) GetFastClientPublicKey() string {
	if m != nil {
		return m.FastClientPublicKey
	}
	return ""
}

func (m *MsgSettleCredits) GetSettleType() SettleType {
	if m != nil {
		return m.SettleType
	}
	return SETTLE_TYPE_UNSPECIFIED
}

// MsgSettleCreditsResponse is the response type for the Msg/SettleCredits RPC
// method.
type MsgSettleCreditsResponse struct {
	// The amount of credits that were settled.
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *MsgSettleCreditsResponse) Reset()         { *m = MsgSettleCreditsResponse{} }
func (m *MsgSettleCreditsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSettleCreditsResponse) ProtoMessage()    {}
func (*MsgSettleCreditsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{17}
}
func (m *MsgSettleCreditsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSettleCreditsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSettleCreditsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSettleCreditsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSettleCreditsResponse.Merge(m, src)
}
func (m *MsgSettleCreditsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSettleCreditsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSettleCreditsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSettleCreditsResponse proto.InternalMessageInfo

// Allows the admin to expire the credits of a user.
type MsgExpireUserCredits struct {
	// this should match the admin_address in the fast client
	AdminAddress string `protobuf:"bytes,1,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// the public key of the fast client as a hex string
	FastClientPublicKey string `protobuf:"bytes,2,opt,name=fast_client_public_key,json=fastClientPublicKey,proto3" json:"fast_client_public_key,omitempty"`
	// the identifier of the user
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// the amount of credits to expire
	Amount cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *MsgExpireUserCredits) Reset()         { *m = MsgExpireUserCredits{} }
func (m *MsgExpireUserCredits) String() string { return proto.CompactTextString(m) }
func (*MsgExpireUserCredits) ProtoMessage()    {}
func (*MsgExpireUserCredits) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{18}
}
func (m *MsgExpireUserCredits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExpireUserCredits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExpireUserCredits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExpireUserCredits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExpireUserCredits.Merge(m, src)
}
func (m *MsgExpireUserCredits) XXX_Size() int {
	return m.Size()
}
func (m *MsgExpireUserCredits) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExpireUserCredits.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExpireUserCredits proto.InternalMessageInfo

func (m *MsgExpireUserCredits) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *MsgExpireUserCredits) GetFastClientPublicKey() string {
	if m != nil {
		return m.FastClientPublicKey
	}
	return ""
}

func (m *MsgExpireUserCredits) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// MsgExpireUserCreditsResponse is the response type for the
// Msg/ExpireUserCredits RPC method.
type MsgExpireUserCreditsResponse struct {
}

func (m *MsgExpireUserCreditsResponse) Reset()         { *m = MsgExpireUserCreditsResponse{} }
func (m *MsgExpireUserCreditsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExpireUserCreditsResponse) ProtoMessage()    {}
func (*MsgExpireUserCreditsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{19}
}
func (m *MsgExpireUserCreditsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExpireUserCreditsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExpireUserCreditsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExpireUserCreditsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExpireUserCreditsResponse.Merge(m, src)
}
func (m *MsgExpireUserCreditsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExpireUserCreditsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExpireUserCreditsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExpireUserCreditsResponse proto.InternalMessageInfo

// Allows the fast client to submit user reports to update credits and pay out
// data proxy fees.
type MsgSubmitReports struct {
	// this should match the address in the fast client
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// the public key of the fast client
	FastClientPublicKey []byte `protobuf:"bytes,2,opt,name=fast_client_public_key,json=fastClientPublicKey,proto3" json:"fast_client_public_key,omitempty"`
	// the reports to process
	Reports []*FastUserReport `protobuf:"bytes,3,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (m *MsgSubmitReports) Reset()         { *m = MsgSubmitReports{} }
func (m *MsgSubmitReports) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitReports) ProtoMessage()    {}
func (*MsgSubmitReports) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{20}
}
func (m *MsgSubmitReports) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitReports) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitReports.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitReports) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitReports.Merge(m, src)
}
func (m *MsgSubmitReports) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitReports) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitReports.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitReports proto.InternalMessageInfo

func (m *MsgSubmitReports) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgSubmitReports) GetFastClientPublicKey() []byte {
	if m != nil {
		return m.FastClientPublicKey
	}
	return nil
}

func (m *MsgSubmitReports) GetReports() []*FastUserReport {
	if m != nil {
		return m.Reports
	}
	return nil
}

// MsgSubmitReportsResponse is the response type for the Msg/SubmitReports RPC
// method.
type MsgSubmitReportsResponse struct {
}

func (m *MsgSubmitReportsResponse) Reset()         { *m = MsgSubmitReportsResponse{} }
func (m *MsgSubmitReportsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitReportsResponse) ProtoMessage()    {}
func (*MsgSubmitReportsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{21}
}
func (m *MsgSubmitReportsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitReportsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitReportsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitReportsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitReportsResponse.Merge(m, src)
}
func (m *MsgSubmitReportsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitReportsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitReportsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitReportsResponse proto.InternalMessageInfo

// The request message for the UpdateParams method.
type MsgUpdateParams struct {
	// authority is the address that controls the module.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Params    Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{22}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse is the response type for the Msg/UpdateParams RPC
// method.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f070767c3f6f214f, []int{23}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("sedachain.fast.v1.SettleType", SettleType_name, SettleType_value)
	proto.RegisterType((*MsgRegisterFastClient)(nil), "sedachain.fast.v1.MsgRegisterFastClient")
	proto.RegisterType((*MsgRegisterFastClientResponse)(nil), "sedachain.fast.v1.MsgRegisterFastClientResponse")
	proto.RegisterType((*MsgEditFastClient)(nil), "sedachain.fast.v1.MsgEditFastClient")
	proto.RegisterType((*MsgEditFastClientResponse)(nil), "sedachain.fast.v1.MsgEditFastClientResponse")
	proto.RegisterType((*MsgTransferOwnership)(nil), "sedachain.fast.v1.MsgTransferOwnership")
	proto.RegisterType((*MsgTransferOwnershipResponse)(nil), "sedachain.fast.v1.MsgTransferOwnershipResponse")
	proto.RegisterType((*MsgAcceptOwnership)(nil), "sedachain.fast.v1.MsgAcceptOwnership")
	proto.RegisterType((*MsgAcceptOwnershipResponse)(nil), "sedachain.fast.v1.MsgAcceptOwnershipResponse")
	proto.RegisterType((*MsgCancelOwnershipTransfer)(nil), "sedachain.fast.v1.MsgCancelOwnershipTransfer")
	proto.RegisterType((*MsgCancelOwnershipTransferResponse)(nil), "sedachain.fast.v1.MsgCancelOwnershipTransferResponse")
	proto.RegisterType((*MsgAddUser)(nil), "sedachain.fast.v1.MsgAddUser")
	proto.RegisterType((*MsgAddUserResponse)(nil), "sedachain.fast.v1.MsgAddUserResponse")
	proto.RegisterType((*MsgRemoveUser)(nil), "sedachain.fast.v1.MsgRemoveUser")
	proto.RegisterType((*MsgRemoveUserResponse)(nil), "sedachain.fast.v1.MsgRemoveUserResponse")
	proto.RegisterType((*MsgTopUpUser)(nil), "sedachain.fast.v1.MsgTopUpUser")
	proto.RegisterType((*MsgTopUpUserResponse)(nil), "sedachain.fast.v1.MsgTopUpUserResponse")
	proto.RegisterType((*MsgSettleCredits)(nil), "sedachain.fast.v1.MsgSettleCredits")
	proto.RegisterType((*MsgSettleCreditsResponse)(nil), "sedachain.fast.v1.MsgSettleCreditsResponse")
	proto.RegisterType((*MsgExpireUserCredits)(nil), "sedachain.fast.v1.MsgExpireUserCredits")
	proto.RegisterType((*MsgExpireUserCreditsResponse)(nil), "sedachain.fast.v1.MsgExpireUserCreditsResponse")
	proto.RegisterType((*MsgSubmitReports)(nil), "sedachain.fast.v1.MsgSubmitReports")
	proto.RegisterType((*MsgSubmitReportsResponse)(nil), "sedachain.fast.v1.MsgSubmitReportsResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "sedachain.fast.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "sedachain.fast.v1.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("sedachain/fast/v1/tx.proto", fileDescriptor_f070767c3f6f214f) }

var fileDescriptor_f070767c3f6f214f = []byte{
	// 1348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcd, 0x6f, 0xdc, 0x44,
	0x14, 0x5f, 0x27, 0x69, 0x42, 0x5e, 0xd2, 0x7c, 0x98, 0x6d, 0x77, 0xe3, 0x26, 0x9b, 0x60, 0x5a,
	0x1a, 0x25, 0xcd, 0x6e, 0x9b, 0xaa, 0x54, 0xda, 0x8a, 0x4a, 0x49, 0xba, 0x15, 0x2b, 0xd8, 0x36,
	0x72, 0x36, 0x2a, 0x70, 0xc0, 0x72, 0xd6, 0x53, 0xc7, 0x6a, 0xfc, 0x21, 0xcf, 0x6c, 0xd3, 0x9c,
	0x90, 0xb8, 0x80, 0x38, 0x71, 0xe1, 0x86, 0xc4, 0x81, 0x0b, 0xc7, 0x1c, 0x7a, 0xe6, 0xdc, 0x03,
	0x95, 0xaa, 0x9e, 0x10, 0x87, 0x0a, 0xb5, 0x42, 0xe5, 0x7f, 0xe0, 0x82, 0x66, 0xc6, 0xf6, 0xda,
	0x6b, 0xbb, 0xbb, 0x89, 0x8a, 0xc2, 0x25, 0xf2, 0xcc, 0xfb, 0xcd, 0xfb, 0xf8, 0xbd, 0x97, 0x37,
	0x6f, 0x16, 0x24, 0x8c, 0x74, 0xad, 0xb5, 0xab, 0x99, 0x76, 0xe5, 0xbe, 0x86, 0x49, 0xe5, 0xe1,
	0x95, 0x0a, 0x79, 0x54, 0x76, 0x3d, 0x87, 0x38, 0xe2, 0x74, 0x28, 0x2b, 0x53, 0x59, 0xf9, 0xe1,
	0x15, 0x29, 0x6f, 0x38, 0x86, 0xc3, 0xa4, 0x15, 0xfa, 0xc5, 0x81, 0xd2, 0x4c, 0xcb, 0xc1, 0x96,
	0x83, 0x55, 0x2e, 0xe0, 0x0b, 0x5f, 0x54, 0xe0, 0xab, 0x8a, 0x85, 0x0d, 0xaa, 0xdb, 0xc2, 0x86,
	0x2f, 0x98, 0x4d, 0x1a, 0x66, 0x46, 0xb8, 0x74, 0x5a, 0xb3, 0x4c, 0xdb, 0xa9, 0xb0, 0xbf, 0x7c,
	0x4b, 0xfe, 0x7b, 0x00, 0xce, 0x34, 0xb0, 0xa1, 0x20, 0xc3, 0xc4, 0x04, 0x79, 0xb7, 0x35, 0x4c,
	0x36, 0xf6, 0x4c, 0x64, 0x13, 0xf1, 0x43, 0x18, 0xd5, 0xda, 0x64, 0xd7, 0xf1, 0x4c, 0x72, 0x50,
	0x14, 0x16, 0x84, 0xc5, 0xd1, 0xf5, 0xe2, 0xf3, 0xc7, 0x2b, 0x79, 0xdf, 0x91, 0x35, 0x5d, 0xf7,
	0x10, 0xc6, 0x5b, 0xc4, 0x33, 0x6d, 0x43, 0xe9, 0x40, 0xc5, 0x8f, 0xe0, 0xb4, 0xb3, 0x6f, 0x23,
	0x4f, 0xd5, 0x38, 0xa2, 0x38, 0xd0, 0xe3, 0xec, 0x38, 0x83, 0xfb, 0x7b, 0xe2, 0x1c, 0x80, 0xdb,
	0xde, 0xd9, 0x33, 0x5b, 0xea, 0x03, 0x74, 0x50, 0x1c, 0xa4, 0x67, 0x95, 0x51, 0xbe, 0xf3, 0x09,
	0x62, 0xda, 0x35, 0xdd, 0x32, 0xed, 0x50, 0xfb, 0x50, 0x2f, 0xed, 0x0c, 0x1e, 0x68, 0x5f, 0x85,
	0x91, 0xe0, 0xe0, 0xa9, 0x1e, 0x07, 0x03, 0xa0, 0x28, 0xc2, 0x90, 0x85, 0x2c, 0xa7, 0x38, 0xcc,
	0x7c, 0x61, 0xdf, 0xd5, 0xd5, 0xaf, 0x5f, 0x1f, 0x2e, 0x75, 0x82, 0xfe, 0xee, 0xf5, 0xe1, 0xd2,
	0x3c, 0xa5, 0x9e, 0xb3, 0x9e, 0x4a, 0xa8, 0x3c, 0x0f, 0x73, 0xa9, 0x02, 0x05, 0x61, 0xd7, 0xb1,
	0x31, 0x92, 0x7f, 0x18, 0x84, 0xe9, 0x06, 0x36, 0x6a, 0xba, 0x49, 0x22, 0x79, 0x48, 0xf0, 0x29,
	0x1c, 0x89, 0xcf, 0xab, 0x70, 0x96, 0xfa, 0xa4, 0xb6, 0x98, 0x36, 0x35, 0xc2, 0x2d, 0xcb, 0x8b,
	0xf2, 0xee, 0xfd, 0xd0, 0xd4, 0x66, 0xc8, 0x72, 0x1d, 0xa6, 0x6d, 0xb4, 0xaf, 0xc6, 0x99, 0x66,
	0xb9, 0x58, 0x9f, 0xcb, 0xb2, 0xfb, 0xcb, 0xeb, 0xc3, 0xa5, 0x9c, 0x32, 0x69, 0xa3, 0xfd, 0xb5,
	0x28, 0xe3, 0x37, 0x61, 0x8c, 0xab, 0x8a, 0xa6, 0xab, 0x87, 0x12, 0x60, 0x4a, 0xf8, 0xf9, 0x65,
	0x98, 0xa0, 0xe7, 0x23, 0x7e, 0xf3, 0xc4, 0x9d, 0xa2, 0x50, 0x41, 0x19, 0xb7, 0xd1, 0x7e, 0xc7,
	0xef, 0x05, 0x78, 0x87, 0x82, 0x3b, 0xe9, 0x0a, 0x60, 0x23, 0x36, 0xda, 0x6f, 0x84, 0x89, 0x8b,
	0x13, 0x4a, 0x93, 0x77, 0x2e, 0x96, 0xbc, 0x78, 0x06, 0xe4, 0x73, 0x30, 0x93, 0xd8, 0x0c, 0x93,
	0xf6, 0xcd, 0x00, 0xe4, 0x1b, 0xd8, 0x68, 0x7a, 0x9a, 0x8d, 0xef, 0x23, 0xef, 0x2e, 0xd5, 0x8c,
	0x77, 0x4d, 0xf7, 0x44, 0xf2, 0x76, 0x8b, 0xe7, 0x2d, 0x6e, 0x77, 0xb0, 0x87, 0x5d, 0x9a, 0xb2,
	0xbb, 0x11, 0xd3, 0xd5, 0x6b, 0xe9, 0x1c, 0x95, 0x62, 0x1c, 0x25, 0x02, 0x96, 0x4b, 0x30, 0x9b,
	0xb6, 0x1f, 0x32, 0xf5, 0x44, 0x00, 0xb1, 0x81, 0x8d, 0xb5, 0x56, 0x0b, 0xb9, 0xa4, 0xc3, 0x53,
	0xaa, 0xcf, 0xc2, 0x11, 0x7d, 0x3e, 0x16, 0x5d, 0xd5, 0xeb, 0x34, 0xd0, 0xa4, 0x75, 0x1a, 0xec,
	0x6c, 0x2c, 0xd8, 0x2e, 0x9f, 0xe5, 0x59, 0x90, 0x92, 0xbb, 0x61, 0xa0, 0x4f, 0x05, 0x26, 0xde,
	0xd0, 0xec, 0x16, 0xda, 0x0b, 0xc5, 0x01, 0x31, 0x27, 0x51, 0x18, 0xd5, 0x1b, 0xe9, 0x29, 0x3d,
	0x1f, 0x8b, 0x32, 0xc3, 0x61, 0xf9, 0x3c, 0xc8, 0xd9, 0xd2, 0x30, 0xea, 0x1f, 0x07, 0x00, 0x28,
	0x29, 0xba, 0xbe, 0x8d, 0x79, 0x94, 0xf1, 0xf6, 0x21, 0x1c, 0xa9, 0x51, 0x1f, 0xab, 0xfc, 0x0b,
	0x30, 0xd2, 0xc6, 0xc8, 0x53, 0x4d, 0xdd, 0xbf, 0x38, 0x86, 0xe9, 0xb2, 0xae, 0x8b, 0x4d, 0x98,
	0x34, 0x6d, 0x93, 0x98, 0xda, 0x9e, 0xda, 0xf2, 0x90, 0x6e, 0x92, 0xa0, 0x11, 0x2d, 0x3f, 0x79,
	0x31, 0x9f, 0xfb, 0xe3, 0xc5, 0xfc, 0x19, 0xee, 0x12, 0xd6, 0x1f, 0x94, 0x4d, 0xa7, 0x62, 0x69,
	0x64, 0xb7, 0x5c, 0xb7, 0xc9, 0xf3, 0xc7, 0x2b, 0xe0, 0xfb, 0x5a, 0xb7, 0x89, 0x32, 0xe1, 0xeb,
	0xd8, 0xe0, 0x2a, 0xaa, 0xcb, 0x8c, 0xd4, 0x58, 0x94, 0x94, 0xd4, 0x7c, 0xbc, 0x74, 0x38, 0x1f,
	0x72, 0x9e, 0x17, 0x3f, 0x5f, 0x85, 0xa4, 0xfd, 0x26, 0xc0, 0x69, 0x76, 0x29, 0x58, 0xce, 0x43,
	0xf4, 0xbf, 0xe3, 0xad, 0x5a, 0x4e, 0x8f, 0xb0, 0xd0, 0x75, 0xd5, 0x05, 0xce, 0xcb, 0x05, 0x7f,
	0x98, 0x08, 0x36, 0xc2, 0x38, 0xff, 0x11, 0x60, 0x9c, 0x36, 0x07, 0xc7, 0xdd, 0x76, 0x59, 0x98,
	0x97, 0x61, 0x18, 0x23, 0x5b, 0x47, 0x5e, 0xcf, 0xf8, 0x7c, 0xdc, 0x5b, 0xae, 0x88, 0x0d, 0x18,
	0xd6, 0x2c, 0xa7, 0x6d, 0x93, 0xe3, 0x14, 0x82, 0x7f, 0xb4, 0xfa, 0x01, 0xa5, 0xc7, 0xf7, 0x8f,
	0xf2, 0x72, 0x36, 0xde, 0x21, 0x83, 0x60, 0xe5, 0xb3, 0xfc, 0x8a, 0x08, 0xd6, 0x21, 0x2b, 0xbf,
	0x0e, 0xc0, 0x54, 0x03, 0x1b, 0x5b, 0x88, 0x90, 0x3d, 0xe4, 0x57, 0xd5, 0x89, 0x14, 0xc0, 0x4d,
	0x18, 0xc3, 0xcc, 0x09, 0x95, 0x1c, 0xb8, 0x88, 0x51, 0x35, 0xb1, 0x3a, 0x57, 0x4e, 0x4c, 0xaa,
	0x65, 0xee, 0x6a, 0xf3, 0xc0, 0x45, 0x0a, 0xe0, 0xf0, 0xfb, 0xed, 0xb0, 0x79, 0x25, 0xbd, 0xd8,
	0xa4, 0x18, 0xa9, 0x31, 0xae, 0x64, 0x15, 0x8a, 0xdd, 0x7b, 0x01, 0xb9, 0x11, 0x9f, 0x84, 0x63,
	0xfb, 0x24, 0xff, 0xc4, 0x6f, 0xf7, 0xda, 0x23, 0xd7, 0xf4, 0x58, 0x45, 0x9f, 0x64, 0x96, 0xfe,
	0xdb, 0x62, 0xbe, 0x96, 0x4e, 0x7f, 0xfc, 0xd6, 0x4f, 0x10, 0xe1, 0xdf, 0xfa, 0x89, 0xfd, 0xb0,
	0xc6, 0xff, 0x12, 0x78, 0x8d, 0xb7, 0x77, 0x2c, 0x93, 0x28, 0xc8, 0x75, 0x3c, 0x12, 0x1b, 0xc3,
	0x85, 0x7e, 0xc7, 0xf0, 0x37, 0x53, 0x36, 0x9e, 0x4e, 0xd9, 0x0d, 0x18, 0xf1, 0xb8, 0xcd, 0xe2,
	0xe0, 0xc2, 0xe0, 0xe2, 0xd8, 0xea, 0x7b, 0x29, 0x45, 0x4d, 0xa7, 0x3a, 0xfe, 0x7f, 0x49, 0x91,
	0x4a, 0x70, 0x82, 0xf7, 0xf7, 0x91, 0xec, 0x52, 0x8c, 0x86, 0x24, 0x4b, 0xbc, 0x14, 0xa3, 0x7b,
	0x21, 0x07, 0x87, 0x02, 0x4c, 0x36, 0xb0, 0xb1, 0xed, 0xea, 0x1a, 0x41, 0x9b, 0x9a, 0xa7, 0x59,
	0xf8, 0xd8, 0xcf, 0xab, 0xeb, 0x30, 0xec, 0x32, 0x0d, 0x2c, 0xec, 0xb1, 0xd5, 0x99, 0x94, 0x80,
	0xb8, 0x89, 0xf5, 0x21, 0x5a, 0x06, 0x8a, 0x0f, 0xaf, 0x5e, 0x4a, 0x3e, 0x59, 0x66, 0x62, 0xf1,
	0x44, 0xdd, 0x93, 0x67, 0xa0, 0xd0, 0xb5, 0x15, 0x44, 0xb3, 0xa4, 0x02, 0x74, 0xda, 0x80, 0x78,
	0x0e, 0x0a, 0x5b, 0xb5, 0x66, 0xf3, 0xd3, 0x9a, 0xda, 0xfc, 0x7c, 0xb3, 0xa6, 0x6e, 0xdf, 0xd9,
	0xda, 0xac, 0x6d, 0xd4, 0x6f, 0xd7, 0x6b, 0xb7, 0xa6, 0x72, 0x62, 0x11, 0xf2, 0x51, 0xe1, 0xbd,
	0x7a, 0xf3, 0xe3, 0x5b, 0xca, 0xda, 0xbd, 0x29, 0x41, 0xcc, 0xc3, 0x54, 0x54, 0xb2, 0xbe, 0xad,
	0xdc, 0x99, 0x1a, 0x90, 0x86, 0xbe, 0xfd, 0xb9, 0x94, 0x5b, 0x7d, 0x3a, 0x0a, 0x83, 0x0d, 0x6c,
	0x88, 0x2e, 0x88, 0x29, 0xef, 0xd2, 0xc5, 0x94, 0x80, 0x53, 0xdf, 0x55, 0xd2, 0xe5, 0x7e, 0x91,
	0x61, 0xcf, 0xd0, 0x61, 0xa2, 0xeb, 0xf5, 0x75, 0x3e, 0x5d, 0x47, 0x1c, 0x25, 0x5d, 0xea, 0x07,
	0x15, 0x5a, 0xb1, 0x60, 0x3a, 0xf9, 0x5c, 0xb8, 0x98, 0xae, 0x22, 0x01, 0x94, 0x2a, 0x7d, 0x02,
	0x43, 0x73, 0x06, 0x4c, 0x76, 0xcf, 0xdc, 0x17, 0xd2, 0x75, 0x74, 0xc1, 0xa4, 0x95, 0xbe, 0x60,
	0xa1, 0xa1, 0xaf, 0xa0, 0x90, 0x35, 0xf3, 0x66, 0x68, 0xca, 0x80, 0x4b, 0xd7, 0x8e, 0x04, 0x0f,
	0x1d, 0xb8, 0x0b, 0x23, 0xc1, 0xf8, 0x39, 0x97, 0xe1, 0x3a, 0x17, 0x4b, 0x17, 0xde, 0x28, 0x0e,
	0x15, 0x7e, 0x06, 0x10, 0x19, 0xcd, 0x16, 0xb2, 0xea, 0x29, 0x40, 0x48, 0x8b, 0xbd, 0x10, 0xa1,
	0xe6, 0x6d, 0x18, 0xed, 0x0c, 0x43, 0xf3, 0x19, 0x29, 0x0d, 0x00, 0xd2, 0xc5, 0x1e, 0x80, 0x68,
	0x69, 0x25, 0xef, 0xaa, 0x8c, 0xd3, 0x09, 0x60, 0x56, 0x69, 0x65, 0x36, 0x77, 0x51, 0x83, 0xd3,
	0xf1, 0xe1, 0xe5, 0xfd, 0x74, 0x0d, 0x31, 0x90, 0xb4, 0xdc, 0x07, 0x28, 0x66, 0x22, 0x76, 0x77,
	0x64, 0x99, 0x88, 0x82, 0x32, 0x4d, 0xa4, 0xb5, 0x67, 0xf1, 0x4b, 0x18, 0x8f, 0xb5, 0x66, 0x39,
	0xfd, 0x70, 0x14, 0x23, 0x2d, 0xf5, 0xc6, 0x04, 0xfa, 0xd7, 0xeb, 0x4f, 0x5e, 0x96, 0x84, 0x67,
	0x2f, 0x4b, 0xc2, 0x9f, 0x2f, 0x4b, 0xc2, 0xf7, 0xaf, 0x4a, 0xb9, 0x67, 0xaf, 0x4a, 0xb9, 0xdf,
	0x5f, 0x95, 0x72, 0x5f, 0x54, 0x0c, 0x93, 0xec, 0xb6, 0x77, 0xca, 0x2d, 0xc7, 0xaa, 0x50, 0x7d,
	0xec, 0x37, 0xb9, 0x96, 0xb3, 0xc7, 0x16, 0x2b, 0xfc, 0x77, 0xbc, 0x47, 0xbc, 0x41, 0xd3, 0xc1,
	0x0c, 0xef, 0x0c, 0x33, 0xc4, 0xd5, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x15, 0xb0, 0xf0,
	0x61, 0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Registers a new fast client entry in the registry.
	RegisterFastClient(ctx context.Context, in *MsgRegisterFastClient, opts ...grpc.CallOption) (*MsgRegisterFastClientResponse, error)
	// Edits an existing fast client.
	EditFastClient(ctx context.Context, in *MsgEditFastClient, opts ...grpc.CallOption) (*MsgEditFastClientResponse, error)
	// Transfers the ownership of a fast client.
	TransferOwnership(ctx context.Context, in *MsgTransferOwnership, opts ...grpc.CallOption) (*MsgTransferOwnershipResponse, error)
	// Accepts the ownership of a fast client.
	AcceptOwnership(ctx context.Context, in *MsgAcceptOwnership, opts ...grpc.CallOption) (*MsgAcceptOwnershipResponse, error)
	// Cancels the ownership transfer of a fast client.
	CancelOwnershipTransfer(ctx context.Context, in *MsgCancelOwnershipTransfer, opts ...grpc.CallOption) (*MsgCancelOwnershipTransferResponse, error)
	// Adds a user to a fast client.
	AddUser(ctx context.Context, in *MsgAddUser, opts ...grpc.CallOption) (*MsgAddUserResponse, error)
	// Removes a user from a fast client.
	RemoveUser(ctx context.Context, in *MsgRemoveUser, opts ...grpc.CallOption) (*MsgRemoveUserResponse, error)
	// Top up a user's credits.
	TopUpUser(ctx context.Context, in *MsgTopUpUser, opts ...grpc.CallOption) (*MsgTopUpUserResponse, error)
	// Expire a user's credits.
	ExpireUserCredits(ctx context.Context, in *MsgExpireUserCredits, opts ...grpc.CallOption) (*MsgExpireUserCreditsResponse, error)
	// Settle a fast client's credits.
	SettleCredits(ctx context.Context, in *MsgSettleCredits, opts ...grpc.CallOption) (*MsgSettleCreditsResponse, error)
	// Submits reports for a fast client.
	SubmitReports(ctx context.Context, in *MsgSubmitReports, opts ...grpc.CallOption) (*MsgSubmitReportsResponse, error)
	// Used to update the modules parameters through the authority.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterFastClient(ctx context.Context, in *MsgRegisterFastClient, opts ...grpc.CallOption) (*MsgRegisterFastClientResponse, error) {
	out := new(MsgRegisterFastClientResponse)
	err := c.cc.Invoke(ctx, "/sedachain.fast.v1.Msg/RegisterFastClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditFastClient(ctx context.Context, in *MsgEditFastClient, opts ...grpc.CallOption) (*MsgEditFastClientResponse, error) {
	out := new(MsgEditFastClientResponse)
	err := c.cc.Invoke(ctx, "/sedachain.fast.v1.Msg/EditFastClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferOwnership(ctx context.Context, in *MsgTransferOwnership, opts ...grpc.CallOption) (*MsgTransferOwnershipResponse, error) {
	out := new(MsgTransferOwnershipResponse)
	err := c.cc.Invoke(ctx, "/sedachain.fast.v1.Msg/TransferOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AcceptOwnership(ctx context.Context, in *MsgAcceptOwnership, opts ...grpc.CallOption) (*MsgAcceptOwnershipResponse, error) {
	out := new(MsgAcceptOwnershipResponse)
	err := c.cc.Invoke(ctx, "/sedachain.fast.v1.Msg/AcceptOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelOwnershipTransfer(ctx context.Context, in *MsgCancelOwnershipTransfer, opts ...grpc.CallOption) (*MsgCancelOwnershipTransferResponse, error) {
	out := new(MsgCancelOwnershipTransferResponse)
	err := c.cc.Invoke(ctx, "/sedachain.fast.v1.Msg/CancelOwnershipTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddUser(ctx context.Context, in *MsgAddUser, opts ...grpc.CallOption) (*MsgAddUserResponse, error) {
	out := new(MsgAddUserResponse)
	err := c.cc.Invoke(ctx, "/sedachain.fast.v1.Msg/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveUser(ctx context.Context, in *MsgRemoveUser, opts ...grpc.CallOption) (*MsgRemoveUserResponse, error) {
	out := new(MsgRemoveUserResponse)
	err := c.cc.Invoke(ctx, "/sedachain.fast.v1.Msg/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TopUpUser(ctx context.Context, in *MsgTopUpUser, opts ...grpc.CallOption) (*MsgTopUpUserResponse, error) {
	out := new(MsgTopUpUserResponse)
	err := c.cc.Invoke(ctx, "/sedachain.fast.v1.Msg/TopUpUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExpireUserCredits(ctx context.Context, in *MsgExpireUserCredits, opts ...grpc.CallOption) (*MsgExpireUserCreditsResponse, error) {
	out := new(MsgExpireUserCreditsResponse)
	err := c.cc.Invoke(ctx, "/sedachain.fast.v1.Msg/ExpireUserCredits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SettleCredits(ctx context.Context, in *MsgSettleCredits, opts ...grpc.CallOption) (*MsgSettleCreditsResponse, error) {
	out := new(MsgSettleCreditsResponse)
	err := c.cc.Invoke(ctx, "/sedachain.fast.v1.Msg/SettleCredits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitReports(ctx context.Context, in *MsgSubmitReports, opts ...grpc.CallOption) (*MsgSubmitReportsResponse, error) {
	out := new(MsgSubmitReportsResponse)
	err := c.cc.Invoke(ctx, "/sedachain.fast.v1.Msg/SubmitReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/sedachain.fast.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Registers a new fast client entry in the registry.
	RegisterFastClient(context.Context, *MsgRegisterFastClient) (*MsgRegisterFastClientResponse, error)
	// Edits an existing fast client.
	EditFastClient(context.Context, *MsgEditFastClient) (*MsgEditFastClientResponse, error)
	// Transfers the ownership of a fast client.
	TransferOwnership(context.Context, *MsgTransferOwnership) (*MsgTransferOwnershipResponse, error)
	// Accepts the ownership of a fast client.
	AcceptOwnership(context.Context, *MsgAcceptOwnership) (*MsgAcceptOwnershipResponse, error)
	// Cancels the ownership transfer of a fast client.
	CancelOwnershipTransfer(context.Context, *MsgCancelOwnershipTransfer) (*MsgCancelOwnershipTransferResponse, error)
	// Adds a user to a fast client.
	AddUser(context.Context, *MsgAddUser) (*MsgAddUserResponse, error)
	// Removes a user from a fast client.
	RemoveUser(context.Context, *MsgRemoveUser) (*MsgRemoveUserResponse, error)
	// Top up a user's credits.
	TopUpUser(context.Context, *MsgTopUpUser) (*MsgTopUpUserResponse, error)
	// Expire a user's credits.
	ExpireUserCredits(context.Context, *MsgExpireUserCredits) (*MsgExpireUserCreditsResponse, error)
	// Settle a fast client's credits.
	SettleCredits(context.Context, *MsgSettleCredits) (*MsgSettleCreditsResponse, error)
	// Submits reports for a fast client.
	SubmitReports(context.Context, *MsgSubmitReports) (*MsgSubmitReportsResponse, error)
	// Used to update the modules parameters through the authority.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterFastClient(ctx context.Context, req *MsgRegisterFastClient) (*MsgRegisterFastClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFastClient not implemented")
}
func (*UnimplementedMsgServer) EditFastClient(ctx context.Context, req *MsgEditFastClient) (*MsgEditFastClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditFastClient not implemented")
}
func (*UnimplementedMsgServer) TransferOwnership(ctx context.Context, req *MsgTransferOwnership) (*MsgTransferOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwnership not implemented")
}
func (*UnimplementedMsgServer) AcceptOwnership(ctx context.Context, req *MsgAcceptOwnership) (*MsgAcceptOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOwnership not implemented")
}
func (*UnimplementedMsgServer) CancelOwnershipTransfer(ctx context.Context, req *MsgCancelOwnershipTransfer) (*MsgCancelOwnershipTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOwnershipTransfer not implemented")
}
func (*UnimplementedMsgServer) AddUser(ctx context.Context, req *MsgAddUser) (*MsgAddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (*UnimplementedMsgServer) RemoveUser(ctx context.Context, req *MsgRemoveUser) (*MsgRemoveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (*UnimplementedMsgServer) TopUpUser(ctx context.Context, req *MsgTopUpUser) (*MsgTopUpUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopUpUser not implemented")
}
func (*UnimplementedMsgServer) ExpireUserCredits(ctx context.Context, req *MsgExpireUserCredits) (*MsgExpireUserCreditsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpireUserCredits not implemented")
}
func (*UnimplementedMsgServer) SettleCredits(ctx context.Context, req *MsgSettleCredits) (*MsgSettleCreditsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettleCredits not implemented")
}
func (*UnimplementedMsgServer) SubmitReports(ctx context.Context, req *MsgSubmitReports) (*MsgSubmitReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitReports not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterFastClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterFastClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterFastClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.fast.v1.Msg/RegisterFastClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterFastClient(ctx, req.(*MsgRegisterFastClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditFastClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEditFastClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditFastClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.fast.v1.Msg/EditFastClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditFastClient(ctx, req.(*MsgEditFastClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferOwnership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.fast.v1.Msg/TransferOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferOwnership(ctx, req.(*MsgTransferOwnership))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AcceptOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAcceptOwnership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AcceptOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.fast.v1.Msg/AcceptOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AcceptOwnership(ctx, req.(*MsgAcceptOwnership))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelOwnershipTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelOwnershipTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelOwnershipTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.fast.v1.Msg/CancelOwnershipTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelOwnershipTransfer(ctx, req.(*MsgCancelOwnershipTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.fast.v1.Msg/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddUser(ctx, req.(*MsgAddUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.fast.v1.Msg/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveUser(ctx, req.(*MsgRemoveUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TopUpUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTopUpUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TopUpUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.fast.v1.Msg/TopUpUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TopUpUser(ctx, req.(*MsgTopUpUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExpireUserCredits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExpireUserCredits)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExpireUserCredits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.fast.v1.Msg/ExpireUserCredits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExpireUserCredits(ctx, req.(*MsgExpireUserCredits))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SettleCredits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSettleCredits)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SettleCredits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.fast.v1.Msg/SettleCredits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SettleCredits(ctx, req.(*MsgSettleCredits))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitReports)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.fast.v1.Msg/SubmitReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitReports(ctx, req.(*MsgSubmitReports))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.fast.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sedachain.fast.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterFastClient",
			Handler:    _Msg_RegisterFastClient_Handler,
		},
		{
			MethodName: "EditFastClient",
			Handler:    _Msg_EditFastClient_Handler,
		},
		{
			MethodName: "TransferOwnership",
			Handler:    _Msg_TransferOwnership_Handler,
		},
		{
			MethodName: "AcceptOwnership",
			Handler:    _Msg_AcceptOwnership_Handler,
		},
		{
			MethodName: "CancelOwnershipTransfer",
			Handler:    _Msg_CancelOwnershipTransfer_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Msg_AddUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _Msg_RemoveUser_Handler,
		},
		{
			MethodName: "TopUpUser",
			Handler:    _Msg_TopUpUser_Handler,
		},
		{
			MethodName: "ExpireUserCredits",
			Handler:    _Msg_ExpireUserCredits_Handler,
		},
		{
			MethodName: "SettleCredits",
			Handler:    _Msg_SettleCredits_Handler,
		},
		{
			MethodName: "SubmitReports",
			Handler:    _Msg_SubmitReports_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sedachain/fast/v1/tx.proto",
}

func (m *MsgRegisterFastClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterFastClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterFastClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterFastClientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterFastClientResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterFastClientResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgEditFastClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditFastClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditFastClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewMemo) > 0 {
		i -= len(m.NewMemo)
		copy(dAtA[i:], m.NewMemo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewMemo)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NewPublicKey) > 0 {
		i -= len(m.NewPublicKey)
		copy(dAtA[i:], m.NewPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewPublicKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NewAddress) > 0 {
		i -= len(m.NewAddress)
		copy(dAtA[i:], m.NewAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NewAdminAddress) > 0 {
		i -= len(m.NewAdminAddress)
		copy(dAtA[i:], m.NewAdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewAdminAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FastClientPublicKey) > 0 {
		i -= len(m.FastClientPublicKey)
		copy(dAtA[i:], m.FastClientPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FastClientPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditFastClientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditFastClientResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditFastClientResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransferOwnership) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferOwnership) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferOwnership) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewOwnerAddress) > 0 {
		i -= len(m.NewOwnerAddress)
		copy(dAtA[i:], m.NewOwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewOwnerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FastClientPublicKey) > 0 {
		i -= len(m.FastClientPublicKey)
		copy(dAtA[i:], m.FastClientPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FastClientPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferOwnershipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferOwnershipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferOwnershipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAcceptOwnership) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptOwnership) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptOwnership) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FastClientPublicKey) > 0 {
		i -= len(m.FastClientPublicKey)
		copy(dAtA[i:], m.FastClientPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FastClientPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NewOwnerAddress) > 0 {
		i -= len(m.NewOwnerAddress)
		copy(dAtA[i:], m.NewOwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewOwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAcceptOwnershipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptOwnershipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptOwnershipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelOwnershipTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelOwnershipTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelOwnershipTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FastClientPublicKey) > 0 {
		i -= len(m.FastClientPublicKey)
		copy(dAtA[i:], m.FastClientPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FastClientPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelOwnershipTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelOwnershipTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelOwnershipTransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.InitialCredits.Size()
		i -= size
		if _, err := m.InitialCredits.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FastClientPublicKey) > 0 {
		i -= len(m.FastClientPublicKey)
		copy(dAtA[i:], m.FastClientPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FastClientPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FastClientPublicKey) > 0 {
		i -= len(m.FastClientPublicKey)
		copy(dAtA[i:], m.FastClientPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FastClientPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTopUpUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTopUpUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTopUpUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FastClientPublicKey) > 0 {
		i -= len(m.FastClientPublicKey)
		copy(dAtA[i:], m.FastClientPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FastClientPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTopUpUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTopUpUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTopUpUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSettleCredits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSettleCredits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSettleCredits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.SettleType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SettleType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FastClientPublicKey) > 0 {
		i -= len(m.FastClientPublicKey)
		copy(dAtA[i:], m.FastClientPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FastClientPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSettleCreditsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSettleCreditsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSettleCreditsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgExpireUserCredits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExpireUserCredits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExpireUserCredits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FastClientPublicKey) > 0 {
		i -= len(m.FastClientPublicKey)
		copy(dAtA[i:], m.FastClientPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FastClientPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExpireUserCreditsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExpireUserCreditsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExpireUserCreditsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitReports) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitReports) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitReports) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reports) > 0 {
		for iNdEx := len(m.Reports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.FastClientPublicKey) > 0 {
		i -= len(m.FastClientPublicKey)
		copy(dAtA[i:], m.FastClientPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FastClientPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitReportsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitReportsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitReportsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterFastClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterFastClientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgEditFastClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FastClientPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewAdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewMemo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEditFastClientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransferOwnership) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FastClientPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewOwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTransferOwnershipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAcceptOwnership) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NewOwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FastClientPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAcceptOwnershipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelOwnershipTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FastClientPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelOwnershipTransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FastClientPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.InitialCredits.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAddUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FastClientPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTopUpUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FastClientPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgTopUpUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSettleCredits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FastClientPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SettleType != 0 {
		n += 1 + sovTx(uint64(m.SettleType))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSettleCreditsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgExpireUserCredits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FastClientPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgExpireUserCreditsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitReports) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FastClientPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Reports) > 0 {
		for _, e := range m.Reports {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSubmitReportsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterFastClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterFastClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterFastClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterFastClientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterFastClientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterFastClientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditFastClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditFastClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditFastClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastClientPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FastClientPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewAdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMemo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewMemo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditFastClientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditFastClientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditFastClientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferOwnership) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferOwnership: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferOwnership: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastClientPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FastClientPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferOwnershipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferOwnershipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferOwnershipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptOwnership) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptOwnership: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptOwnership: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastClientPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FastClientPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptOwnershipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptOwnershipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptOwnershipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelOwnershipTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelOwnershipTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelOwnershipTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastClientPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FastClientPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelOwnershipTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelOwnershipTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelOwnershipTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastClientPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FastClientPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialCredits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialCredits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastClientPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FastClientPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTopUpUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTopUpUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTopUpUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastClientPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FastClientPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTopUpUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTopUpUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTopUpUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSettleCredits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSettleCredits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSettleCredits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastClientPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FastClientPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettleType", wireType)
			}
			m.SettleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettleType |= SettleType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSettleCreditsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSettleCreditsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSettleCreditsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExpireUserCredits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExpireUserCredits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExpireUserCredits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastClientPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FastClientPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExpireUserCreditsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExpireUserCreditsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExpireUserCreditsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitReports) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitReports: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitReports: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastClientPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FastClientPublicKey = append(m.FastClientPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.FastClientPublicKey == nil {
				m.FastClientPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reports = append(m.Reports, &FastUserReport{})
			if err := m.Reports[len(m.Reports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitReportsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitReportsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitReportsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
