// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sedachain/fast/v1/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The request message for QueryFastClient RPC method.
type QueryFastClientRequest struct {
	// A hex encoded string of the public key of the fast client.
	FastClientPubKey string `protobuf:"bytes,1,opt,name=fast_client_pub_key,json=fastClientPubKey,proto3" json:"fast_client_pub_key,omitempty"`
}

func (m *QueryFastClientRequest) Reset()         { *m = QueryFastClientRequest{} }
func (m *QueryFastClientRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFastClientRequest) ProtoMessage()    {}
func (*QueryFastClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_70c737c37ee2fb41, []int{0}
}
func (m *QueryFastClientRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFastClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFastClientRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFastClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFastClientRequest.Merge(m, src)
}
func (m *QueryFastClientRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFastClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFastClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFastClientRequest proto.InternalMessageInfo

func (m *QueryFastClientRequest) GetFastClientPubKey() string {
	if m != nil {
		return m.FastClientPubKey
	}
	return ""
}

// The response message for QueryFastClient RPC method.
type QueryFastClientResponse struct {
	Client FastClient `protobuf:"bytes,1,opt,name=client,proto3" json:"client"`
}

func (m *QueryFastClientResponse) Reset()         { *m = QueryFastClientResponse{} }
func (m *QueryFastClientResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFastClientResponse) ProtoMessage()    {}
func (*QueryFastClientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_70c737c37ee2fb41, []int{1}
}
func (m *QueryFastClientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFastClientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFastClientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFastClientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFastClientResponse.Merge(m, src)
}
func (m *QueryFastClientResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFastClientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFastClientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFastClientResponse proto.InternalMessageInfo

func (m *QueryFastClientResponse) GetClient() FastClient {
	if m != nil {
		return m.Client
	}
	return FastClient{}
}

// The request message for QueryFastClientTransfer RPC method.
type QueryFastClientTransferRequest struct {
	// A hex encoded string of the public key of the fast client.
	FastClientPubKey string `protobuf:"bytes,1,opt,name=fast_client_pub_key,json=fastClientPubKey,proto3" json:"fast_client_pub_key,omitempty"`
}

func (m *QueryFastClientTransferRequest) Reset()         { *m = QueryFastClientTransferRequest{} }
func (m *QueryFastClientTransferRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFastClientTransferRequest) ProtoMessage()    {}
func (*QueryFastClientTransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_70c737c37ee2fb41, []int{2}
}
func (m *QueryFastClientTransferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFastClientTransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFastClientTransferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFastClientTransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFastClientTransferRequest.Merge(m, src)
}
func (m *QueryFastClientTransferRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFastClientTransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFastClientTransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFastClientTransferRequest proto.InternalMessageInfo

func (m *QueryFastClientTransferRequest) GetFastClientPubKey() string {
	if m != nil {
		return m.FastClientPubKey
	}
	return ""
}

// The response message for QueryFastClientTransfer RPC method.
type QueryFastClientTransferResponse struct {
	NewOwnerAddress string `protobuf:"bytes,1,opt,name=new_owner_address,json=newOwnerAddress,proto3" json:"new_owner_address,omitempty"`
}

func (m *QueryFastClientTransferResponse) Reset()         { *m = QueryFastClientTransferResponse{} }
func (m *QueryFastClientTransferResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFastClientTransferResponse) ProtoMessage()    {}
func (*QueryFastClientTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_70c737c37ee2fb41, []int{3}
}
func (m *QueryFastClientTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFastClientTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFastClientTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFastClientTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFastClientTransferResponse.Merge(m, src)
}
func (m *QueryFastClientTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFastClientTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFastClientTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFastClientTransferResponse proto.InternalMessageInfo

func (m *QueryFastClientTransferResponse) GetNewOwnerAddress() string {
	if m != nil {
		return m.NewOwnerAddress
	}
	return ""
}

// The request message for QueryFastClientUsers RPC method.
type QueryFastClientUsersRequest struct {
	// A hex encoded string of the public key of the fast client.
	FastClientPubKey string `protobuf:"bytes,1,opt,name=fast_client_pub_key,json=fastClientPubKey,proto3" json:"fast_client_pub_key,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFastClientUsersRequest) Reset()         { *m = QueryFastClientUsersRequest{} }
func (m *QueryFastClientUsersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFastClientUsersRequest) ProtoMessage()    {}
func (*QueryFastClientUsersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_70c737c37ee2fb41, []int{4}
}
func (m *QueryFastClientUsersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFastClientUsersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFastClientUsersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFastClientUsersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFastClientUsersRequest.Merge(m, src)
}
func (m *QueryFastClientUsersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFastClientUsersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFastClientUsersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFastClientUsersRequest proto.InternalMessageInfo

func (m *QueryFastClientUsersRequest) GetFastClientPubKey() string {
	if m != nil {
		return m.FastClientPubKey
	}
	return ""
}

func (m *QueryFastClientUsersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// The response message for QueryFastClientUsers RPC method.
type QueryFastClientUsersResponse struct {
	// users are the users of the fast client of the given fast_client_pub_key.
	Users []FastUser `protobuf:"bytes,1,rep,name=users,proto3" json:"users"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFastClientUsersResponse) Reset()         { *m = QueryFastClientUsersResponse{} }
func (m *QueryFastClientUsersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFastClientUsersResponse) ProtoMessage()    {}
func (*QueryFastClientUsersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_70c737c37ee2fb41, []int{5}
}
func (m *QueryFastClientUsersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFastClientUsersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFastClientUsersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFastClientUsersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFastClientUsersResponse.Merge(m, src)
}
func (m *QueryFastClientUsersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFastClientUsersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFastClientUsersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFastClientUsersResponse proto.InternalMessageInfo

func (m *QueryFastClientUsersResponse) GetUsers() []FastUser {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *QueryFastClientUsersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// The request message for QueryFastClientUser RPC method.
type QueryFastClientUserRequest struct {
	// A hex encoded string of the public key of the fast client.
	FastClientPubKey string `protobuf:"bytes,1,opt,name=fast_client_pub_key,json=fastClientPubKey,proto3" json:"fast_client_pub_key,omitempty"`
	// the unique id of the user.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *QueryFastClientUserRequest) Reset()         { *m = QueryFastClientUserRequest{} }
func (m *QueryFastClientUserRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFastClientUserRequest) ProtoMessage()    {}
func (*QueryFastClientUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_70c737c37ee2fb41, []int{6}
}
func (m *QueryFastClientUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFastClientUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFastClientUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFastClientUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFastClientUserRequest.Merge(m, src)
}
func (m *QueryFastClientUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFastClientUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFastClientUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFastClientUserRequest proto.InternalMessageInfo

func (m *QueryFastClientUserRequest) GetFastClientPubKey() string {
	if m != nil {
		return m.FastClientPubKey
	}
	return ""
}

func (m *QueryFastClientUserRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// The response message for QueryFastClientUser RPC method.
type QueryFastClientUserResponse struct {
	User FastUser `protobuf:"bytes,1,opt,name=user,proto3" json:"user"`
}

func (m *QueryFastClientUserResponse) Reset()         { *m = QueryFastClientUserResponse{} }
func (m *QueryFastClientUserResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFastClientUserResponse) ProtoMessage()    {}
func (*QueryFastClientUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_70c737c37ee2fb41, []int{7}
}
func (m *QueryFastClientUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFastClientUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFastClientUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFastClientUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFastClientUserResponse.Merge(m, src)
}
func (m *QueryFastClientUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFastClientUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFastClientUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFastClientUserResponse proto.InternalMessageInfo

func (m *QueryFastClientUserResponse) GetUser() FastUser {
	if m != nil {
		return m.User
	}
	return FastUser{}
}

// The request message for QueryFastClientEligibility RPC method.
type QueryFastClientEligibilityRequest struct {
	// A base64 encoded string of the payload of the fast client.
	// Should be in the following format:
	// "{blockNumber}:{userId}:{signature(blocknumber_be_uint64,
	// keccak256(userId_utf8_bytes), chainId_utf8_bytes)_hex_string}"
	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *QueryFastClientEligibilityRequest) Reset()         { *m = QueryFastClientEligibilityRequest{} }
func (m *QueryFastClientEligibilityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFastClientEligibilityRequest) ProtoMessage()    {}
func (*QueryFastClientEligibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_70c737c37ee2fb41, []int{8}
}
func (m *QueryFastClientEligibilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFastClientEligibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFastClientEligibilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFastClientEligibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFastClientEligibilityRequest.Merge(m, src)
}
func (m *QueryFastClientEligibilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFastClientEligibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFastClientEligibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFastClientEligibilityRequest proto.InternalMessageInfo

func (m *QueryFastClientEligibilityRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

// The response message for QueryFastClientEligibility RPC method.
type QueryFastClientEligibilityResponse struct {
	Eligible    bool                  `protobuf:"varint,1,opt,name=eligible,proto3" json:"eligible,omitempty"`
	UserCredits cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=user_credits,json=userCredits,proto3,customtype=cosmossdk.io/math.Int" json:"user_credits"`
	BlockHeight uint64                `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryFastClientEligibilityResponse) Reset()         { *m = QueryFastClientEligibilityResponse{} }
func (m *QueryFastClientEligibilityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFastClientEligibilityResponse) ProtoMessage()    {}
func (*QueryFastClientEligibilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_70c737c37ee2fb41, []int{9}
}
func (m *QueryFastClientEligibilityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFastClientEligibilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFastClientEligibilityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFastClientEligibilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFastClientEligibilityResponse.Merge(m, src)
}
func (m *QueryFastClientEligibilityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFastClientEligibilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFastClientEligibilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFastClientEligibilityResponse proto.InternalMessageInfo

func (m *QueryFastClientEligibilityResponse) GetEligible() bool {
	if m != nil {
		return m.Eligible
	}
	return false
}

func (m *QueryFastClientEligibilityResponse) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// The request message for QueryParams RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_70c737c37ee2fb41, []int{10}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// The response message for QueryParams RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_70c737c37ee2fb41, []int{11}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryFastClientRequest)(nil), "sedachain.fast.v1.QueryFastClientRequest")
	proto.RegisterType((*QueryFastClientResponse)(nil), "sedachain.fast.v1.QueryFastClientResponse")
	proto.RegisterType((*QueryFastClientTransferRequest)(nil), "sedachain.fast.v1.QueryFastClientTransferRequest")
	proto.RegisterType((*QueryFastClientTransferResponse)(nil), "sedachain.fast.v1.QueryFastClientTransferResponse")
	proto.RegisterType((*QueryFastClientUsersRequest)(nil), "sedachain.fast.v1.QueryFastClientUsersRequest")
	proto.RegisterType((*QueryFastClientUsersResponse)(nil), "sedachain.fast.v1.QueryFastClientUsersResponse")
	proto.RegisterType((*QueryFastClientUserRequest)(nil), "sedachain.fast.v1.QueryFastClientUserRequest")
	proto.RegisterType((*QueryFastClientUserResponse)(nil), "sedachain.fast.v1.QueryFastClientUserResponse")
	proto.RegisterType((*QueryFastClientEligibilityRequest)(nil), "sedachain.fast.v1.QueryFastClientEligibilityRequest")
	proto.RegisterType((*QueryFastClientEligibilityResponse)(nil), "sedachain.fast.v1.QueryFastClientEligibilityResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "sedachain.fast.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "sedachain.fast.v1.QueryParamsResponse")
}

func init() { proto.RegisterFile("sedachain/fast/v1/query.proto", fileDescriptor_70c737c37ee2fb41) }

var fileDescriptor_70c737c37ee2fb41 = []byte{
	// 868 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0xb3, 0x6d, 0xea, 0xb4, 0x2f, 0x15, 0xa5, 0xd3, 0x96, 0x38, 0xdb, 0xd4, 0x49, 0x57,
	0x50, 0x42, 0x90, 0x77, 0xe4, 0x94, 0xa8, 0x87, 0xaa, 0x42, 0xa4, 0x6a, 0x4b, 0x84, 0x68, 0xc3,
	0xaa, 0x70, 0xe0, 0xb2, 0x9a, 0xdd, 0x9d, 0xac, 0x57, 0x5e, 0xef, 0x6c, 0x77, 0xc6, 0x49, 0xad,
	0xaa, 0x17, 0x3e, 0x01, 0x12, 0x9c, 0x38, 0xf1, 0x0d, 0x40, 0xa2, 0xe2, 0x33, 0xf4, 0x58, 0xc1,
	0x05, 0x71, 0x88, 0x50, 0xc2, 0x37, 0xe0, 0x0b, 0xa0, 0x9d, 0x19, 0x3b, 0xb6, 0x77, 0x5d, 0x3b,
	0xbe, 0x79, 0xdf, 0xfc, 0xdf, 0x7f, 0x7e, 0xf3, 0xe6, 0xcd, 0x93, 0xe1, 0x06, 0xa7, 0x01, 0xf1,
	0x9b, 0x24, 0x4a, 0xf0, 0x1e, 0xe1, 0x02, 0xef, 0x37, 0xf0, 0xb3, 0x0e, 0xcd, 0xba, 0x76, 0x9a,
	0x31, 0xc1, 0xd0, 0xe5, 0xfe, 0xb2, 0x9d, 0x2f, 0xdb, 0xfb, 0x0d, 0x73, 0x25, 0x64, 0x2c, 0x8c,
	0x29, 0x26, 0x69, 0x84, 0x49, 0x92, 0x30, 0x41, 0x44, 0xc4, 0x12, 0xae, 0x12, 0xcc, 0xab, 0x21,
	0x0b, 0x99, 0xfc, 0x89, 0xf3, 0x5f, 0x3a, 0xba, 0xe1, 0x33, 0xde, 0x66, 0x1c, 0x7b, 0x84, 0x53,
	0xe5, 0x8f, 0xf7, 0x1b, 0x1e, 0x15, 0xa4, 0x81, 0x53, 0x12, 0x46, 0x89, 0xb4, 0xd0, 0xda, 0x65,
	0xa5, 0x75, 0x95, 0x89, 0xfa, 0xd0, 0x4b, 0x2b, 0x45, 0x58, 0x49, 0x25, 0x57, 0xad, 0x47, 0xf0,
	0xde, 0x57, 0xb9, 0xf5, 0x43, 0xc2, 0xc5, 0xfd, 0x38, 0xa2, 0x89, 0x70, 0xe8, 0xb3, 0x0e, 0xe5,
	0x02, 0xd5, 0xe1, 0x4a, 0xae, 0x73, 0x7d, 0x19, 0x75, 0xd3, 0x8e, 0xe7, 0xb6, 0x68, 0xb7, 0x6a,
	0xac, 0x19, 0xeb, 0x17, 0x9c, 0x77, 0xf7, 0xfa, 0xfa, 0xdd, 0x8e, 0xf7, 0x05, 0xed, 0x5a, 0xdf,
	0xc0, 0x52, 0xc1, 0x88, 0xa7, 0x2c, 0xe1, 0x14, 0xdd, 0x85, 0x8a, 0x32, 0x91, 0xc9, 0x8b, 0x9b,
	0x37, 0xec, 0x42, 0x81, 0xec, 0x93, 0xb4, 0xed, 0xf9, 0xd7, 0x87, 0xab, 0x73, 0x8e, 0x4e, 0xb1,
	0x9e, 0x40, 0x6d, 0xc4, 0xf7, 0x69, 0x46, 0x12, 0xbe, 0x47, 0xb3, 0x19, 0x41, 0xbf, 0x84, 0xd5,
	0xb1, 0x86, 0x1a, 0x78, 0x03, 0x2e, 0x27, 0xf4, 0xc0, 0x65, 0x07, 0x09, 0xcd, 0x5c, 0x12, 0x04,
	0x19, 0xe5, 0x5c, 0xfb, 0x5d, 0x4a, 0xe8, 0xc1, 0x93, 0x3c, 0xfe, 0x99, 0x0a, 0x5b, 0x3f, 0x1a,
	0x70, 0x7d, 0xc4, 0xef, 0x6b, 0x4e, 0x33, 0x3e, 0x1b, 0x1d, 0x7a, 0x08, 0x70, 0x72, 0xb9, 0xd5,
	0x33, 0xb2, 0x5e, 0xb7, 0x6c, 0x7d, 0xa1, 0x79, 0x27, 0xd8, 0xaa, 0xd3, 0x74, 0x27, 0xd8, 0xbb,
	0x24, 0xa4, 0x7a, 0x2b, 0x67, 0x20, 0xd3, 0xfa, 0xd9, 0x80, 0x95, 0x72, 0x2c, 0x7d, 0xc6, 0x3b,
	0x70, 0xae, 0x93, 0x07, 0xaa, 0xc6, 0xda, 0xd9, 0xf5, 0xc5, 0xcd, 0xeb, 0x63, 0xee, 0x24, 0x4f,
	0xd2, 0x37, 0xa2, 0xf4, 0xe8, 0x51, 0x09, 0xe1, 0x87, 0x13, 0x09, 0xd5, 0xae, 0x43, 0x88, 0x01,
	0x98, 0x25, 0x84, 0x33, 0xd6, 0x6d, 0x09, 0x16, 0x72, 0x3c, 0x37, 0x0a, 0x24, 0xd2, 0x05, 0xa7,
	0x92, 0x7f, 0xee, 0x04, 0xd6, 0xd3, 0xd2, 0xeb, 0xe9, 0x97, 0x61, 0x0b, 0xe6, 0x73, 0xa1, 0xee,
	0xcc, 0x29, 0xaa, 0x20, 0xe5, 0xd6, 0x3d, 0xb8, 0x39, 0xe2, 0xfa, 0x20, 0x8e, 0xc2, 0xc8, 0x8b,
	0xe2, 0x48, 0x74, 0x7b, 0x47, 0xa8, 0xc2, 0x42, 0x4a, 0xba, 0x31, 0x23, 0x81, 0xc6, 0xee, 0x7d,
	0x5a, 0xbf, 0x19, 0x60, 0xbd, 0x2d, 0x5f, 0xc3, 0x99, 0x70, 0x9e, 0xca, 0x70, 0x4c, 0xa5, 0xc3,
	0x79, 0xa7, 0xff, 0x8d, 0x1e, 0xc3, 0x45, 0x79, 0x60, 0x3f, 0xa3, 0x41, 0x24, 0xb8, 0x3a, 0xf5,
	0xf6, 0xc7, 0x39, 0xe3, 0xdf, 0x87, 0xab, 0xd7, 0xd4, 0x7d, 0xf0, 0xa0, 0x65, 0x47, 0x0c, 0xb7,
	0x89, 0x68, 0xda, 0x3b, 0x89, 0xf8, 0xe3, 0x55, 0x1d, 0xf4, 0x45, 0xed, 0x24, 0xc2, 0x59, 0xcc,
	0x0d, 0xee, 0xab, 0x7c, 0x74, 0x13, 0x2e, 0x7a, 0x31, 0xf3, 0x5b, 0x6e, 0x93, 0x46, 0x61, 0x53,
	0x54, 0xcf, 0xae, 0x19, 0xeb, 0xf3, 0xce, 0xa2, 0x8c, 0x7d, 0x2e, 0x43, 0xd6, 0x55, 0x40, 0x12,
	0x7a, 0x97, 0x64, 0xa4, 0xdd, 0x6b, 0x70, 0xeb, 0x31, 0x5c, 0x19, 0x8a, 0xf6, 0xfb, 0xab, 0x92,
	0xca, 0x88, 0x2e, 0xed, 0x72, 0x49, 0x69, 0x55, 0x4a, 0xef, 0xc1, 0x2b, 0xf9, 0xe6, 0x7f, 0x0b,
	0x70, 0x4e, 0x1a, 0xa2, 0x9f, 0x0c, 0x80, 0x93, 0x02, 0xa1, 0x8f, 0x4a, 0x1c, 0xca, 0x67, 0x97,
	0xb9, 0x31, 0x8d, 0x54, 0x81, 0x5a, 0x5b, 0xdf, 0xfd, 0xf9, 0xef, 0x0f, 0x67, 0x30, 0xaa, 0xe3,
	0x3c, 0xa7, 0x3e, 0x30, 0x29, 0x55, 0xeb, 0xe1, 0x17, 0x25, 0x7d, 0xf8, 0x12, 0xbd, 0x32, 0x00,
	0x15, 0x47, 0x08, 0x6a, 0x4c, 0xde, 0x79, 0x64, 0x7e, 0x99, 0x9b, 0xa7, 0x49, 0xd1, 0xd0, 0x77,
	0x24, 0x74, 0x03, 0xe1, 0x02, 0xb4, 0xd0, 0xd2, 0x31, 0xd8, 0xbf, 0x18, 0x70, 0x69, 0x64, 0x24,
	0x20, 0x7b, 0x32, 0xc0, 0xe0, 0x48, 0x33, 0xf1, 0xd4, 0x7a, 0x4d, 0x7b, 0x57, 0xd2, 0x6e, 0xa1,
	0xdb, 0xa7, 0x2a, 0x31, 0x56, 0xf3, 0xe6, 0x77, 0x03, 0xde, 0x19, 0x36, 0x46, 0xf5, 0xe9, 0x00,
	0x7a, 0xbc, 0xf6, 0xb4, 0x72, 0x8d, 0xfb, 0x40, 0xe2, 0x7e, 0x8a, 0xee, 0xcd, 0x80, 0x8b, 0x5f,
	0xe8, 0x31, 0xf4, 0x12, 0xfd, 0x6a, 0xc0, 0xb5, 0xd2, 0xf7, 0x8d, 0x3e, 0x99, 0x0c, 0x54, 0x1c,
	0x27, 0xe6, 0xd6, 0x29, 0xb3, 0xf4, 0x69, 0x36, 0xe4, 0x69, 0xde, 0x47, 0x56, 0xf1, 0x34, 0x4d,
	0xea, 0xb7, 0x5c, 0x3a, 0x00, 0xf6, 0x1c, 0x2a, 0xea, 0x4d, 0xa2, 0x0f, 0xc6, 0x6d, 0x36, 0xf4,
	0xf8, 0xcd, 0x5b, 0x93, 0x64, 0x1a, 0x62, 0x55, 0x42, 0x2c, 0xa3, 0xa5, 0x02, 0x84, 0x7a, 0xf5,
	0xdb, 0x3b, 0xaf, 0x8f, 0x6a, 0xc6, 0x9b, 0xa3, 0x9a, 0xf1, 0xcf, 0x51, 0xcd, 0xf8, 0xfe, 0xb8,
	0x36, 0xf7, 0xe6, 0xb8, 0x36, 0xf7, 0xd7, 0x71, 0x6d, 0xee, 0x5b, 0x1c, 0x46, 0xa2, 0xd9, 0xf1,
	0x6c, 0x9f, 0xb5, 0x65, 0xb2, 0xfc, 0xdf, 0xe2, 0xb3, 0x78, 0xd0, 0xe9, 0xb9, 0xee, 0xfd, 0x6e,
	0x4a, 0xb9, 0x57, 0x91, 0x8a, 0xdb, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x71, 0xf7, 0x70, 0x88,
	0xa6, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// FastClient returns a fast client when given its public key as a hex
	// encoded string.
	FastClient(ctx context.Context, in *QueryFastClientRequest, opts ...grpc.CallOption) (*QueryFastClientResponse, error)
	// FastClientTransfer returns a fast client transfer when given its public key
	// as a hex encoded string.
	FastClientTransfer(ctx context.Context, in *QueryFastClientTransferRequest, opts ...grpc.CallOption) (*QueryFastClientTransferResponse, error)
	// FastUsers returns a paginated list of Fast users when given the fast client
	// public key as a hex encoded string.
	FastClientUsers(ctx context.Context, in *QueryFastClientUsersRequest, opts ...grpc.CallOption) (*QueryFastClientUsersResponse, error)
	// FastUser returns a fast user when given its public key as a hex
	// encoded string.
	FastClientUser(ctx context.Context, in *QueryFastClientUserRequest, opts ...grpc.CallOption) (*QueryFastClientUserResponse, error)
	// FastClientEligibility returns a fast client's eligibility based on a signed
	// payload.
	FastClientEligibility(ctx context.Context, in *QueryFastClientEligibilityRequest, opts ...grpc.CallOption) (*QueryFastClientEligibilityResponse, error)
	// Params returns the total set of fast parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) FastClient(ctx context.Context, in *QueryFastClientRequest, opts ...grpc.CallOption) (*QueryFastClientResponse, error) {
	out := new(QueryFastClientResponse)
	err := c.cc.Invoke(ctx, "/sedachain.fast.v1.Query/FastClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FastClientTransfer(ctx context.Context, in *QueryFastClientTransferRequest, opts ...grpc.CallOption) (*QueryFastClientTransferResponse, error) {
	out := new(QueryFastClientTransferResponse)
	err := c.cc.Invoke(ctx, "/sedachain.fast.v1.Query/FastClientTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FastClientUsers(ctx context.Context, in *QueryFastClientUsersRequest, opts ...grpc.CallOption) (*QueryFastClientUsersResponse, error) {
	out := new(QueryFastClientUsersResponse)
	err := c.cc.Invoke(ctx, "/sedachain.fast.v1.Query/FastClientUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FastClientUser(ctx context.Context, in *QueryFastClientUserRequest, opts ...grpc.CallOption) (*QueryFastClientUserResponse, error) {
	out := new(QueryFastClientUserResponse)
	err := c.cc.Invoke(ctx, "/sedachain.fast.v1.Query/FastClientUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FastClientEligibility(ctx context.Context, in *QueryFastClientEligibilityRequest, opts ...grpc.CallOption) (*QueryFastClientEligibilityResponse, error) {
	out := new(QueryFastClientEligibilityResponse)
	err := c.cc.Invoke(ctx, "/sedachain.fast.v1.Query/FastClientEligibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/sedachain.fast.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// FastClient returns a fast client when given its public key as a hex
	// encoded string.
	FastClient(context.Context, *QueryFastClientRequest) (*QueryFastClientResponse, error)
	// FastClientTransfer returns a fast client transfer when given its public key
	// as a hex encoded string.
	FastClientTransfer(context.Context, *QueryFastClientTransferRequest) (*QueryFastClientTransferResponse, error)
	// FastUsers returns a paginated list of Fast users when given the fast client
	// public key as a hex encoded string.
	FastClientUsers(context.Context, *QueryFastClientUsersRequest) (*QueryFastClientUsersResponse, error)
	// FastUser returns a fast user when given its public key as a hex
	// encoded string.
	FastClientUser(context.Context, *QueryFastClientUserRequest) (*QueryFastClientUserResponse, error)
	// FastClientEligibility returns a fast client's eligibility based on a signed
	// payload.
	FastClientEligibility(context.Context, *QueryFastClientEligibilityRequest) (*QueryFastClientEligibilityResponse, error)
	// Params returns the total set of fast parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) FastClient(ctx context.Context, req *QueryFastClientRequest) (*QueryFastClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FastClient not implemented")
}
func (*UnimplementedQueryServer) FastClientTransfer(ctx context.Context, req *QueryFastClientTransferRequest) (*QueryFastClientTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FastClientTransfer not implemented")
}
func (*UnimplementedQueryServer) FastClientUsers(ctx context.Context, req *QueryFastClientUsersRequest) (*QueryFastClientUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FastClientUsers not implemented")
}
func (*UnimplementedQueryServer) FastClientUser(ctx context.Context, req *QueryFastClientUserRequest) (*QueryFastClientUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FastClientUser not implemented")
}
func (*UnimplementedQueryServer) FastClientEligibility(ctx context.Context, req *QueryFastClientEligibilityRequest) (*QueryFastClientEligibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FastClientEligibility not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_FastClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFastClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FastClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.fast.v1.Query/FastClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FastClient(ctx, req.(*QueryFastClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FastClientTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFastClientTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FastClientTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.fast.v1.Query/FastClientTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FastClientTransfer(ctx, req.(*QueryFastClientTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FastClientUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFastClientUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FastClientUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.fast.v1.Query/FastClientUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FastClientUsers(ctx, req.(*QueryFastClientUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FastClientUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFastClientUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FastClientUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.fast.v1.Query/FastClientUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FastClientUser(ctx, req.(*QueryFastClientUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FastClientEligibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFastClientEligibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FastClientEligibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.fast.v1.Query/FastClientEligibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FastClientEligibility(ctx, req.(*QueryFastClientEligibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.fast.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sedachain.fast.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FastClient",
			Handler:    _Query_FastClient_Handler,
		},
		{
			MethodName: "FastClientTransfer",
			Handler:    _Query_FastClientTransfer_Handler,
		},
		{
			MethodName: "FastClientUsers",
			Handler:    _Query_FastClientUsers_Handler,
		},
		{
			MethodName: "FastClientUser",
			Handler:    _Query_FastClientUser_Handler,
		},
		{
			MethodName: "FastClientEligibility",
			Handler:    _Query_FastClientEligibility_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sedachain/fast/v1/query.proto",
}

func (m *QueryFastClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFastClientRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFastClientRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FastClientPubKey) > 0 {
		i -= len(m.FastClientPubKey)
		copy(dAtA[i:], m.FastClientPubKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FastClientPubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFastClientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFastClientResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFastClientResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Client.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFastClientTransferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFastClientTransferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFastClientTransferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FastClientPubKey) > 0 {
		i -= len(m.FastClientPubKey)
		copy(dAtA[i:], m.FastClientPubKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FastClientPubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFastClientTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFastClientTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFastClientTransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewOwnerAddress) > 0 {
		i -= len(m.NewOwnerAddress)
		copy(dAtA[i:], m.NewOwnerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NewOwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFastClientUsersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFastClientUsersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFastClientUsersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FastClientPubKey) > 0 {
		i -= len(m.FastClientPubKey)
		copy(dAtA[i:], m.FastClientPubKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FastClientPubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFastClientUsersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFastClientUsersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFastClientUsersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFastClientUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFastClientUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFastClientUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FastClientPubKey) > 0 {
		i -= len(m.FastClientPubKey)
		copy(dAtA[i:], m.FastClientPubKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FastClientPubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFastClientUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFastClientUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFastClientUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFastClientEligibilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFastClientEligibilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFastClientEligibilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFastClientEligibilityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFastClientEligibilityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFastClientEligibilityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.UserCredits.Size()
		i -= size
		if _, err := m.UserCredits.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Eligible {
		i--
		if m.Eligible {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryFastClientRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FastClientPubKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFastClientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Client.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFastClientTransferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FastClientPubKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFastClientTransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NewOwnerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFastClientUsersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FastClientPubKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFastClientUsersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFastClientUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FastClientPubKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFastClientUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.User.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFastClientEligibilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFastClientEligibilityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Eligible {
		n += 2
	}
	l = m.UserCredits.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryFastClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFastClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFastClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastClientPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FastClientPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFastClientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFastClientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFastClientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFastClientTransferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFastClientTransferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFastClientTransferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastClientPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FastClientPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFastClientTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFastClientTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFastClientTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFastClientUsersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFastClientUsersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFastClientUsersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastClientPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FastClientPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFastClientUsersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFastClientUsersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFastClientUsersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, FastUser{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFastClientUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFastClientUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFastClientUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastClientPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FastClientPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFastClientUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFastClientUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFastClientUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFastClientEligibilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFastClientEligibilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFastClientEligibilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFastClientEligibilityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFastClientEligibilityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFastClientEligibilityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eligible", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Eligible = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCredits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserCredits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
