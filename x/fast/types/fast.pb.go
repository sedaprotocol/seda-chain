// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sedachain/fast/v1/fast.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Module parameters which can be changed through the authority.
type Params struct {
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9d64defb298a08c, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// FastClient contains information about a fast client.
type FastClient struct {
	// The unique identifier of the fast client. Only used for internal purposes
	// to allow key rotation.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// This address is allowed to update the config of the fast client.
	OwnerAddress string `protobuf:"bytes,2,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	// This address is allowed to perform administrative actions on the fast
	// client.
	AdminAddress string `protobuf:"bytes,3,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// The address of the fast client that's used to submit reports.
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// The public key of the fast client used to verify signed requests and
	// identify the fast client.
	PublicKey []byte `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// The memo of the fast client.
	Memo string `protobuf:"bytes,6,opt,name=memo,proto3" json:"memo,omitempty"`
	// The balance of the fast client.
	Balance cosmossdk_io_math.Int `protobuf:"bytes,7,opt,name=balance,proto3,customtype=cosmossdk.io/math.Int" json:"balance"`
	// The user credits a fast client has used but not yet settled with the
	// balance.
	UsedCredits cosmossdk_io_math.Int `protobuf:"bytes,8,opt,name=used_credits,json=usedCredits,proto3,customtype=cosmossdk.io/math.Int" json:"used_credits"`
}

func (m *FastClient) Reset()         { *m = FastClient{} }
func (m *FastClient) String() string { return proto.CompactTextString(m) }
func (*FastClient) ProtoMessage()    {}
func (*FastClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9d64defb298a08c, []int{1}
}
func (m *FastClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FastClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FastClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FastClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FastClient.Merge(m, src)
}
func (m *FastClient) XXX_Size() int {
	return m.Size()
}
func (m *FastClient) XXX_DiscardUnknown() {
	xxx_messageInfo_FastClient.DiscardUnknown(m)
}

var xxx_messageInfo_FastClient proto.InternalMessageInfo

func (m *FastClient) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FastClient) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *FastClient) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *FastClient) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *FastClient) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *FastClient) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

// A user of a fast client.
type FastUser struct {
	// The identifier of the user, should be unique for a fast client.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The amount of credits the user has.
	Credits cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=credits,proto3,customtype=cosmossdk.io/math.Int" json:"credits"`
}

func (m *FastUser) Reset()         { *m = FastUser{} }
func (m *FastUser) String() string { return proto.CompactTextString(m) }
func (*FastUser) ProtoMessage()    {}
func (*FastUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9d64defb298a08c, []int{2}
}
func (m *FastUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FastUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FastUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FastUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FastUser.Merge(m, src)
}
func (m *FastUser) XXX_Size() int {
	return m.Size()
}
func (m *FastUser) XXX_DiscardUnknown() {
	xxx_messageInfo_FastUser.DiscardUnknown(m)
}

var xxx_messageInfo_FastUser proto.InternalMessageInfo

func (m *FastUser) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// A report of a user's usage of the fast.
type FastUserReport struct {
	// The identifier of the user.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The amount of credits the user has used. Includes the computation credits
	// AND the data proxy credits.
	UsedCredits cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=used_credits,json=usedCredits,proto3,customtype=cosmossdk.io/math.Int" json:"used_credits"`
	// The reports of the data proxy queries made for the user.
	DataProxyReports []*DataProxyReport `protobuf:"bytes,3,rep,name=data_proxy_reports,json=dataProxyReports,proto3" json:"data_proxy_reports,omitempty"`
	// The number of queries made for the user.
	Queries uint64 `protobuf:"varint,4,opt,name=queries,proto3" json:"queries,omitempty"`
}

func (m *FastUserReport) Reset()         { *m = FastUserReport{} }
func (m *FastUserReport) String() string { return proto.CompactTextString(m) }
func (*FastUserReport) ProtoMessage()    {}
func (*FastUserReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9d64defb298a08c, []int{3}
}
func (m *FastUserReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FastUserReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FastUserReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FastUserReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FastUserReport.Merge(m, src)
}
func (m *FastUserReport) XXX_Size() int {
	return m.Size()
}
func (m *FastUserReport) XXX_DiscardUnknown() {
	xxx_messageInfo_FastUserReport.DiscardUnknown(m)
}

var xxx_messageInfo_FastUserReport proto.InternalMessageInfo

func (m *FastUserReport) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *FastUserReport) GetDataProxyReports() []*DataProxyReport {
	if m != nil {
		return m.DataProxyReports
	}
	return nil
}

func (m *FastUserReport) GetQueries() uint64 {
	if m != nil {
		return m.Queries
	}
	return 0
}

// A report of a user's usage of a data proxy.
type DataProxyReport struct {
	// The public key of the data proxy as a hex string.
	DataProxyPubKey string `protobuf:"bytes,1,opt,name=data_proxy_pub_key,json=dataProxyPubKey,proto3" json:"data_proxy_pub_key,omitempty"`
	// The price of the data proxy in aseda when the query was made.
	Price cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=price,proto3,customtype=cosmossdk.io/math.Int" json:"price"`
	// The amount of data proxy queries for the data proxy/price pair.
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *DataProxyReport) Reset()         { *m = DataProxyReport{} }
func (m *DataProxyReport) String() string { return proto.CompactTextString(m) }
func (*DataProxyReport) ProtoMessage()    {}
func (*DataProxyReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9d64defb298a08c, []int{4}
}
func (m *DataProxyReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataProxyReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataProxyReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataProxyReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataProxyReport.Merge(m, src)
}
func (m *DataProxyReport) XXX_Size() int {
	return m.Size()
}
func (m *DataProxyReport) XXX_DiscardUnknown() {
	xxx_messageInfo_DataProxyReport.DiscardUnknown(m)
}

var xxx_messageInfo_DataProxyReport proto.InternalMessageInfo

func (m *DataProxyReport) GetDataProxyPubKey() string {
	if m != nil {
		return m.DataProxyPubKey
	}
	return ""
}

func (m *DataProxyReport) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "sedachain.fast.v1.Params")
	proto.RegisterType((*FastClient)(nil), "sedachain.fast.v1.FastClient")
	proto.RegisterType((*FastUser)(nil), "sedachain.fast.v1.FastUser")
	proto.RegisterType((*FastUserReport)(nil), "sedachain.fast.v1.FastUserReport")
	proto.RegisterType((*DataProxyReport)(nil), "sedachain.fast.v1.DataProxyReport")
}

func init() { proto.RegisterFile("sedachain/fast/v1/fast.proto", fileDescriptor_e9d64defb298a08c) }

var fileDescriptor_e9d64defb298a08c = []byte{
	// 545 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x6e, 0xba, 0xac, 0x5d, 0xbd, 0xd2, 0x81, 0x35, 0x20, 0x4c, 0x90, 0x56, 0x39, 0x55, 0x9a,
	0x9a, 0x68, 0xe3, 0x86, 0xc4, 0x61, 0x1b, 0x20, 0x55, 0x48, 0xa8, 0x0a, 0xe2, 0xc2, 0x25, 0x72,
	0x62, 0xd3, 0x9a, 0x35, 0x71, 0xb0, 0x9d, 0xb1, 0xfe, 0x0b, 0x8e, 0x70, 0xe3, 0x47, 0xec, 0x47,
	0xec, 0x38, 0xed, 0x84, 0x38, 0x4c, 0xa8, 0x15, 0x12, 0x3f, 0x03, 0xd9, 0x4e, 0x2a, 0x6d, 0x08,
	0x4d, 0x8c, 0x53, 0xf3, 0xde, 0xfb, 0xbe, 0xf7, 0xbd, 0x57, 0x7f, 0x36, 0x78, 0x28, 0x08, 0x46,
	0xc9, 0x04, 0xd1, 0x2c, 0x78, 0x87, 0x84, 0x0c, 0x8e, 0x76, 0xf4, 0xaf, 0x9f, 0x73, 0x26, 0x19,
	0xbc, 0xb3, 0xac, 0xfa, 0x3a, 0x7b, 0xb4, 0xb3, 0xb5, 0x39, 0x66, 0x63, 0xa6, 0xab, 0x81, 0xfa,
	0x32, 0xc0, 0xad, 0x07, 0x09, 0x13, 0x29, 0x13, 0x91, 0x29, 0x98, 0xc0, 0x94, 0xbc, 0x0e, 0x68,
	0x8c, 0x10, 0x47, 0xa9, 0x78, 0x62, 0xff, 0xfa, 0xda, 0xb5, 0xbc, 0xcf, 0x2b, 0x00, 0xbc, 0x40,
	0x42, 0x1e, 0x4c, 0x29, 0xc9, 0x24, 0xec, 0x80, 0x3a, 0xc5, 0x8e, 0xd5, 0xb3, 0xfa, 0x76, 0x58,
	0xa7, 0x18, 0x3e, 0x05, 0xb7, 0xd8, 0xc7, 0x8c, 0xf0, 0x08, 0x61, 0xcc, 0x89, 0x10, 0x4e, 0xbd,
	0x67, 0xf5, 0x5b, 0xfb, 0xce, 0xf9, 0xc9, 0x60, 0xb3, 0xec, 0xbb, 0x67, 0x2a, 0xaf, 0x25, 0xa7,
	0xd9, 0x38, 0x6c, 0x6b, 0x78, 0x99, 0x53, 0x74, 0x84, 0x53, 0x9a, 0x2d, 0xe9, 0x2b, 0xd7, 0xd1,
	0x35, 0xbc, 0xa2, 0xef, 0x82, 0x66, 0x45, 0xb4, 0xaf, 0x21, 0x56, 0x40, 0xf8, 0x08, 0x80, 0xbc,
	0x88, 0xa7, 0x34, 0x89, 0x0e, 0xc9, 0xcc, 0x59, 0xed, 0x59, 0xfd, 0x76, 0xd8, 0x32, 0x99, 0x97,
	0x64, 0x06, 0x21, 0xb0, 0x53, 0x92, 0x32, 0xa7, 0xa1, 0xfa, 0x85, 0xfa, 0x1b, 0x3e, 0x07, 0xcd,
	0x18, 0x4d, 0x51, 0x96, 0x10, 0xa7, 0xa9, 0x65, 0xb6, 0x4f, 0x2f, 0xba, 0xb5, 0xef, 0x17, 0xdd,
	0xbb, 0x46, 0x4a, 0xe0, 0x43, 0x9f, 0xb2, 0x20, 0x45, 0x72, 0xe2, 0x0f, 0x33, 0x79, 0x7e, 0x32,
	0x00, 0xe5, 0x0c, 0xc3, 0x4c, 0x86, 0x15, 0x17, 0xbe, 0x02, 0xed, 0x42, 0x10, 0x1c, 0x25, 0x9c,
	0x60, 0x2a, 0x85, 0xb3, 0xf6, 0xef, 0xbd, 0xd6, 0x55, 0x83, 0x03, 0xc3, 0xf7, 0xde, 0x83, 0x35,
	0x75, 0x32, 0x6f, 0x04, 0xe1, 0xf0, 0x3e, 0x68, 0x16, 0x82, 0xf0, 0xa8, 0x3c, 0x9c, 0x56, 0xd8,
	0x50, 0xe1, 0x10, 0xab, 0xd9, 0x2b, 0xbd, 0xfa, 0x0d, 0x66, 0x2f, 0xb9, 0xde, 0x4f, 0x0b, 0x74,
	0x2a, 0xb1, 0x90, 0xe4, 0x8c, 0xcb, 0xbf, 0x4b, 0x5e, 0xdd, 0xb3, 0xfe, 0x7f, 0x7b, 0xc2, 0x11,
	0x80, 0x18, 0x49, 0xa4, 0xdc, 0x7a, 0x3c, 0x8b, 0xb8, 0x56, 0x57, 0x4e, 0x59, 0xe9, 0xaf, 0xef,
	0x7a, 0xfe, 0x1f, 0x9e, 0xf7, 0x9f, 0x21, 0x89, 0x46, 0x0a, 0x6b, 0x06, 0x0d, 0x6f, 0xe3, 0xcb,
	0x09, 0x01, 0x1d, 0xd0, 0xfc, 0x50, 0x10, 0x4e, 0x89, 0xf1, 0x8d, 0x1d, 0x56, 0xa1, 0xf7, 0xc5,
	0x02, 0x1b, 0x57, 0xf8, 0x70, 0xfb, 0x92, 0x7e, 0x5e, 0xc4, 0xda, 0x39, 0x66, 0xe7, 0x8d, 0x65,
	0xef, 0x51, 0x11, 0x2b, 0xff, 0xec, 0x81, 0xd5, 0x9c, 0xd3, 0x84, 0xdc, 0x64, 0x6b, 0xc3, 0x84,
	0xf7, 0x40, 0x03, 0xa5, 0xac, 0xc8, 0xa4, 0xbe, 0x0d, 0x76, 0x58, 0x46, 0xfb, 0xc3, 0xd3, 0xb9,
	0x6b, 0x9d, 0xcd, 0x5d, 0xeb, 0xc7, 0xdc, 0xb5, 0x3e, 0x2d, 0xdc, 0xda, 0xd9, 0xc2, 0xad, 0x7d,
	0x5b, 0xb8, 0xb5, 0xb7, 0xc1, 0x98, 0xca, 0x49, 0x11, 0xfb, 0x09, 0x4b, 0x03, 0xf5, 0x7f, 0xe8,
	0xab, 0x9c, 0xb0, 0xa9, 0x0e, 0x06, 0xe6, 0xbd, 0x38, 0x36, 0x2f, 0x86, 0x9c, 0xe5, 0x44, 0xc4,
	0x0d, 0x8d, 0x78, 0xfc, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xec, 0xfe, 0x08, 0x49, 0x50, 0x04, 0x00,
	0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *FastClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FastClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FastClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.UsedCredits.Size()
		i -= size
		if _, err := m.UsedCredits.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFast(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.Balance.Size()
		i -= size
		if _, err := m.Balance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFast(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintFast(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintFast(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintFast(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintFast(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintFast(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintFast(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FastUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FastUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FastUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Credits.Size()
		i -= size
		if _, err := m.Credits.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFast(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintFast(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FastUserReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FastUserReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FastUserReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Queries != 0 {
		i = encodeVarintFast(dAtA, i, uint64(m.Queries))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DataProxyReports) > 0 {
		for iNdEx := len(m.DataProxyReports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataProxyReports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFast(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.UsedCredits.Size()
		i -= size
		if _, err := m.UsedCredits.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFast(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintFast(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DataProxyReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataProxyReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataProxyReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintFast(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFast(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.DataProxyPubKey) > 0 {
		i -= len(m.DataProxyPubKey)
		copy(dAtA[i:], m.DataProxyPubKey)
		i = encodeVarintFast(dAtA, i, uint64(len(m.DataProxyPubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFast(dAtA []byte, offset int, v uint64) int {
	offset -= sovFast(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *FastClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFast(uint64(m.Id))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovFast(uint64(l))
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovFast(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovFast(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovFast(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovFast(uint64(l))
	}
	l = m.Balance.Size()
	n += 1 + l + sovFast(uint64(l))
	l = m.UsedCredits.Size()
	n += 1 + l + sovFast(uint64(l))
	return n
}

func (m *FastUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovFast(uint64(l))
	}
	l = m.Credits.Size()
	n += 1 + l + sovFast(uint64(l))
	return n
}

func (m *FastUserReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovFast(uint64(l))
	}
	l = m.UsedCredits.Size()
	n += 1 + l + sovFast(uint64(l))
	if len(m.DataProxyReports) > 0 {
		for _, e := range m.DataProxyReports {
			l = e.Size()
			n += 1 + l + sovFast(uint64(l))
		}
	}
	if m.Queries != 0 {
		n += 1 + sovFast(uint64(m.Queries))
	}
	return n
}

func (m *DataProxyReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DataProxyPubKey)
	if l > 0 {
		n += 1 + l + sovFast(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovFast(uint64(l))
	if m.Amount != 0 {
		n += 1 + sovFast(uint64(m.Amount))
	}
	return n
}

func sovFast(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFast(x uint64) (n int) {
	return sovFast(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FastClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FastClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FastClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFast
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFast
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFast
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFast
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFast
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFast
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedCredits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFast
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UsedCredits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FastUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FastUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FastUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFast
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFast
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Credits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FastUserReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FastUserReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FastUserReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFast
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedCredits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFast
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UsedCredits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataProxyReports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFast
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataProxyReports = append(m.DataProxyReports, &DataProxyReport{})
			if err := m.DataProxyReports[len(m.DataProxyReports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			m.Queries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Queries |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataProxyReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataProxyReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataProxyReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataProxyPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFast
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataProxyPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFast
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFast(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFast
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFast
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFast
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFast
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFast
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFast
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFast        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFast          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFast = fmt.Errorf("proto: unexpected end of group")
)
