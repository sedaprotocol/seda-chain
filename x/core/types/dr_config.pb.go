// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sedachain/core/v1/dr_config.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DrConfig defines the configuration for data requests
type DrConfig struct {
	// Number of blocks after which a data request is timed out while waiting
	// for commits.
	CommitTimeoutInBlocks uint32 `protobuf:"varint,1,opt,name=commit_timeout_in_blocks,json=commitTimeoutInBlocks,proto3" json:"commit_timeout_in_blocks,omitempty"`
	// Number of blocks after which a data request is timed out while waiting
	// for reveals.
	RevealTimeoutInBlocks uint32 `protobuf:"varint,2,opt,name=reveal_timeout_in_blocks,json=revealTimeoutInBlocks,proto3" json:"reveal_timeout_in_blocks,omitempty"`
	// This is the delay before the backup executors are allowed to start
	// executing the data request.
	BackupDelayInBlocks uint32 `protobuf:"varint,3,opt,name=backup_delay_in_blocks,json=backupDelayInBlocks,proto3" json:"backup_delay_in_blocks,omitempty"`
	// The maximum size of all the reveals in a data request.
	DrRevealSizeLimitInBytes uint32 `protobuf:"varint,4,opt,name=dr_reveal_size_limit_in_bytes,json=drRevealSizeLimitInBytes,proto3" json:"dr_reveal_size_limit_in_bytes,omitempty"`
	// The maximum size of the input for the execution program.
	ExecInputLimitInBytes uint32 `protobuf:"varint,5,opt,name=exec_input_limit_in_bytes,json=execInputLimitInBytes,proto3" json:"exec_input_limit_in_bytes,omitempty"`
	// The maximum size of the input for the tally program.
	TallyInputLimitInBytes uint32 `protobuf:"varint,6,opt,name=tally_input_limit_in_bytes,json=tallyInputLimitInBytes,proto3" json:"tally_input_limit_in_bytes,omitempty"`
	// The maximum size of the consensus filter.
	ConsensusFilterLimitInBytes uint32 `protobuf:"varint,7,opt,name=consensus_filter_limit_in_bytes,json=consensusFilterLimitInBytes,proto3" json:"consensus_filter_limit_in_bytes,omitempty"`
	// The maximum size of the memo.
	MemoLimitInBytes uint32 `protobuf:"varint,8,opt,name=memo_limit_in_bytes,json=memoLimitInBytes,proto3" json:"memo_limit_in_bytes,omitempty"`
	// The maximum size of the payback address.
	PaybackAddressLimitInBytes uint32 `protobuf:"varint,9,opt,name=payback_address_limit_in_bytes,json=paybackAddressLimitInBytes,proto3" json:"payback_address_limit_in_bytes,omitempty"`
	// The maximum size of the SEDA payload.
	SedaPayloadLimitInBytes uint32 `protobuf:"varint,10,opt,name=seda_payload_limit_in_bytes,json=sedaPayloadLimitInBytes,proto3" json:"seda_payload_limit_in_bytes,omitempty"`
}

func (m *DrConfig) Reset()         { *m = DrConfig{} }
func (m *DrConfig) String() string { return proto.CompactTextString(m) }
func (*DrConfig) ProtoMessage()    {}
func (*DrConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c0662d7d1478b0, []int{0}
}
func (m *DrConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DrConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DrConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DrConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DrConfig.Merge(m, src)
}
func (m *DrConfig) XXX_Size() int {
	return m.Size()
}
func (m *DrConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DrConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DrConfig proto.InternalMessageInfo

func (m *DrConfig) GetCommitTimeoutInBlocks() uint32 {
	if m != nil {
		return m.CommitTimeoutInBlocks
	}
	return 0
}

func (m *DrConfig) GetRevealTimeoutInBlocks() uint32 {
	if m != nil {
		return m.RevealTimeoutInBlocks
	}
	return 0
}

func (m *DrConfig) GetBackupDelayInBlocks() uint32 {
	if m != nil {
		return m.BackupDelayInBlocks
	}
	return 0
}

func (m *DrConfig) GetDrRevealSizeLimitInBytes() uint32 {
	if m != nil {
		return m.DrRevealSizeLimitInBytes
	}
	return 0
}

func (m *DrConfig) GetExecInputLimitInBytes() uint32 {
	if m != nil {
		return m.ExecInputLimitInBytes
	}
	return 0
}

func (m *DrConfig) GetTallyInputLimitInBytes() uint32 {
	if m != nil {
		return m.TallyInputLimitInBytes
	}
	return 0
}

func (m *DrConfig) GetConsensusFilterLimitInBytes() uint32 {
	if m != nil {
		return m.ConsensusFilterLimitInBytes
	}
	return 0
}

func (m *DrConfig) GetMemoLimitInBytes() uint32 {
	if m != nil {
		return m.MemoLimitInBytes
	}
	return 0
}

func (m *DrConfig) GetPaybackAddressLimitInBytes() uint32 {
	if m != nil {
		return m.PaybackAddressLimitInBytes
	}
	return 0
}

func (m *DrConfig) GetSedaPayloadLimitInBytes() uint32 {
	if m != nil {
		return m.SedaPayloadLimitInBytes
	}
	return 0
}

func init() {
	proto.RegisterType((*DrConfig)(nil), "sedachain.core.v1.DrConfig")
}

func init() { proto.RegisterFile("sedachain/core/v1/dr_config.proto", fileDescriptor_b5c0662d7d1478b0) }

var fileDescriptor_b5c0662d7d1478b0 = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4f, 0x8b, 0x13, 0x31,
	0x18, 0x87, 0x3b, 0xba, 0xae, 0x6b, 0x40, 0xd0, 0x2e, 0xae, 0xe3, 0x2e, 0x8e, 0x7f, 0x4e, 0x5e,
	0x76, 0x86, 0x65, 0x0f, 0x8a, 0x08, 0xe2, 0x58, 0x84, 0x01, 0x0f, 0xb2, 0x7a, 0xf2, 0x12, 0x32,
	0xc9, 0xdb, 0x36, 0x34, 0x93, 0x0c, 0x49, 0xa6, 0x74, 0xfa, 0x29, 0xfc, 0x58, 0x1e, 0x7b, 0xf4,
	0xa6, 0xb4, 0x5f, 0x44, 0x92, 0x94, 0xd2, 0x99, 0xed, 0xb1, 0x3c, 0xcf, 0xf3, 0x6b, 0x18, 0x5e,
	0xf4, 0xca, 0x00, 0x23, 0x74, 0x4a, 0xb8, 0xcc, 0xa8, 0xd2, 0x90, 0xcd, 0xaf, 0x32, 0xa6, 0x31,
	0x55, 0x72, 0xcc, 0x27, 0x69, 0xad, 0x95, 0x55, 0xc3, 0xc7, 0x3b, 0x25, 0x75, 0x4a, 0x3a, 0xbf,
	0x7a, 0xfd, 0xf7, 0x08, 0x9d, 0x8c, 0xf4, 0x67, 0x6f, 0x0d, 0xdf, 0xa2, 0x98, 0xaa, 0xaa, 0xe2,
	0x16, 0x5b, 0x5e, 0x81, 0x6a, 0x2c, 0xe6, 0x12, 0x97, 0x42, 0xd1, 0x99, 0x89, 0xa3, 0x97, 0xd1,
	0x9b, 0x87, 0x37, 0x4f, 0x02, 0xff, 0x11, 0x70, 0x21, 0x73, 0x0f, 0x5d, 0xa8, 0x61, 0x0e, 0x44,
	0x1c, 0x08, 0xef, 0x84, 0x30, 0xf0, 0x7e, 0x78, 0x8d, 0xce, 0x4a, 0x42, 0x67, 0x4d, 0x8d, 0x19,
	0x08, 0xd2, 0xee, 0x65, 0x77, 0x7d, 0x76, 0x1a, 0xe8, 0xc8, 0xc1, 0x5d, 0xf4, 0x11, 0x3d, 0x67,
	0x1a, 0x6f, 0xff, 0xd0, 0xf0, 0x25, 0x60, 0xc1, 0xdd, 0xa3, 0x5d, 0xdc, 0x5a, 0x30, 0xf1, 0x91,
	0x6f, 0x63, 0xa6, 0x6f, 0xbc, 0xf3, 0x9d, 0x2f, 0xe1, 0xab, 0x33, 0x0a, 0x99, 0x3b, 0x3e, 0x7c,
	0x87, 0x9e, 0xc1, 0x02, 0x28, 0xe6, 0xb2, 0x6e, 0x6c, 0x3f, 0xbe, 0x17, 0xde, 0xeb, 0x84, 0xc2,
	0xf1, 0x4e, 0xf9, 0x1e, 0x9d, 0x5b, 0x22, 0x44, 0x7b, 0x38, 0x3d, 0xf6, 0xe9, 0x99, 0x37, 0x6e,
	0xb7, 0x23, 0xf4, 0x82, 0x2a, 0x69, 0x40, 0x9a, 0xc6, 0xe0, 0x31, 0x17, 0x16, 0x74, 0x7f, 0xe0,
	0xbe, 0x1f, 0xb8, 0xd8, 0x69, 0x5f, 0xbc, 0xd5, 0x59, 0xb9, 0x44, 0xa7, 0x15, 0x54, 0xaa, 0x5f,
	0x9e, 0xf8, 0xf2, 0x91, 0x43, 0x1d, 0x3d, 0x47, 0x49, 0x4d, 0x5a, 0xf7, 0x15, 0x31, 0x61, 0x4c,
	0x83, 0x31, 0xfd, 0xf2, 0x81, 0x2f, 0xcf, 0xb7, 0xd6, 0xa7, 0x20, 0x75, 0x36, 0x3e, 0xa0, 0x0b,
	0x77, 0x38, 0xb8, 0x26, 0xad, 0x50, 0x84, 0xf5, 0x07, 0x90, 0x1f, 0x78, 0xea, 0x94, 0x6f, 0xc1,
	0xd8, 0xaf, 0xf3, 0xe2, 0xf7, 0x3a, 0x89, 0x56, 0xeb, 0x24, 0xfa, 0xb7, 0x4e, 0xa2, 0x5f, 0x9b,
	0x64, 0xb0, 0xda, 0x24, 0x83, 0x3f, 0x9b, 0x64, 0xf0, 0x33, 0x9b, 0x70, 0x3b, 0x6d, 0xca, 0x94,
	0xaa, 0x2a, 0x73, 0xb5, 0x3f, 0x52, 0xaa, 0x84, 0xff, 0x71, 0x19, 0x4e, 0x79, 0x11, 0x8e, 0xd9,
	0xb6, 0x35, 0x98, 0xf2, 0xd8, 0x1b, 0xd7, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x91, 0xdd, 0x66,
	0x42, 0xeb, 0x02, 0x00, 0x00,
}

func (m *DrConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DrConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DrConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SedaPayloadLimitInBytes != 0 {
		i = encodeVarintDrConfig(dAtA, i, uint64(m.SedaPayloadLimitInBytes))
		i--
		dAtA[i] = 0x50
	}
	if m.PaybackAddressLimitInBytes != 0 {
		i = encodeVarintDrConfig(dAtA, i, uint64(m.PaybackAddressLimitInBytes))
		i--
		dAtA[i] = 0x48
	}
	if m.MemoLimitInBytes != 0 {
		i = encodeVarintDrConfig(dAtA, i, uint64(m.MemoLimitInBytes))
		i--
		dAtA[i] = 0x40
	}
	if m.ConsensusFilterLimitInBytes != 0 {
		i = encodeVarintDrConfig(dAtA, i, uint64(m.ConsensusFilterLimitInBytes))
		i--
		dAtA[i] = 0x38
	}
	if m.TallyInputLimitInBytes != 0 {
		i = encodeVarintDrConfig(dAtA, i, uint64(m.TallyInputLimitInBytes))
		i--
		dAtA[i] = 0x30
	}
	if m.ExecInputLimitInBytes != 0 {
		i = encodeVarintDrConfig(dAtA, i, uint64(m.ExecInputLimitInBytes))
		i--
		dAtA[i] = 0x28
	}
	if m.DrRevealSizeLimitInBytes != 0 {
		i = encodeVarintDrConfig(dAtA, i, uint64(m.DrRevealSizeLimitInBytes))
		i--
		dAtA[i] = 0x20
	}
	if m.BackupDelayInBlocks != 0 {
		i = encodeVarintDrConfig(dAtA, i, uint64(m.BackupDelayInBlocks))
		i--
		dAtA[i] = 0x18
	}
	if m.RevealTimeoutInBlocks != 0 {
		i = encodeVarintDrConfig(dAtA, i, uint64(m.RevealTimeoutInBlocks))
		i--
		dAtA[i] = 0x10
	}
	if m.CommitTimeoutInBlocks != 0 {
		i = encodeVarintDrConfig(dAtA, i, uint64(m.CommitTimeoutInBlocks))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDrConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovDrConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DrConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommitTimeoutInBlocks != 0 {
		n += 1 + sovDrConfig(uint64(m.CommitTimeoutInBlocks))
	}
	if m.RevealTimeoutInBlocks != 0 {
		n += 1 + sovDrConfig(uint64(m.RevealTimeoutInBlocks))
	}
	if m.BackupDelayInBlocks != 0 {
		n += 1 + sovDrConfig(uint64(m.BackupDelayInBlocks))
	}
	if m.DrRevealSizeLimitInBytes != 0 {
		n += 1 + sovDrConfig(uint64(m.DrRevealSizeLimitInBytes))
	}
	if m.ExecInputLimitInBytes != 0 {
		n += 1 + sovDrConfig(uint64(m.ExecInputLimitInBytes))
	}
	if m.TallyInputLimitInBytes != 0 {
		n += 1 + sovDrConfig(uint64(m.TallyInputLimitInBytes))
	}
	if m.ConsensusFilterLimitInBytes != 0 {
		n += 1 + sovDrConfig(uint64(m.ConsensusFilterLimitInBytes))
	}
	if m.MemoLimitInBytes != 0 {
		n += 1 + sovDrConfig(uint64(m.MemoLimitInBytes))
	}
	if m.PaybackAddressLimitInBytes != 0 {
		n += 1 + sovDrConfig(uint64(m.PaybackAddressLimitInBytes))
	}
	if m.SedaPayloadLimitInBytes != 0 {
		n += 1 + sovDrConfig(uint64(m.SedaPayloadLimitInBytes))
	}
	return n
}

func sovDrConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDrConfig(x uint64) (n int) {
	return sovDrConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DrConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDrConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTimeoutInBlocks", wireType)
			}
			m.CommitTimeoutInBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitTimeoutInBlocks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealTimeoutInBlocks", wireType)
			}
			m.RevealTimeoutInBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevealTimeoutInBlocks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupDelayInBlocks", wireType)
			}
			m.BackupDelayInBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackupDelayInBlocks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrRevealSizeLimitInBytes", wireType)
			}
			m.DrRevealSizeLimitInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DrRevealSizeLimitInBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecInputLimitInBytes", wireType)
			}
			m.ExecInputLimitInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecInputLimitInBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TallyInputLimitInBytes", wireType)
			}
			m.TallyInputLimitInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TallyInputLimitInBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusFilterLimitInBytes", wireType)
			}
			m.ConsensusFilterLimitInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsensusFilterLimitInBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoLimitInBytes", wireType)
			}
			m.MemoLimitInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoLimitInBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaybackAddressLimitInBytes", wireType)
			}
			m.PaybackAddressLimitInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaybackAddressLimitInBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SedaPayloadLimitInBytes", wireType)
			}
			m.SedaPayloadLimitInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDrConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SedaPayloadLimitInBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDrConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDrConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDrConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDrConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDrConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDrConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDrConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDrConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDrConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDrConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDrConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDrConfig = fmt.Errorf("proto: unexpected end of group")
)
