// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sedachain/core/v1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The request message for the AddToAllowlist method.
type MsgAddToAllowlist struct {
	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	PublicKey string `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *MsgAddToAllowlist) Reset()         { *m = MsgAddToAllowlist{} }
func (m *MsgAddToAllowlist) String() string { return proto.CompactTextString(m) }
func (*MsgAddToAllowlist) ProtoMessage()    {}
func (*MsgAddToAllowlist) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0c9e88c2cee8ff0, []int{0}
}
func (m *MsgAddToAllowlist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddToAllowlist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddToAllowlist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddToAllowlist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddToAllowlist.Merge(m, src)
}
func (m *MsgAddToAllowlist) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddToAllowlist) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddToAllowlist.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddToAllowlist proto.InternalMessageInfo

func (m *MsgAddToAllowlist) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgAddToAllowlist) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

// The response message for the AddToAllowlist method.
type MsgAddToAllowlistResponse struct {
}

func (m *MsgAddToAllowlistResponse) Reset()         { *m = MsgAddToAllowlistResponse{} }
func (m *MsgAddToAllowlistResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddToAllowlistResponse) ProtoMessage()    {}
func (*MsgAddToAllowlistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0c9e88c2cee8ff0, []int{1}
}
func (m *MsgAddToAllowlistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddToAllowlistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddToAllowlistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddToAllowlistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddToAllowlistResponse.Merge(m, src)
}
func (m *MsgAddToAllowlistResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddToAllowlistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddToAllowlistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddToAllowlistResponse proto.InternalMessageInfo

// The request message for the Stake method.
type MsgStake struct {
	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	PublicKey string `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Memo      string `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
	// Proof is hex-encoded proof of the identity.
	Proof string     `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	Stake types.Coin `protobuf:"bytes,5,opt,name=stake,proto3" json:"stake"`
}

func (m *MsgStake) Reset()         { *m = MsgStake{} }
func (m *MsgStake) String() string { return proto.CompactTextString(m) }
func (*MsgStake) ProtoMessage()    {}
func (*MsgStake) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0c9e88c2cee8ff0, []int{2}
}
func (m *MsgStake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStake.Merge(m, src)
}
func (m *MsgStake) XXX_Size() int {
	return m.Size()
}
func (m *MsgStake) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStake.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStake proto.InternalMessageInfo

func (m *MsgStake) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgStake) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *MsgStake) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *MsgStake) GetProof() string {
	if m != nil {
		return m.Proof
	}
	return ""
}

func (m *MsgStake) GetStake() types.Coin {
	if m != nil {
		return m.Stake
	}
	return types.Coin{}
}

// The response message for the Stake method.
type MsgStakeResponse struct {
}

func (m *MsgStakeResponse) Reset()         { *m = MsgStakeResponse{} }
func (m *MsgStakeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStakeResponse) ProtoMessage()    {}
func (*MsgStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0c9e88c2cee8ff0, []int{3}
}
func (m *MsgStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStakeResponse.Merge(m, src)
}
func (m *MsgStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStakeResponse proto.InternalMessageInfo

// The request message for the PostDataRequest method.
type MsgPostDataRequest struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// Funds attached to the data request posting.
	Funds   types.Coin `protobuf:"bytes,2,opt,name=funds,proto3" json:"funds"`
	Version string     `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Hex-encoded ID (hash) of the execution program.
	ExecProgramId string `protobuf:"bytes,4,opt,name=exec_program_id,json=execProgramId,proto3" json:"exec_program_id,omitempty"`
	ExecInputs    []byte `protobuf:"bytes,5,opt,name=exec_inputs,json=execInputs,proto3" json:"exec_inputs,omitempty"`
	ExecGasLimit  uint64 `protobuf:"varint,6,opt,name=exec_gas_limit,json=execGasLimit,proto3" json:"exec_gas_limit,omitempty"`
	// Hex-encoded ID (hash) of the tally program.
	TallyProgramId    string                `protobuf:"bytes,7,opt,name=tally_program_id,json=tallyProgramId,proto3" json:"tally_program_id,omitempty"`
	TallyInputs       []byte                `protobuf:"bytes,8,opt,name=tally_inputs,json=tallyInputs,proto3" json:"tally_inputs,omitempty"`
	TallyGasLimit     uint64                `protobuf:"varint,9,opt,name=tally_gas_limit,json=tallyGasLimit,proto3" json:"tally_gas_limit,omitempty"`
	ReplicationFactor uint32                `protobuf:"varint,10,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
	ConsensusFilter   []byte                `protobuf:"bytes,11,opt,name=consensus_filter,json=consensusFilter,proto3" json:"consensus_filter,omitempty"`
	GasPrice          cosmossdk_io_math.Int `protobuf:"bytes,12,opt,name=gas_price,json=gasPrice,proto3,customtype=cosmossdk.io/math.Int" json:"gas_price"`
	Memo              []byte                `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo,omitempty"`
	SedaPayload       []byte                `protobuf:"bytes,14,opt,name=seda_payload,json=sedaPayload,proto3" json:"seda_payload,omitempty"`
	PaybackAddress    []byte                `protobuf:"bytes,15,opt,name=payback_address,json=paybackAddress,proto3" json:"payback_address,omitempty"`
}

func (m *MsgPostDataRequest) Reset()         { *m = MsgPostDataRequest{} }
func (m *MsgPostDataRequest) String() string { return proto.CompactTextString(m) }
func (*MsgPostDataRequest) ProtoMessage()    {}
func (*MsgPostDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0c9e88c2cee8ff0, []int{4}
}
func (m *MsgPostDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostDataRequest.Merge(m, src)
}
func (m *MsgPostDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostDataRequest proto.InternalMessageInfo

func (m *MsgPostDataRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgPostDataRequest) GetFunds() types.Coin {
	if m != nil {
		return m.Funds
	}
	return types.Coin{}
}

func (m *MsgPostDataRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *MsgPostDataRequest) GetExecProgramId() string {
	if m != nil {
		return m.ExecProgramId
	}
	return ""
}

func (m *MsgPostDataRequest) GetExecInputs() []byte {
	if m != nil {
		return m.ExecInputs
	}
	return nil
}

func (m *MsgPostDataRequest) GetExecGasLimit() uint64 {
	if m != nil {
		return m.ExecGasLimit
	}
	return 0
}

func (m *MsgPostDataRequest) GetTallyProgramId() string {
	if m != nil {
		return m.TallyProgramId
	}
	return ""
}

func (m *MsgPostDataRequest) GetTallyInputs() []byte {
	if m != nil {
		return m.TallyInputs
	}
	return nil
}

func (m *MsgPostDataRequest) GetTallyGasLimit() uint64 {
	if m != nil {
		return m.TallyGasLimit
	}
	return 0
}

func (m *MsgPostDataRequest) GetReplicationFactor() uint32 {
	if m != nil {
		return m.ReplicationFactor
	}
	return 0
}

func (m *MsgPostDataRequest) GetConsensusFilter() []byte {
	if m != nil {
		return m.ConsensusFilter
	}
	return nil
}

func (m *MsgPostDataRequest) GetMemo() []byte {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *MsgPostDataRequest) GetSedaPayload() []byte {
	if m != nil {
		return m.SedaPayload
	}
	return nil
}

func (m *MsgPostDataRequest) GetPaybackAddress() []byte {
	if m != nil {
		return m.PaybackAddress
	}
	return nil
}

// The response message for the PostDataRequest method.
type MsgPostDataRequestResponse struct {
	// DrId is the hex-encoded ID of the data request.
	DrId string `protobuf:"bytes,1,opt,name=dr_id,json=drId,proto3" json:"dr_id,omitempty"`
	// Height is the block height at which the data request was posted.
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *MsgPostDataRequestResponse) Reset()         { *m = MsgPostDataRequestResponse{} }
func (m *MsgPostDataRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPostDataRequestResponse) ProtoMessage()    {}
func (*MsgPostDataRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0c9e88c2cee8ff0, []int{5}
}
func (m *MsgPostDataRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostDataRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostDataRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostDataRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostDataRequestResponse.Merge(m, src)
}
func (m *MsgPostDataRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostDataRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostDataRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostDataRequestResponse proto.InternalMessageInfo

func (m *MsgPostDataRequestResponse) GetDrId() string {
	if m != nil {
		return m.DrId
	}
	return ""
}

func (m *MsgPostDataRequestResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// The request message for the Commit method.
type MsgCommit struct {
	Sender     string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	DrId       string `protobuf:"bytes,2,opt,name=dr_id,json=drId,proto3" json:"dr_id,omitempty"`
	Commitment string `protobuf:"bytes,3,opt,name=commitment,proto3" json:"commitment,omitempty"`
	PublicKey  string `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Proof      string `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *MsgCommit) Reset()         { *m = MsgCommit{} }
func (m *MsgCommit) String() string { return proto.CompactTextString(m) }
func (*MsgCommit) ProtoMessage()    {}
func (*MsgCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0c9e88c2cee8ff0, []int{6}
}
func (m *MsgCommit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCommit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCommit.Merge(m, src)
}
func (m *MsgCommit) XXX_Size() int {
	return m.Size()
}
func (m *MsgCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCommit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCommit proto.InternalMessageInfo

func (m *MsgCommit) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCommit) GetDrId() string {
	if m != nil {
		return m.DrId
	}
	return ""
}

func (m *MsgCommit) GetCommitment() string {
	if m != nil {
		return m.Commitment
	}
	return ""
}

func (m *MsgCommit) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *MsgCommit) GetProof() string {
	if m != nil {
		return m.Proof
	}
	return ""
}

// The response message for the Commit method.
type MsgCommitResponse struct {
}

func (m *MsgCommitResponse) Reset()         { *m = MsgCommitResponse{} }
func (m *MsgCommitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCommitResponse) ProtoMessage()    {}
func (*MsgCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0c9e88c2cee8ff0, []int{7}
}
func (m *MsgCommitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCommitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCommitResponse.Merge(m, src)
}
func (m *MsgCommitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCommitResponse proto.InternalMessageInfo

// The request message for the Reveal method.
type MsgReveal struct {
	Sender     string      `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	RevealBody *RevealBody `protobuf:"bytes,2,opt,name=reveal_body,json=revealBody,proto3" json:"reveal_body,omitempty"`
	PublicKey  string      `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Proof      string      `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	Stderr     []string    `protobuf:"bytes,5,rep,name=stderr,proto3" json:"stderr,omitempty"`
	Stdout     []string    `protobuf:"bytes,6,rep,name=stdout,proto3" json:"stdout,omitempty"`
}

func (m *MsgReveal) Reset()         { *m = MsgReveal{} }
func (m *MsgReveal) String() string { return proto.CompactTextString(m) }
func (*MsgReveal) ProtoMessage()    {}
func (*MsgReveal) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0c9e88c2cee8ff0, []int{8}
}
func (m *MsgReveal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReveal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReveal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReveal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReveal.Merge(m, src)
}
func (m *MsgReveal) XXX_Size() int {
	return m.Size()
}
func (m *MsgReveal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReveal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReveal proto.InternalMessageInfo

func (m *MsgReveal) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgReveal) GetRevealBody() *RevealBody {
	if m != nil {
		return m.RevealBody
	}
	return nil
}

func (m *MsgReveal) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *MsgReveal) GetProof() string {
	if m != nil {
		return m.Proof
	}
	return ""
}

func (m *MsgReveal) GetStderr() []string {
	if m != nil {
		return m.Stderr
	}
	return nil
}

func (m *MsgReveal) GetStdout() []string {
	if m != nil {
		return m.Stdout
	}
	return nil
}

// The response message for the Reveal method.
type MsgRevealResponse struct {
}

func (m *MsgRevealResponse) Reset()         { *m = MsgRevealResponse{} }
func (m *MsgRevealResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRevealResponse) ProtoMessage()    {}
func (*MsgRevealResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0c9e88c2cee8ff0, []int{9}
}
func (m *MsgRevealResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevealResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevealResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevealResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevealResponse.Merge(m, src)
}
func (m *MsgRevealResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevealResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevealResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevealResponse proto.InternalMessageInfo

// The request message for the UpdateParams method.
type MsgUpdateParams struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Params    Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0c9e88c2cee8ff0, []int{10}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// The response message for the UpdateParams method.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0c9e88c2cee8ff0, []int{11}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAddToAllowlist)(nil), "sedachain.core.v1.MsgAddToAllowlist")
	proto.RegisterType((*MsgAddToAllowlistResponse)(nil), "sedachain.core.v1.MsgAddToAllowlistResponse")
	proto.RegisterType((*MsgStake)(nil), "sedachain.core.v1.MsgStake")
	proto.RegisterType((*MsgStakeResponse)(nil), "sedachain.core.v1.MsgStakeResponse")
	proto.RegisterType((*MsgPostDataRequest)(nil), "sedachain.core.v1.MsgPostDataRequest")
	proto.RegisterType((*MsgPostDataRequestResponse)(nil), "sedachain.core.v1.MsgPostDataRequestResponse")
	proto.RegisterType((*MsgCommit)(nil), "sedachain.core.v1.MsgCommit")
	proto.RegisterType((*MsgCommitResponse)(nil), "sedachain.core.v1.MsgCommitResponse")
	proto.RegisterType((*MsgReveal)(nil), "sedachain.core.v1.MsgReveal")
	proto.RegisterType((*MsgRevealResponse)(nil), "sedachain.core.v1.MsgRevealResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "sedachain.core.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "sedachain.core.v1.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("sedachain/core/v1/tx.proto", fileDescriptor_d0c9e88c2cee8ff0) }

var fileDescriptor_d0c9e88c2cee8ff0 = []byte{
	// 1057 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x6e, 0xdb, 0xc6,
	0x13, 0x36, 0x63, 0x49, 0xb1, 0x46, 0xb2, 0x64, 0x6f, 0xfc, 0x4b, 0x68, 0x25, 0x91, 0x1d, 0xfd,
	0xdc, 0x54, 0x35, 0x6a, 0x32, 0x4e, 0x81, 0x16, 0xf0, 0xa1, 0x80, 0x9d, 0x22, 0x85, 0xd0, 0x08,
	0x10, 0x98, 0xf6, 0xd2, 0x43, 0x85, 0x15, 0xb9, 0xa6, 0x08, 0x93, 0x5c, 0x86, 0xbb, 0x72, 0xad,
	0x5b, 0xd1, 0x27, 0x28, 0x7a, 0xe8, 0x03, 0xf4, 0xd4, 0x63, 0x0e, 0x7e, 0x88, 0x9c, 0x8a, 0x20,
	0xa7, 0xa2, 0x87, 0xa0, 0xb0, 0x0f, 0x39, 0xf6, 0x15, 0x8a, 0xfd, 0x23, 0x5a, 0xff, 0x9c, 0xb8,
	0x41, 0x2f, 0x82, 0xf6, 0x9b, 0x6f, 0xe7, 0x9b, 0x99, 0x9d, 0xd9, 0x25, 0xd4, 0x18, 0xf1, 0xb0,
	0xdb, 0xc7, 0x41, 0x6c, 0xbb, 0x34, 0x25, 0xf6, 0xf1, 0xae, 0xcd, 0x4f, 0xac, 0x24, 0xa5, 0x9c,
	0xa2, 0xd5, 0xcc, 0x66, 0x09, 0x9b, 0x75, 0xbc, 0x5b, 0x5b, 0xf3, 0xa9, 0x4f, 0xa5, 0xd5, 0x16,
	0xff, 0x14, 0xb1, 0xb6, 0x8a, 0xa3, 0x20, 0xa6, 0xb6, 0xfc, 0xd5, 0xd0, 0xba, 0x4b, 0x59, 0x44,
	0x59, 0x57, 0x71, 0xd5, 0x42, 0x9b, 0x6e, 0xa9, 0x95, 0x1d, 0x31, 0x5f, 0xc8, 0x45, 0xcc, 0xd7,
	0x86, 0xba, 0x36, 0xf4, 0x30, 0x13, 0x81, 0xf4, 0x08, 0xc7, 0xbb, 0xb6, 0x4b, 0x83, 0x58, 0xdb,
	0xef, 0xcc, 0xc6, 0x2a, 0xe3, 0x92, 0xd6, 0xc6, 0x33, 0x58, 0x6d, 0x33, 0x7f, 0xdf, 0xf3, 0xbe,
	0xa6, 0xfb, 0x61, 0x48, 0xbf, 0x0f, 0x03, 0xc6, 0xd1, 0x03, 0x28, 0x30, 0x12, 0x7b, 0x24, 0x35,
	0x8d, 0x4d, 0xa3, 0x59, 0x3c, 0x30, 0x5f, 0x9d, 0xee, 0xac, 0xe9, 0x68, 0xf6, 0x3d, 0x2f, 0x25,
	0x8c, 0x3d, 0xe5, 0x69, 0x10, 0xfb, 0x8e, 0xe6, 0xa1, 0xbb, 0x00, 0xc9, 0xa0, 0x17, 0x06, 0x6e,
	0xf7, 0x88, 0x0c, 0xcd, 0x6b, 0x62, 0x97, 0x53, 0x54, 0xc8, 0x57, 0x64, 0xb8, 0x57, 0xfa, 0xf1,
	0xcd, 0xf3, 0x6d, 0xcd, 0x6d, 0xdc, 0x86, 0xf5, 0x19, 0x49, 0x87, 0xb0, 0x84, 0xc6, 0x8c, 0x34,
	0x7e, 0x37, 0x60, 0xa9, 0xcd, 0xfc, 0xa7, 0x1c, 0x1f, 0x91, 0xff, 0x3c, 0x0e, 0x84, 0x20, 0x17,
	0x91, 0x88, 0x9a, 0x8b, 0xd2, 0x20, 0xff, 0xa3, 0x35, 0xc8, 0x27, 0x29, 0xa5, 0x87, 0x66, 0x4e,
	0x82, 0x6a, 0x81, 0xf6, 0x20, 0xcf, 0x44, 0x0c, 0x66, 0x7e, 0xd3, 0x68, 0x96, 0x1e, 0xae, 0x5b,
	0x5a, 0x56, 0x54, 0xd9, 0xd2, 0x55, 0xb6, 0x1e, 0xd1, 0x20, 0x3e, 0x28, 0xbe, 0x78, 0xbd, 0xb1,
	0xf0, 0xdb, 0x9b, 0xe7, 0xdb, 0x86, 0xa3, 0xb6, 0x4c, 0x66, 0x8b, 0x60, 0x65, 0x94, 0x4f, 0x96,
	0xe4, 0x2f, 0x79, 0x40, 0x6d, 0xe6, 0x77, 0x28, 0xe3, 0x5f, 0x60, 0x8e, 0x1d, 0xf2, 0x6c, 0x40,
	0xde, 0xab, 0xec, 0x7b, 0x90, 0x3f, 0x1c, 0xc4, 0x1e, 0x93, 0x99, 0x5e, 0x39, 0x4a, 0xb9, 0x05,
	0x99, 0x70, 0xfd, 0x98, 0xa4, 0x2c, 0xa0, 0xb1, 0x2e, 0xc7, 0x68, 0x89, 0xee, 0x43, 0x95, 0x9c,
	0x10, 0x57, 0x74, 0xa1, 0x9f, 0xe2, 0xa8, 0x1b, 0x78, 0xba, 0x36, 0xcb, 0x02, 0xee, 0x28, 0xb4,
	0xe5, 0xa1, 0x0d, 0x28, 0x49, 0x5e, 0x10, 0x27, 0x03, 0xce, 0x64, 0xa5, 0xca, 0x0e, 0x08, 0xa8,
	0x25, 0x11, 0xb4, 0x05, 0x15, 0x49, 0xf0, 0x31, 0xeb, 0x86, 0x41, 0x14, 0x70, 0xb3, 0xb0, 0x69,
	0x34, 0x73, 0x4e, 0x59, 0xa0, 0x5f, 0x62, 0xf6, 0x44, 0x60, 0xa8, 0x09, 0x2b, 0x1c, 0x87, 0xe1,
	0x70, 0x5c, 0xef, 0xba, 0xd4, 0xab, 0x48, 0xfc, 0x42, 0xf0, 0x1e, 0x94, 0x15, 0x53, 0x2b, 0x2e,
	0x49, 0xc5, 0x92, 0xc4, 0xb4, 0xe4, 0x7d, 0xa8, 0x2a, 0xca, 0x85, 0x66, 0x51, 0x6a, 0x2e, 0x4b,
	0x38, 0x13, 0xdd, 0x01, 0x94, 0x92, 0x24, 0x0c, 0x5c, 0xcc, 0x03, 0x1a, 0x77, 0x0f, 0xb1, 0xcb,
	0x69, 0x6a, 0xc2, 0xa6, 0xd1, 0x5c, 0x76, 0x56, 0xc7, 0x2c, 0x8f, 0xa5, 0x01, 0x7d, 0x04, 0x2b,
	0xae, 0x38, 0xba, 0x98, 0x0d, 0x58, 0xf7, 0x30, 0x08, 0x39, 0x49, 0xcd, 0x92, 0x54, 0xaf, 0x66,
	0xf8, 0x63, 0x09, 0xa3, 0x36, 0x14, 0x85, 0x76, 0x92, 0x06, 0x2e, 0x31, 0xcb, 0xf2, 0x20, 0x1f,
	0x88, 0xe2, 0xff, 0xf9, 0x7a, 0xe3, 0x7f, 0xea, 0x78, 0x98, 0x77, 0x64, 0x05, 0xd4, 0x8e, 0x30,
	0xef, 0x5b, 0xad, 0x98, 0xbf, 0x3a, 0xdd, 0x01, 0x7d, 0x6e, 0xad, 0x98, 0xab, 0x33, 0x5a, 0xf2,
	0x31, 0xeb, 0x08, 0x0f, 0x59, 0xcb, 0x2e, 0x4b, 0x35, 0xd5, 0xb2, 0xf7, 0xa0, 0x2c, 0x86, 0xba,
	0x9b, 0xe0, 0x61, 0x48, 0xb1, 0x67, 0x56, 0x54, 0x1d, 0x04, 0xd6, 0x51, 0x10, 0xfa, 0x10, 0xaa,
	0x09, 0x1e, 0xf6, 0xb0, 0x7b, 0xd4, 0xc5, 0xaa, 0x75, 0xcc, 0xaa, 0x64, 0x55, 0x34, 0xac, 0x1b,
	0x6a, 0xb2, 0x59, 0x5b, 0x50, 0x9b, 0xed, 0xcb, 0x51, 0xdb, 0xa2, 0x1b, 0x90, 0xf7, 0x52, 0x71,
	0x3a, 0x86, 0x1a, 0x1f, 0x2f, 0x6d, 0x79, 0xe8, 0x26, 0x14, 0xfa, 0x24, 0xf0, 0xfb, 0x5c, 0xf6,
	0x60, 0xce, 0xd1, 0xab, 0xc6, 0xa9, 0x01, 0xc5, 0x36, 0xf3, 0x1f, 0xd1, 0x48, 0x94, 0xfb, 0xdf,
	0xb7, 0x76, 0x26, 0x76, 0x6d, 0x4c, 0xac, 0x0e, 0xe0, 0x4a, 0x87, 0x11, 0x89, 0xb9, 0x6e, 0xdb,
	0x31, 0x64, 0x6a, 0xfc, 0x73, 0xd3, 0xe3, 0x9f, 0x8d, 0x7a, 0x7e, 0x6c, 0xd4, 0x27, 0x2b, 0x70,
	0x43, 0xde, 0x87, 0x2a, 0xea, 0x6c, 0x5e, 0xff, 0x56, 0xb9, 0x38, 0xe4, 0x98, 0xe0, 0xf0, 0x3d,
	0x72, 0xf9, 0x1c, 0x4a, 0xa9, 0xdc, 0xdb, 0xed, 0x51, 0x6f, 0xa8, 0x87, 0xf5, 0xae, 0x35, 0xf3,
	0x50, 0x58, 0x4a, 0xe1, 0x80, 0x7a, 0x43, 0x07, 0xd2, 0xec, 0xff, 0x54, 0x5a, 0x8b, 0x97, 0xa6,
	0x35, 0x71, 0x83, 0xdd, 0x84, 0x02, 0xe3, 0x1e, 0x49, 0x53, 0x33, 0xbf, 0xb9, 0xd8, 0x2c, 0x3a,
	0x7a, 0xa5, 0x71, 0x3a, 0x10, 0xc3, 0x38, 0xc2, 0xe9, 0x80, 0xcf, 0x2b, 0x83, 0x0a, 0x27, 0x2b,
	0xc3, 0xcf, 0x06, 0x54, 0xdb, 0xcc, 0xff, 0x26, 0xf1, 0x30, 0x27, 0x1d, 0x9c, 0xe2, 0x88, 0xa1,
	0x4f, 0xa1, 0x88, 0x07, 0xbc, 0x4f, 0xd3, 0x80, 0x0f, 0xdf, 0x59, 0x8f, 0x0b, 0x2a, 0xfa, 0x0c,
	0x0a, 0x89, 0xf4, 0x90, 0x5d, 0x5d, 0xb3, 0xd5, 0x50, 0x12, 0x07, 0x39, 0x31, 0x3d, 0x8e, 0xa6,
	0xef, 0x55, 0x44, 0x98, 0x17, 0x8e, 0x1a, 0xeb, 0x70, 0x6b, 0x2a, 0xa6, 0x51, 0xbc, 0x0f, 0x7f,
	0xcd, 0xc1, 0x62, 0x9b, 0xf9, 0xc8, 0x83, 0xca, 0xd4, 0x03, 0xb7, 0x35, 0x47, 0x6d, 0xe6, 0x4d,
	0xaa, 0x7d, 0x7c, 0x15, 0x56, 0x36, 0x1d, 0x2d, 0xc8, 0xab, 0x57, 0xeb, 0xf6, 0xfc, 0x6d, 0xd2,
	0x58, 0xfb, 0xff, 0x5b, 0x8c, 0x99, 0x2b, 0x1f, 0xaa, 0xd3, 0x6f, 0xc3, 0x07, 0xf3, 0xf7, 0x4d,
	0xd1, 0x6a, 0x3b, 0x57, 0xa2, 0x65, 0x42, 0x4f, 0xa0, 0xa0, 0x07, 0xf4, 0xce, 0xfc, 0x8d, 0xca,
	0x5a, 0xdb, 0x7a, 0x9b, 0x75, 0xdc, 0x9b, 0x1e, 0x91, 0x4b, 0xbc, 0x29, 0xeb, 0x65, 0xde, 0x26,
	0xbb, 0x0d, 0x7d, 0x07, 0xe5, 0x89, 0x4e, 0x6b, 0xcc, 0xdf, 0x35, 0xce, 0xa9, 0x6d, 0xbf, 0x9b,
	0x33, 0xf2, 0x5f, 0xcb, 0xff, 0x20, 0x6e, 0xda, 0x83, 0xd6, 0x8b, 0xb3, 0xba, 0xf1, 0xf2, 0xac,
	0x6e, 0xfc, 0x75, 0x56, 0x37, 0x7e, 0x3a, 0xaf, 0x2f, 0xbc, 0x3c, 0xaf, 0x2f, 0xfc, 0x71, 0x5e,
	0x5f, 0xf8, 0xd6, 0xf6, 0x03, 0xde, 0x1f, 0xf4, 0x2c, 0x97, 0x46, 0xb6, 0x70, 0x2b, 0x3f, 0x98,
	0x5c, 0x1a, 0xca, 0xc5, 0x8e, 0xfa, 0xa2, 0x3a, 0x51, 0xdf, 0x54, 0x7c, 0x98, 0x10, 0xd6, 0x2b,
	0x48, 0xc6, 0x27, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xde, 0xce, 0x7e, 0x7b, 0x1e, 0x0a, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// AddToAllowlist adds a new address to the allowlist.
	AddToAllowlist(ctx context.Context, in *MsgAddToAllowlist, opts ...grpc.CallOption) (*MsgAddToAllowlistResponse, error)
	// Stake adds a stake to the executor identity.
	Stake(ctx context.Context, in *MsgStake, opts ...grpc.CallOption) (*MsgStakeResponse, error)
	// PostDataRequest posts a data request.
	PostDataRequest(ctx context.Context, in *MsgPostDataRequest, opts ...grpc.CallOption) (*MsgPostDataRequestResponse, error)
	// Commit makes a commitment to reveal a data result.
	Commit(ctx context.Context, in *MsgCommit, opts ...grpc.CallOption) (*MsgCommitResponse, error)
	// Reveal reveals a data result.
	Reveal(ctx context.Context, in *MsgReveal, opts ...grpc.CallOption) (*MsgRevealResponse, error)
	// UpdateParams updates the module's parameters.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddToAllowlist(ctx context.Context, in *MsgAddToAllowlist, opts ...grpc.CallOption) (*MsgAddToAllowlistResponse, error) {
	out := new(MsgAddToAllowlistResponse)
	err := c.cc.Invoke(ctx, "/sedachain.core.v1.Msg/AddToAllowlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Stake(ctx context.Context, in *MsgStake, opts ...grpc.CallOption) (*MsgStakeResponse, error) {
	out := new(MsgStakeResponse)
	err := c.cc.Invoke(ctx, "/sedachain.core.v1.Msg/Stake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PostDataRequest(ctx context.Context, in *MsgPostDataRequest, opts ...grpc.CallOption) (*MsgPostDataRequestResponse, error) {
	out := new(MsgPostDataRequestResponse)
	err := c.cc.Invoke(ctx, "/sedachain.core.v1.Msg/PostDataRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Commit(ctx context.Context, in *MsgCommit, opts ...grpc.CallOption) (*MsgCommitResponse, error) {
	out := new(MsgCommitResponse)
	err := c.cc.Invoke(ctx, "/sedachain.core.v1.Msg/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Reveal(ctx context.Context, in *MsgReveal, opts ...grpc.CallOption) (*MsgRevealResponse, error) {
	out := new(MsgRevealResponse)
	err := c.cc.Invoke(ctx, "/sedachain.core.v1.Msg/Reveal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/sedachain.core.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// AddToAllowlist adds a new address to the allowlist.
	AddToAllowlist(context.Context, *MsgAddToAllowlist) (*MsgAddToAllowlistResponse, error)
	// Stake adds a stake to the executor identity.
	Stake(context.Context, *MsgStake) (*MsgStakeResponse, error)
	// PostDataRequest posts a data request.
	PostDataRequest(context.Context, *MsgPostDataRequest) (*MsgPostDataRequestResponse, error)
	// Commit makes a commitment to reveal a data result.
	Commit(context.Context, *MsgCommit) (*MsgCommitResponse, error)
	// Reveal reveals a data result.
	Reveal(context.Context, *MsgReveal) (*MsgRevealResponse, error)
	// UpdateParams updates the module's parameters.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddToAllowlist(ctx context.Context, req *MsgAddToAllowlist) (*MsgAddToAllowlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToAllowlist not implemented")
}
func (*UnimplementedMsgServer) Stake(ctx context.Context, req *MsgStake) (*MsgStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stake not implemented")
}
func (*UnimplementedMsgServer) PostDataRequest(ctx context.Context, req *MsgPostDataRequest) (*MsgPostDataRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDataRequest not implemented")
}
func (*UnimplementedMsgServer) Commit(ctx context.Context, req *MsgCommit) (*MsgCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (*UnimplementedMsgServer) Reveal(ctx context.Context, req *MsgReveal) (*MsgRevealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reveal not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddToAllowlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddToAllowlist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddToAllowlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.core.v1.Msg/AddToAllowlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddToAllowlist(ctx, req.(*MsgAddToAllowlist))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Stake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Stake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.core.v1.Msg/Stake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Stake(ctx, req.(*MsgStake))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PostDataRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPostDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PostDataRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.core.v1.Msg/PostDataRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PostDataRequest(ctx, req.(*MsgPostDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCommit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.core.v1.Msg/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Commit(ctx, req.(*MsgCommit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Reveal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReveal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Reveal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.core.v1.Msg/Reveal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Reveal(ctx, req.(*MsgReveal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.core.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sedachain.core.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToAllowlist",
			Handler:    _Msg_AddToAllowlist_Handler,
		},
		{
			MethodName: "Stake",
			Handler:    _Msg_Stake_Handler,
		},
		{
			MethodName: "PostDataRequest",
			Handler:    _Msg_PostDataRequest_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Msg_Commit_Handler,
		},
		{
			MethodName: "Reveal",
			Handler:    _Msg_Reveal_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sedachain/core/v1/tx.proto",
}

func (m *MsgAddToAllowlist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddToAllowlist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddToAllowlist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddToAllowlistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddToAllowlistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddToAllowlistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgStake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Stake.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPostDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaybackAddress) > 0 {
		i -= len(m.PaybackAddress)
		copy(dAtA[i:], m.PaybackAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PaybackAddress)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.SedaPayload) > 0 {
		i -= len(m.SedaPayload)
		copy(dAtA[i:], m.SedaPayload)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SedaPayload)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x6a
	}
	{
		size := m.GasPrice.Size()
		i -= size
		if _, err := m.GasPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if len(m.ConsensusFilter) > 0 {
		i -= len(m.ConsensusFilter)
		copy(dAtA[i:], m.ConsensusFilter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConsensusFilter)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ReplicationFactor != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ReplicationFactor))
		i--
		dAtA[i] = 0x50
	}
	if m.TallyGasLimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TallyGasLimit))
		i--
		dAtA[i] = 0x48
	}
	if len(m.TallyInputs) > 0 {
		i -= len(m.TallyInputs)
		copy(dAtA[i:], m.TallyInputs)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TallyInputs)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TallyProgramId) > 0 {
		i -= len(m.TallyProgramId)
		copy(dAtA[i:], m.TallyProgramId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TallyProgramId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ExecGasLimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExecGasLimit))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ExecInputs) > 0 {
		i -= len(m.ExecInputs)
		copy(dAtA[i:], m.ExecInputs)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecInputs)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExecProgramId) > 0 {
		i -= len(m.ExecProgramId)
		copy(dAtA[i:], m.ExecProgramId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecProgramId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Funds.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPostDataRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostDataRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostDataRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DrId) > 0 {
		i -= len(m.DrId)
		copy(dAtA[i:], m.DrId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DrId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Commitment) > 0 {
		i -= len(m.Commitment)
		copy(dAtA[i:], m.Commitment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Commitment)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DrId) > 0 {
		i -= len(m.DrId)
		copy(dAtA[i:], m.DrId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DrId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCommitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCommitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCommitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgReveal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReveal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReveal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stdout) > 0 {
		for iNdEx := len(m.Stdout) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Stdout[iNdEx])
			copy(dAtA[i:], m.Stdout[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Stdout[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Stderr) > 0 {
		for iNdEx := len(m.Stderr) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Stderr[iNdEx])
			copy(dAtA[i:], m.Stderr[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Stderr[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RevealBody != nil {
		{
			size, err := m.RevealBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRevealResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevealResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevealResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddToAllowlist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddToAllowlistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgStake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Stake.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPostDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Funds.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExecProgramId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExecInputs)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExecGasLimit != 0 {
		n += 1 + sovTx(uint64(m.ExecGasLimit))
	}
	l = len(m.TallyProgramId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TallyInputs)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TallyGasLimit != 0 {
		n += 1 + sovTx(uint64(m.TallyGasLimit))
	}
	if m.ReplicationFactor != 0 {
		n += 1 + sovTx(uint64(m.ReplicationFactor))
	}
	l = len(m.ConsensusFilter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.GasPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SedaPayload)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PaybackAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPostDataRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DrId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovTx(uint64(m.Height))
	}
	return n
}

func (m *MsgCommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DrId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Commitment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCommitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgReveal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RevealBody != nil {
		l = m.RevealBody.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Stderr) > 0 {
		for _, s := range m.Stderr {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Stdout) > 0 {
		for _, s := range m.Stdout {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRevealResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddToAllowlist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddToAllowlist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddToAllowlist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddToAllowlistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddToAllowlistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddToAllowlistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Funds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecInputs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecInputs = append(m.ExecInputs[:0], dAtA[iNdEx:postIndex]...)
			if m.ExecInputs == nil {
				m.ExecInputs = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecGasLimit", wireType)
			}
			m.ExecGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TallyProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TallyProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TallyInputs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TallyInputs = append(m.TallyInputs[:0], dAtA[iNdEx:postIndex]...)
			if m.TallyInputs == nil {
				m.TallyInputs = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TallyGasLimit", wireType)
			}
			m.TallyGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TallyGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationFactor", wireType)
			}
			m.ReplicationFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicationFactor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusFilter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsensusFilter = append(m.ConsensusFilter[:0], dAtA[iNdEx:postIndex]...)
			if m.ConsensusFilter == nil {
				m.ConsensusFilter = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = append(m.Memo[:0], dAtA[iNdEx:postIndex]...)
			if m.Memo == nil {
				m.Memo = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SedaPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SedaPayload = append(m.SedaPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.SedaPayload == nil {
				m.SedaPayload = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaybackAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaybackAddress = append(m.PaybackAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.PaybackAddress == nil {
				m.PaybackAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostDataRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostDataRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostDataRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCommitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReveal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReveal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReveal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RevealBody == nil {
				m.RevealBody = &RevealBody{}
			}
			if err := m.RevealBody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stderr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stderr = append(m.Stderr, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stdout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stdout = append(m.Stdout, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevealResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevealResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevealResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
