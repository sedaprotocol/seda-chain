// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sedachain/core/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The request message for Query/Owner RPC method.
type QueryOwnerRequest struct {
}

func (m *QueryOwnerRequest) Reset()         { *m = QueryOwnerRequest{} }
func (m *QueryOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOwnerRequest) ProtoMessage()    {}
func (*QueryOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{0}
}
func (m *QueryOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerRequest.Merge(m, src)
}
func (m *QueryOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerRequest proto.InternalMessageInfo

// The response message for Query/Owner RPC method.
type QueryOwnerResponse struct {
	// owner is the address of the core module owner.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryOwnerResponse) Reset()         { *m = QueryOwnerResponse{} }
func (m *QueryOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOwnerResponse) ProtoMessage()    {}
func (*QueryOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{1}
}
func (m *QueryOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerResponse.Merge(m, src)
}
func (m *QueryOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerResponse proto.InternalMessageInfo

func (m *QueryOwnerResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// The request message for Query/PendingOwner RPC method.
type QueryPendingOwnerRequest struct {
}

func (m *QueryPendingOwnerRequest) Reset()         { *m = QueryPendingOwnerRequest{} }
func (m *QueryPendingOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingOwnerRequest) ProtoMessage()    {}
func (*QueryPendingOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{2}
}
func (m *QueryPendingOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingOwnerRequest.Merge(m, src)
}
func (m *QueryPendingOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingOwnerRequest proto.InternalMessageInfo

// The response message for Query/PendingOwner RPC method.
type QueryPendingOwnerResponse struct {
	// pending_owner is the address of the core module pending owner.
	PendingOwner string `protobuf:"bytes,1,opt,name=pending_owner,json=pendingOwner,proto3" json:"pending_owner,omitempty"`
}

func (m *QueryPendingOwnerResponse) Reset()         { *m = QueryPendingOwnerResponse{} }
func (m *QueryPendingOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingOwnerResponse) ProtoMessage()    {}
func (*QueryPendingOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{3}
}
func (m *QueryPendingOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingOwnerResponse.Merge(m, src)
}
func (m *QueryPendingOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingOwnerResponse proto.InternalMessageInfo

func (m *QueryPendingOwnerResponse) GetPendingOwner() string {
	if m != nil {
		return m.PendingOwner
	}
	return ""
}

// The request message for Query/Paused RPC method.
type QueryPausedRequest struct {
}

func (m *QueryPausedRequest) Reset()         { *m = QueryPausedRequest{} }
func (m *QueryPausedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPausedRequest) ProtoMessage()    {}
func (*QueryPausedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{4}
}
func (m *QueryPausedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPausedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPausedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPausedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPausedRequest.Merge(m, src)
}
func (m *QueryPausedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPausedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPausedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPausedRequest proto.InternalMessageInfo

// The response message for Query/Paused RPC method.
type QueryPausedResponse struct {
	// paused is whether the core module is paused.
	Paused bool `protobuf:"varint,1,opt,name=paused,proto3" json:"paused,omitempty"`
}

func (m *QueryPausedResponse) Reset()         { *m = QueryPausedResponse{} }
func (m *QueryPausedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPausedResponse) ProtoMessage()    {}
func (*QueryPausedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{5}
}
func (m *QueryPausedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPausedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPausedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPausedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPausedResponse.Merge(m, src)
}
func (m *QueryPausedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPausedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPausedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPausedResponse proto.InternalMessageInfo

func (m *QueryPausedResponse) GetPaused() bool {
	if m != nil {
		return m.Paused
	}
	return false
}

// The request message for Query/Allowlist RPC method.
type QueryAllowlistRequest struct {
}

func (m *QueryAllowlistRequest) Reset()         { *m = QueryAllowlistRequest{} }
func (m *QueryAllowlistRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllowlistRequest) ProtoMessage()    {}
func (*QueryAllowlistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{6}
}
func (m *QueryAllowlistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllowlistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllowlistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllowlistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllowlistRequest.Merge(m, src)
}
func (m *QueryAllowlistRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllowlistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllowlistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllowlistRequest proto.InternalMessageInfo

// The response message for Query/Allowlist RPC method.
type QueryAllowlistResponse struct {
	// public_keys is the list of hex-encoded public keys in the allowlist.
	PublicKeys []string `protobuf:"bytes,1,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
}

func (m *QueryAllowlistResponse) Reset()         { *m = QueryAllowlistResponse{} }
func (m *QueryAllowlistResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllowlistResponse) ProtoMessage()    {}
func (*QueryAllowlistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{7}
}
func (m *QueryAllowlistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllowlistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllowlistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllowlistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllowlistResponse.Merge(m, src)
}
func (m *QueryAllowlistResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllowlistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllowlistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllowlistResponse proto.InternalMessageInfo

func (m *QueryAllowlistResponse) GetPublicKeys() []string {
	if m != nil {
		return m.PublicKeys
	}
	return nil
}

// The request message for Query/Staker RPC method.
type QueryStakerRequest struct {
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *QueryStakerRequest) Reset()         { *m = QueryStakerRequest{} }
func (m *QueryStakerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakerRequest) ProtoMessage()    {}
func (*QueryStakerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{8}
}
func (m *QueryStakerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakerRequest.Merge(m, src)
}
func (m *QueryStakerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakerRequest proto.InternalMessageInfo

func (m *QueryStakerRequest) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

// The response message for Query/Staker RPC method.
type QueryStakerResponse struct {
	Staker Staker `protobuf:"bytes,1,opt,name=staker,proto3" json:"staker"`
}

func (m *QueryStakerResponse) Reset()         { *m = QueryStakerResponse{} }
func (m *QueryStakerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakerResponse) ProtoMessage()    {}
func (*QueryStakerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{9}
}
func (m *QueryStakerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakerResponse.Merge(m, src)
}
func (m *QueryStakerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakerResponse proto.InternalMessageInfo

func (m *QueryStakerResponse) GetStaker() Staker {
	if m != nil {
		return m.Staker
	}
	return Staker{}
}

// The request message for Query/Executors RPC method.
type QueryExecutorsRequest struct {
	Limit  uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *QueryExecutorsRequest) Reset()         { *m = QueryExecutorsRequest{} }
func (m *QueryExecutorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExecutorsRequest) ProtoMessage()    {}
func (*QueryExecutorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{10}
}
func (m *QueryExecutorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExecutorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExecutorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExecutorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExecutorsRequest.Merge(m, src)
}
func (m *QueryExecutorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExecutorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExecutorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExecutorsRequest proto.InternalMessageInfo

func (m *QueryExecutorsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryExecutorsRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// The response message for Query/Executors RPC method.
type QueryExecutorsResponse struct {
	Executors []Staker `protobuf:"bytes,1,rep,name=executors,proto3" json:"executors"`
}

func (m *QueryExecutorsResponse) Reset()         { *m = QueryExecutorsResponse{} }
func (m *QueryExecutorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExecutorsResponse) ProtoMessage()    {}
func (*QueryExecutorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{11}
}
func (m *QueryExecutorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExecutorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExecutorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExecutorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExecutorsResponse.Merge(m, src)
}
func (m *QueryExecutorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExecutorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExecutorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExecutorsResponse proto.InternalMessageInfo

func (m *QueryExecutorsResponse) GetExecutors() []Staker {
	if m != nil {
		return m.Executors
	}
	return nil
}

// The request message for Query/DataRequest RPC method.
type QueryDataRequestRequest struct {
	DrId string `protobuf:"bytes,1,opt,name=dr_id,json=drId,proto3" json:"dr_id,omitempty"`
}

func (m *QueryDataRequestRequest) Reset()         { *m = QueryDataRequestRequest{} }
func (m *QueryDataRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDataRequestRequest) ProtoMessage()    {}
func (*QueryDataRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{12}
}
func (m *QueryDataRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataRequestRequest.Merge(m, src)
}
func (m *QueryDataRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataRequestRequest proto.InternalMessageInfo

func (m *QueryDataRequestRequest) GetDrId() string {
	if m != nil {
		return m.DrId
	}
	return ""
}

// The response message for Query/DataRequest RPC method.
type QueryDataRequestResponse struct {
	DataRequest DataRequest `protobuf:"bytes,1,opt,name=data_request,json=dataRequest,proto3" json:"data_request"`
}

func (m *QueryDataRequestResponse) Reset()         { *m = QueryDataRequestResponse{} }
func (m *QueryDataRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDataRequestResponse) ProtoMessage()    {}
func (*QueryDataRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{13}
}
func (m *QueryDataRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataRequestResponse.Merge(m, src)
}
func (m *QueryDataRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataRequestResponse proto.InternalMessageInfo

func (m *QueryDataRequestResponse) GetDataRequest() DataRequest {
	if m != nil {
		return m.DataRequest
	}
	return DataRequest{}
}

// The request message for Query/DataRequestsByStatus RPC method.
type QueryDataRequestsByStatusRequest struct {
	// Status specifies the status of the data requests to retrieve.
	Status DataRequestStatus `protobuf:"varint,1,opt,name=status,proto3,enum=sedachain.core.v1.DataRequestStatus" json:"status,omitempty"`
	// Limit specifies the maximum number of data requests to retrieve.
	Limit uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// LastSeenIndex, if specified, sets the starting point (exclusive) of the
	// query.
	LastSeenIndex []string `protobuf:"bytes,3,rep,name=last_seen_index,json=lastSeenIndex,proto3" json:"last_seen_index,omitempty" minItems:3,maxItems:3`
}

func (m *QueryDataRequestsByStatusRequest) Reset()         { *m = QueryDataRequestsByStatusRequest{} }
func (m *QueryDataRequestsByStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDataRequestsByStatusRequest) ProtoMessage()    {}
func (*QueryDataRequestsByStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{14}
}
func (m *QueryDataRequestsByStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataRequestsByStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataRequestsByStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataRequestsByStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataRequestsByStatusRequest.Merge(m, src)
}
func (m *QueryDataRequestsByStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataRequestsByStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataRequestsByStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataRequestsByStatusRequest proto.InternalMessageInfo

func (m *QueryDataRequestsByStatusRequest) GetStatus() DataRequestStatus {
	if m != nil {
		return m.Status
	}
	return DATA_REQUEST_STATUS_UNSPECIFIED
}

func (m *QueryDataRequestsByStatusRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryDataRequestsByStatusRequest) GetLastSeenIndex() []string {
	if m != nil {
		return m.LastSeenIndex
	}
	return nil
}

// The response message for Query/DataRequestsByStatus RPC method.
type QueryDataRequestsByStatusResponse struct {
	// DataRequests is the list of data requests under the given status.
	DataRequests []DataRequest `protobuf:"bytes,1,rep,name=data_requests,json=dataRequests,proto3" json:"data_requests"`
	// IsPaused is indicates whether the core module is paused.
	IsPaused bool `protobuf:"varint,2,opt,name=is_paused,json=isPaused,proto3" json:"is_paused,omitempty"`
	// Total is the total number of data requests under the given status.
	Total uint64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// LastSeenIndex is the index of the last data request retrieved.
	LastSeenIndex []string `protobuf:"bytes,4,rep,name=last_seen_index,json=lastSeenIndex,proto3" json:"last_seen_index,omitempty"`
}

func (m *QueryDataRequestsByStatusResponse) Reset()         { *m = QueryDataRequestsByStatusResponse{} }
func (m *QueryDataRequestsByStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDataRequestsByStatusResponse) ProtoMessage()    {}
func (*QueryDataRequestsByStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{15}
}
func (m *QueryDataRequestsByStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataRequestsByStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataRequestsByStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataRequestsByStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataRequestsByStatusResponse.Merge(m, src)
}
func (m *QueryDataRequestsByStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataRequestsByStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataRequestsByStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataRequestsByStatusResponse proto.InternalMessageInfo

func (m *QueryDataRequestsByStatusResponse) GetDataRequests() []DataRequest {
	if m != nil {
		return m.DataRequests
	}
	return nil
}

func (m *QueryDataRequestsByStatusResponse) GetIsPaused() bool {
	if m != nil {
		return m.IsPaused
	}
	return false
}

func (m *QueryDataRequestsByStatusResponse) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *QueryDataRequestsByStatusResponse) GetLastSeenIndex() []string {
	if m != nil {
		return m.LastSeenIndex
	}
	return nil
}

// The request message for Query/AccountSeq RPC method.
type QueryAccountSeqRequest struct {
	// public_key is the hex-encoded public key of the account.
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *QueryAccountSeqRequest) Reset()         { *m = QueryAccountSeqRequest{} }
func (m *QueryAccountSeqRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAccountSeqRequest) ProtoMessage()    {}
func (*QueryAccountSeqRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{16}
}
func (m *QueryAccountSeqRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountSeqRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountSeqRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountSeqRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountSeqRequest.Merge(m, src)
}
func (m *QueryAccountSeqRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountSeqRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountSeqRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountSeqRequest proto.InternalMessageInfo

func (m *QueryAccountSeqRequest) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

// QueryAccountSeqResponse is the response type for the Query/AccountSeq
// RPC method.
type QueryAccountSeqResponse struct {
	// account_seq is the account sequence number.
	AccountSeq uint64 `protobuf:"varint,1,opt,name=account_seq,json=accountSeq,proto3" json:"account_seq,omitempty"`
}

func (m *QueryAccountSeqResponse) Reset()         { *m = QueryAccountSeqResponse{} }
func (m *QueryAccountSeqResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAccountSeqResponse) ProtoMessage()    {}
func (*QueryAccountSeqResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{17}
}
func (m *QueryAccountSeqResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountSeqResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountSeqResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountSeqResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountSeqResponse.Merge(m, src)
}
func (m *QueryAccountSeqResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountSeqResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountSeqResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountSeqResponse proto.InternalMessageInfo

func (m *QueryAccountSeqResponse) GetAccountSeq() uint64 {
	if m != nil {
		return m.AccountSeq
	}
	return 0
}

// The request message for Query/IsStakerExecutor RPC method.
type QueryIsStakerExecutorRequest struct {
	// public_key is the hex-encoded public key of the account.
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *QueryIsStakerExecutorRequest) Reset()         { *m = QueryIsStakerExecutorRequest{} }
func (m *QueryIsStakerExecutorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsStakerExecutorRequest) ProtoMessage()    {}
func (*QueryIsStakerExecutorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{18}
}
func (m *QueryIsStakerExecutorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsStakerExecutorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsStakerExecutorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsStakerExecutorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsStakerExecutorRequest.Merge(m, src)
}
func (m *QueryIsStakerExecutorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsStakerExecutorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsStakerExecutorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsStakerExecutorRequest proto.InternalMessageInfo

func (m *QueryIsStakerExecutorRequest) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

// QueryIsStakerExecutorResponse is the response type for the
// Query/IsStakerExecutor RPC method.
type QueryIsStakerExecutorResponse struct {
	// is_staker_executor is whether the staker is a executor.
	IsStakerExecutor bool `protobuf:"varint,1,opt,name=is_staker_executor,json=isStakerExecutor,proto3" json:"is_staker_executor,omitempty"`
}

func (m *QueryIsStakerExecutorResponse) Reset()         { *m = QueryIsStakerExecutorResponse{} }
func (m *QueryIsStakerExecutorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsStakerExecutorResponse) ProtoMessage()    {}
func (*QueryIsStakerExecutorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{19}
}
func (m *QueryIsStakerExecutorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsStakerExecutorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsStakerExecutorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsStakerExecutorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsStakerExecutorResponse.Merge(m, src)
}
func (m *QueryIsStakerExecutorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsStakerExecutorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsStakerExecutorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsStakerExecutorResponse proto.InternalMessageInfo

func (m *QueryIsStakerExecutorResponse) GetIsStakerExecutor() bool {
	if m != nil {
		return m.IsStakerExecutor
	}
	return false
}

// The request message for Query/IsExecutorEligible RPC method.
type QueryIsExecutorEligibleRequest struct {
	// data is the base64 encoded data used to determine eligibility.
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *QueryIsExecutorEligibleRequest) Reset()         { *m = QueryIsExecutorEligibleRequest{} }
func (m *QueryIsExecutorEligibleRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsExecutorEligibleRequest) ProtoMessage()    {}
func (*QueryIsExecutorEligibleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{20}
}
func (m *QueryIsExecutorEligibleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsExecutorEligibleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsExecutorEligibleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsExecutorEligibleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsExecutorEligibleRequest.Merge(m, src)
}
func (m *QueryIsExecutorEligibleRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsExecutorEligibleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsExecutorEligibleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsExecutorEligibleRequest proto.InternalMessageInfo

func (m *QueryIsExecutorEligibleRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// QueryIsExecutorEligibleResponse is the response type for the
// Query/IsExecutorEligible RPC method.
type QueryIsExecutorEligibleResponse struct {
	// is_executor_eligible is whether the account is eligible to be an executor.
	IsExecutorEligible bool `protobuf:"varint,1,opt,name=is_executor_eligible,json=isExecutorEligible,proto3" json:"is_executor_eligible,omitempty"`
}

func (m *QueryIsExecutorEligibleResponse) Reset()         { *m = QueryIsExecutorEligibleResponse{} }
func (m *QueryIsExecutorEligibleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsExecutorEligibleResponse) ProtoMessage()    {}
func (*QueryIsExecutorEligibleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{21}
}
func (m *QueryIsExecutorEligibleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsExecutorEligibleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsExecutorEligibleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsExecutorEligibleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsExecutorEligibleResponse.Merge(m, src)
}
func (m *QueryIsExecutorEligibleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsExecutorEligibleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsExecutorEligibleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsExecutorEligibleResponse proto.InternalMessageInfo

func (m *QueryIsExecutorEligibleResponse) GetIsExecutorEligible() bool {
	if m != nil {
		return m.IsExecutorEligible
	}
	return false
}

// The request message for Query/DataRequestStatuses RPC method.
type QueryDataRequestStatusesRequest struct {
	DataRequestIds []string `protobuf:"bytes,1,rep,name=data_request_ids,json=dataRequestIds,proto3" json:"dr_ids"`
}

func (m *QueryDataRequestStatusesRequest) Reset()         { *m = QueryDataRequestStatusesRequest{} }
func (m *QueryDataRequestStatusesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDataRequestStatusesRequest) ProtoMessage()    {}
func (*QueryDataRequestStatusesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{22}
}
func (m *QueryDataRequestStatusesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataRequestStatusesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataRequestStatusesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataRequestStatusesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataRequestStatusesRequest.Merge(m, src)
}
func (m *QueryDataRequestStatusesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataRequestStatusesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataRequestStatusesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataRequestStatusesRequest proto.InternalMessageInfo

func (m *QueryDataRequestStatusesRequest) GetDataRequestIds() []string {
	if m != nil {
		return m.DataRequestIds
	}
	return nil
}

// The response message for Query/DataRequestStatuses RPC method.
type QueryDataRequestStatusesResponse struct {
	Statuses map[string]DataRequestStatus `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=sedachain.core.v1.DataRequestStatus"`
}

func (m *QueryDataRequestStatusesResponse) Reset()         { *m = QueryDataRequestStatusesResponse{} }
func (m *QueryDataRequestStatusesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDataRequestStatusesResponse) ProtoMessage()    {}
func (*QueryDataRequestStatusesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{23}
}
func (m *QueryDataRequestStatusesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataRequestStatusesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataRequestStatusesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataRequestStatusesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataRequestStatusesResponse.Merge(m, src)
}
func (m *QueryDataRequestStatusesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataRequestStatusesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataRequestStatusesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataRequestStatusesResponse proto.InternalMessageInfo

func (m *QueryDataRequestStatusesResponse) GetStatuses() map[string]DataRequestStatus {
	if m != nil {
		return m.Statuses
	}
	return nil
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{24}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// Params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{25}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// The request message for Query/StakingConfig RPC method.
type QueryStakingConfigRequest struct {
}

func (m *QueryStakingConfigRequest) Reset()         { *m = QueryStakingConfigRequest{} }
func (m *QueryStakingConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakingConfigRequest) ProtoMessage()    {}
func (*QueryStakingConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{26}
}
func (m *QueryStakingConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakingConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakingConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakingConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakingConfigRequest.Merge(m, src)
}
func (m *QueryStakingConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakingConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakingConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakingConfigRequest proto.InternalMessageInfo

// The response message for Query/StakingConfig RPC method.
type QueryStakingConfigResponse struct {
	StakingConfig StakingConfig `protobuf:"bytes,1,opt,name=staking_config,json=stakingConfig,proto3" json:"staking_config"`
}

func (m *QueryStakingConfigResponse) Reset()         { *m = QueryStakingConfigResponse{} }
func (m *QueryStakingConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakingConfigResponse) ProtoMessage()    {}
func (*QueryStakingConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{27}
}
func (m *QueryStakingConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakingConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakingConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakingConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakingConfigResponse.Merge(m, src)
}
func (m *QueryStakingConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakingConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakingConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakingConfigResponse proto.InternalMessageInfo

func (m *QueryStakingConfigResponse) GetStakingConfig() StakingConfig {
	if m != nil {
		return m.StakingConfig
	}
	return StakingConfig{}
}

// The request message for Query/DataRequestConfig RPC method.
type QueryDataRequestConfigRequest struct {
}

func (m *QueryDataRequestConfigRequest) Reset()         { *m = QueryDataRequestConfigRequest{} }
func (m *QueryDataRequestConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDataRequestConfigRequest) ProtoMessage()    {}
func (*QueryDataRequestConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{28}
}
func (m *QueryDataRequestConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataRequestConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataRequestConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataRequestConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataRequestConfigRequest.Merge(m, src)
}
func (m *QueryDataRequestConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataRequestConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataRequestConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataRequestConfigRequest proto.InternalMessageInfo

// The response message for Query/DataRequestConfig RPC method.
type QueryDataRequestConfigResponse struct {
	DataRequestConfig DataRequestConfig `protobuf:"bytes,1,opt,name=data_request_config,json=dataRequestConfig,proto3" json:"data_request_config"`
}

func (m *QueryDataRequestConfigResponse) Reset()         { *m = QueryDataRequestConfigResponse{} }
func (m *QueryDataRequestConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDataRequestConfigResponse) ProtoMessage()    {}
func (*QueryDataRequestConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d8090940a863ab0, []int{29}
}
func (m *QueryDataRequestConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataRequestConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataRequestConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataRequestConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataRequestConfigResponse.Merge(m, src)
}
func (m *QueryDataRequestConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataRequestConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataRequestConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataRequestConfigResponse proto.InternalMessageInfo

func (m *QueryDataRequestConfigResponse) GetDataRequestConfig() DataRequestConfig {
	if m != nil {
		return m.DataRequestConfig
	}
	return DataRequestConfig{}
}

func init() {
	proto.RegisterType((*QueryOwnerRequest)(nil), "sedachain.core.v1.QueryOwnerRequest")
	proto.RegisterType((*QueryOwnerResponse)(nil), "sedachain.core.v1.QueryOwnerResponse")
	proto.RegisterType((*QueryPendingOwnerRequest)(nil), "sedachain.core.v1.QueryPendingOwnerRequest")
	proto.RegisterType((*QueryPendingOwnerResponse)(nil), "sedachain.core.v1.QueryPendingOwnerResponse")
	proto.RegisterType((*QueryPausedRequest)(nil), "sedachain.core.v1.QueryPausedRequest")
	proto.RegisterType((*QueryPausedResponse)(nil), "sedachain.core.v1.QueryPausedResponse")
	proto.RegisterType((*QueryAllowlistRequest)(nil), "sedachain.core.v1.QueryAllowlistRequest")
	proto.RegisterType((*QueryAllowlistResponse)(nil), "sedachain.core.v1.QueryAllowlistResponse")
	proto.RegisterType((*QueryStakerRequest)(nil), "sedachain.core.v1.QueryStakerRequest")
	proto.RegisterType((*QueryStakerResponse)(nil), "sedachain.core.v1.QueryStakerResponse")
	proto.RegisterType((*QueryExecutorsRequest)(nil), "sedachain.core.v1.QueryExecutorsRequest")
	proto.RegisterType((*QueryExecutorsResponse)(nil), "sedachain.core.v1.QueryExecutorsResponse")
	proto.RegisterType((*QueryDataRequestRequest)(nil), "sedachain.core.v1.QueryDataRequestRequest")
	proto.RegisterType((*QueryDataRequestResponse)(nil), "sedachain.core.v1.QueryDataRequestResponse")
	proto.RegisterType((*QueryDataRequestsByStatusRequest)(nil), "sedachain.core.v1.QueryDataRequestsByStatusRequest")
	proto.RegisterType((*QueryDataRequestsByStatusResponse)(nil), "sedachain.core.v1.QueryDataRequestsByStatusResponse")
	proto.RegisterType((*QueryAccountSeqRequest)(nil), "sedachain.core.v1.QueryAccountSeqRequest")
	proto.RegisterType((*QueryAccountSeqResponse)(nil), "sedachain.core.v1.QueryAccountSeqResponse")
	proto.RegisterType((*QueryIsStakerExecutorRequest)(nil), "sedachain.core.v1.QueryIsStakerExecutorRequest")
	proto.RegisterType((*QueryIsStakerExecutorResponse)(nil), "sedachain.core.v1.QueryIsStakerExecutorResponse")
	proto.RegisterType((*QueryIsExecutorEligibleRequest)(nil), "sedachain.core.v1.QueryIsExecutorEligibleRequest")
	proto.RegisterType((*QueryIsExecutorEligibleResponse)(nil), "sedachain.core.v1.QueryIsExecutorEligibleResponse")
	proto.RegisterType((*QueryDataRequestStatusesRequest)(nil), "sedachain.core.v1.QueryDataRequestStatusesRequest")
	proto.RegisterType((*QueryDataRequestStatusesResponse)(nil), "sedachain.core.v1.QueryDataRequestStatusesResponse")
	proto.RegisterMapType((map[string]DataRequestStatus)(nil), "sedachain.core.v1.QueryDataRequestStatusesResponse.StatusesEntry")
	proto.RegisterType((*QueryParamsRequest)(nil), "sedachain.core.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "sedachain.core.v1.QueryParamsResponse")
	proto.RegisterType((*QueryStakingConfigRequest)(nil), "sedachain.core.v1.QueryStakingConfigRequest")
	proto.RegisterType((*QueryStakingConfigResponse)(nil), "sedachain.core.v1.QueryStakingConfigResponse")
	proto.RegisterType((*QueryDataRequestConfigRequest)(nil), "sedachain.core.v1.QueryDataRequestConfigRequest")
	proto.RegisterType((*QueryDataRequestConfigResponse)(nil), "sedachain.core.v1.QueryDataRequestConfigResponse")
}

func init() { proto.RegisterFile("sedachain/core/v1/query.proto", fileDescriptor_0d8090940a863ab0) }

var fileDescriptor_0d8090940a863ab0 = []byte{
	// 1459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x98, 0xcb, 0x6f, 0xdb, 0xc6,
	0x13, 0xc7, 0x4d, 0xbf, 0x10, 0x8f, 0xed, 0xfc, 0xec, 0xb5, 0x93, 0xc8, 0x4c, 0x22, 0x39, 0x44,
	0xe2, 0xbc, 0x6c, 0xd1, 0x2f, 0x20, 0x89, 0x7f, 0xcd, 0xc1, 0x6e, 0x8c, 0x42, 0x28, 0xd2, 0xa6,
	0xf2, 0x21, 0x40, 0x80, 0x82, 0xa0, 0xc5, 0x8d, 0xb2, 0x88, 0x44, 0xca, 0xda, 0x55, 0x62, 0xc3,
	0xf5, 0xa5, 0x68, 0xef, 0x2d, 0x8a, 0xf4, 0x4f, 0xe8, 0xb5, 0x28, 0xd0, 0x4b, 0x81, 0x5e, 0x7a,
	0x4b, 0x6f, 0x41, 0x7b, 0xe9, 0x29, 0x28, 0x92, 0x9c, 0x7a, 0xec, 0xa1, 0xe7, 0x82, 0xbb, 0xc3,
	0x97, 0x28, 0xca, 0x74, 0x4f, 0x16, 0x67, 0xe7, 0xf1, 0xe1, 0x70, 0x76, 0xf7, 0x0b, 0xc3, 0x45,
	0x4e, 0x1d, 0xbb, 0xf6, 0xc4, 0x66, 0xae, 0x59, 0xf3, 0xda, 0xd4, 0x7c, 0xb6, 0x62, 0xee, 0x75,
	0x68, 0xfb, 0xa0, 0xdc, 0x6a, 0x7b, 0xc2, 0x23, 0xd3, 0xe1, 0x72, 0xd9, 0x5f, 0x2e, 0x3f, 0x5b,
	0xd1, 0xe7, 0x6a, 0x1e, 0x6f, 0x7a, 0xdc, 0x92, 0x0e, 0xa6, 0x7a, 0x50, 0xde, 0xfa, 0x85, 0xba,
	0xe7, 0xd5, 0x1b, 0xd4, 0xb4, 0x5b, 0xcc, 0xb4, 0x5d, 0xd7, 0x13, 0xb6, 0x60, 0x9e, 0x1b, 0xac,
	0xce, 0xd6, 0xbd, 0xba, 0xa7, 0xa2, 0xfc, 0x5f, 0x41, 0x4c, 0x1a, 0x40, 0x56, 0x92, 0xab, 0xc6,
	0x0c, 0x4c, 0x7f, 0xe2, 0xe3, 0x7c, 0xfc, 0xdc, 0xa5, 0xed, 0x2a, 0xdd, 0xeb, 0x50, 0x2e, 0x8c,
	0x7b, 0x40, 0xe2, 0x46, 0xde, 0xf2, 0x5c, 0x4e, 0x49, 0x19, 0x46, 0x3c, 0xdf, 0x50, 0xd0, 0xe6,
	0xb5, 0x6b, 0x63, 0x5b, 0x85, 0xdf, 0x7e, 0x5c, 0x9a, 0x45, 0xba, 0x4d, 0xc7, 0x69, 0x53, 0xce,
	0x77, 0x44, 0x9b, 0xb9, 0xf5, 0xaa, 0x72, 0x33, 0x74, 0x28, 0xc8, 0x2c, 0x0f, 0xa8, 0xeb, 0x30,
	0xb7, 0x9e, 0xa8, 0xf0, 0x08, 0xe6, 0x7a, 0xac, 0x61, 0xa1, 0xbb, 0x30, 0xd9, 0x52, 0x76, 0x2b,
	0x5f, 0xc1, 0x89, 0x56, 0x2c, 0x8d, 0x31, 0x8b, 0xf4, 0x0f, 0xec, 0x0e, 0xa7, 0x4e, 0x50, 0x71,
	0x09, 0x66, 0x12, 0x56, 0xac, 0x75, 0x16, 0x46, 0x5b, 0xd2, 0x22, 0x8b, 0x9c, 0xaa, 0xe2, 0x93,
	0x71, 0x0e, 0xce, 0x48, 0xf7, 0xcd, 0x46, 0xc3, 0x7b, 0xde, 0x60, 0x5c, 0x04, 0x79, 0xee, 0xc0,
	0xd9, 0xee, 0x05, 0x4c, 0x55, 0x82, 0xf1, 0x56, 0x67, 0xb7, 0xc1, 0x6a, 0xd6, 0x53, 0x7a, 0xc0,
	0x0b, 0xda, 0xfc, 0xd0, 0xb5, 0xb1, 0x2a, 0x28, 0xd3, 0x87, 0xf4, 0x80, 0x1b, 0x6b, 0x08, 0xb6,
	0x23, 0xec, 0xa7, 0x61, 0x2b, 0xc8, 0x45, 0x80, 0x28, 0x4c, 0xbd, 0x6a, 0x75, 0x2c, 0x8c, 0x32,
	0x3e, 0x42, 0xee, 0x20, 0x08, 0x8b, 0xdd, 0x82, 0x51, 0x2e, 0x2d, 0x32, 0x62, 0x7c, 0x75, 0xae,
	0x9c, 0x1a, 0xa4, 0xb2, 0x0a, 0xd9, 0x1a, 0x7e, 0xf9, 0xba, 0x34, 0x50, 0x45, 0x77, 0x63, 0x1b,
	0x5f, 0x6c, 0x7b, 0x9f, 0xd6, 0x3a, 0xc2, 0x6b, 0xf3, 0x80, 0x63, 0x16, 0x46, 0x1a, 0xac, 0xc9,
	0x84, 0x4c, 0x38, 0x59, 0x55, 0x0f, 0x7e, 0x7f, 0xbc, 0xc7, 0x8f, 0x39, 0x15, 0x85, 0x41, 0x69,
	0xc6, 0x27, 0xe3, 0x21, 0xb6, 0x21, 0x96, 0x26, 0xfc, 0x7a, 0x63, 0x34, 0x30, 0xca, 0x26, 0xe4,
	0x80, 0x8b, 0x22, 0x8c, 0x32, 0x9c, 0x93, 0x89, 0xef, 0xd9, 0xc2, 0x46, 0xb4, 0x80, 0x70, 0x06,
	0x46, 0x9c, 0xb6, 0xc5, 0x1c, 0x6c, 0xd2, 0xb0, 0xd3, 0xae, 0x38, 0x46, 0x0d, 0xa7, 0x2c, 0xe1,
	0x8f, 0x28, 0x1f, 0xc0, 0x84, 0x63, 0x0b, 0xdb, 0x6a, 0x2b, 0x3b, 0xb6, 0xaa, 0xd8, 0x83, 0x26,
	0x16, 0x8d, 0x48, 0xe3, 0x4e, 0x64, 0x32, 0x7e, 0xd2, 0x60, 0xbe, 0xbb, 0x0a, 0xdf, 0xf2, 0xbf,
	0x89, 0xe8, 0x84, 0x0d, 0x7c, 0x4f, 0x7e, 0x12, 0xd1, 0xe1, 0xb2, 0xce, 0xe9, 0xd5, 0xcb, 0xfd,
	0xeb, 0x60, 0x30, 0xc6, 0x44, 0xed, 0xf7, 0xfb, 0x3c, 0x1c, 0xb4, 0x7f, 0x13, 0xfe, 0xd7, 0xb0,
	0xb9, 0xb0, 0x38, 0xa5, 0xae, 0xc5, 0x5c, 0x87, 0xee, 0x17, 0x86, 0xfc, 0xb9, 0xda, 0x9a, 0xfb,
	0xfb, 0x75, 0xe9, 0x4c, 0x93, 0xb9, 0x15, 0x41, 0x9b, 0x7c, 0x63, 0x6d, 0xb1, 0x69, 0xef, 0xe3,
	0xcf, 0xea, 0xa4, 0x1f, 0xb1, 0x43, 0xa9, 0x5b, 0xf1, 0xfd, 0x8d, 0x5f, 0x35, 0xb8, 0xd4, 0x87,
	0x1d, 0x5b, 0x55, 0x81, 0xc9, 0x78, 0xab, 0x82, 0x2f, 0x97, 0xaf, 0x57, 0x13, 0xb1, 0x5e, 0x71,
	0x72, 0x1e, 0xc6, 0x18, 0xb7, 0x70, 0x57, 0x0d, 0xca, 0x5d, 0x75, 0x8a, 0x71, 0xb5, 0xef, 0xfc,
	0xd7, 0x14, 0x9e, 0xb0, 0x1b, 0x85, 0x21, 0xf5, 0x9a, 0xf2, 0x81, 0x2c, 0xa4, 0x5f, 0x73, 0x58,
	0x6e, 0x9f, 0xae, 0x77, 0xb9, 0x15, 0x6c, 0xbe, 0x5a, 0xcd, 0xeb, 0xb8, 0x62, 0x87, 0xee, 0xe5,
	0xdc, 0x45, 0x1b, 0x38, 0x55, 0xf1, 0xc0, 0x68, 0xdb, 0xda, 0xca, 0x6a, 0x71, 0xba, 0x27, 0x43,
	0x87, 0xab, 0x60, 0x87, 0x8e, 0xc6, 0x5d, 0xb8, 0x20, 0x63, 0x2b, 0x5c, 0xcd, 0x6c, 0x30, 0xf2,
	0x39, 0x4b, 0xdf, 0x87, 0x8b, 0x19, 0xe1, 0x08, 0xb0, 0x08, 0x84, 0x71, 0x4b, 0x6d, 0x4f, 0x2b,
	0xd8, 0x08, 0x78, 0x1c, 0x4d, 0xb1, 0xae, 0x28, 0x63, 0x1d, 0x8a, 0x98, 0x2e, 0x30, 0x6d, 0x37,
	0x58, 0x9d, 0xed, 0x36, 0x68, 0xc0, 0x43, 0x60, 0xd8, 0xff, 0x1e, 0xe1, 0x2e, 0xb1, 0x85, 0x6d,
	0xec, 0x40, 0x29, 0x33, 0x0a, 0x31, 0x96, 0x61, 0x96, 0xf1, 0xb0, 0xbe, 0x45, 0x71, 0x1d, 0x41,
	0x08, 0x4b, 0x45, 0x1a, 0x0f, 0x31, 0x69, 0x6a, 0xa8, 0x69, 0xb8, 0x27, 0xd6, 0x61, 0x2a, 0x3e,
	0x56, 0x16, 0x73, 0xf0, 0x60, 0xdc, 0x82, 0xbf, 0x5e, 0x97, 0x46, 0xe5, 0x76, 0xe6, 0xd5, 0xd3,
	0xb1, 0xf9, 0xa9, 0x38, 0xdc, 0x78, 0xd7, 0x63, 0xbb, 0x45, 0x99, 0x91, 0xf7, 0x53, 0x38, 0xc5,
	0xd1, 0x86, 0xc3, 0xba, 0xd9, 0x63, 0x58, 0x8f, 0x4b, 0x53, 0x0e, 0x0c, 0xdb, 0xae, 0x68, 0x1f,
	0x54, 0xc3, 0x94, 0xba, 0x0d, 0x93, 0x89, 0x25, 0x32, 0x05, 0x43, 0xd1, 0xf7, 0xf5, 0x7f, 0x92,
	0x0d, 0x18, 0x79, 0x66, 0x37, 0x3a, 0x54, 0x0e, 0x79, 0xde, 0xfd, 0xae, 0x42, 0x36, 0x06, 0x6f,
	0x6b, 0xb1, 0x8b, 0xaa, 0x6d, 0x37, 0x83, 0x96, 0x85, 0x07, 0x7e, 0x60, 0x8d, 0x0e, 0xfc, 0x96,
	0xb4, 0xf4, 0x39, 0xf0, 0x55, 0x48, 0x70, 0xe0, 0x2b, 0x77, 0xe3, 0x3c, 0x5e, 0xb5, 0xfe, 0x1c,
	0x31, 0xb7, 0xfe, 0xbe, 0xe7, 0x3e, 0x66, 0xf5, 0xa0, 0xd8, 0x53, 0xd0, 0x7b, 0x2d, 0x62, 0xcd,
	0xfb, 0x70, 0x9a, 0xab, 0x05, 0xab, 0x26, 0x57, 0xb0, 0xf6, 0x7c, 0xc6, 0x79, 0x1e, 0x66, 0x40,
	0x84, 0x49, 0x1e, 0x37, 0x1a, 0x25, 0xdc, 0x09, 0xb1, 0xa6, 0x24, 0x69, 0x3e, 0xc3, 0xd9, 0xee,
	0xe1, 0x80, 0x44, 0x8f, 0x60, 0x26, 0x31, 0x4f, 0x09, 0xac, 0x63, 0x3e, 0x40, 0x02, 0x6d, 0xda,
	0xe9, 0x5e, 0x58, 0xfd, 0x67, 0x1a, 0x46, 0x64, 0x79, 0x22, 0x60, 0x44, 0x4a, 0x09, 0x72, 0x39,
	0x6b, 0xa2, 0xe2, 0x62, 0x46, 0xbf, 0x72, 0x8c, 0x97, 0x62, 0x37, 0x8a, 0x9f, 0xff, 0xfe, 0xee,
	0x9b, 0xc1, 0x02, 0x39, 0x6b, 0xfa, 0xee, 0x4b, 0x31, 0x49, 0x26, 0x55, 0x0e, 0xf9, 0x5a, 0x83,
	0x89, 0xb8, 0x1e, 0x22, 0x37, 0xb3, 0xf2, 0xf6, 0x50, 0x54, 0xfa, 0x62, 0x3e, 0x67, 0x64, 0x59,
	0x90, 0x2c, 0xf3, 0xa4, 0x98, 0x62, 0x49, 0x28, 0x2f, 0xb2, 0x0f, 0xa3, 0x78, 0x70, 0x67, 0xbe,
	0x64, 0x42, 0x66, 0xe9, 0x0b, 0xc7, 0xb9, 0x21, 0x40, 0x49, 0x02, 0xcc, 0x91, 0x73, 0x69, 0x00,
	0x55, 0xef, 0x0b, 0x0d, 0xc6, 0x42, 0x8d, 0x45, 0xae, 0x65, 0xa5, 0xed, 0xd6, 0x67, 0xfa, 0xf5,
	0x1c, 0x9e, 0xc8, 0x60, 0x48, 0x86, 0x0b, 0x44, 0x4f, 0x31, 0xd8, 0x61, 0xe1, 0x2f, 0x35, 0x18,
	0x55, 0x27, 0x70, 0x76, 0x07, 0x12, 0x7a, 0x2e, 0xbb, 0x03, 0x49, 0x05, 0x67, 0x2c, 0xca, 0xea,
	0x0b, 0xe4, 0x72, 0xaa, 0xba, 0xba, 0x0a, 0xcc, 0xc3, 0xe8, 0x56, 0x39, 0x92, 0xed, 0x08, 0xb5,
	0x56, 0x76, 0x3b, 0xba, 0x55, 0x5d, 0x76, 0x3b, 0x52, 0xc2, 0xad, 0x4f, 0x3b, 0x42, 0x75, 0x46,
	0x5e, 0x68, 0x30, 0x1e, 0xdb, 0x52, 0xe4, 0x46, 0x8e, 0x23, 0x37, 0x40, 0xb9, 0x99, 0xcb, 0x17,
	0x61, 0x96, 0x24, 0xcc, 0x55, 0x72, 0x25, 0x05, 0x13, 0xdf, 0xff, 0xe6, 0xa1, 0xbc, 0x41, 0x8e,
	0xc8, 0xcf, 0x1a, 0xcc, 0xf6, 0xd2, 0x37, 0x64, 0x2d, 0x47, 0xd1, 0x6e, 0x25, 0xa7, 0xaf, 0x9f,
	0x2c, 0x08, 0x91, 0xef, 0x48, 0xe4, 0x35, 0xb2, 0xd2, 0x17, 0x99, 0x5b, 0xbb, 0x07, 0x96, 0xba,
	0x65, 0xcc, 0x43, 0xf5, 0xf7, 0x88, 0x7c, 0xab, 0x01, 0x44, 0xd2, 0x84, 0x64, 0xcf, 0x70, 0xb7,
	0xee, 0xd1, 0x6f, 0xe4, 0x71, 0x45, 0xc0, 0x15, 0x09, 0x78, 0x93, 0x5c, 0x4f, 0xcf, 0x7b, 0x24,
	0x80, 0x92, 0x63, 0xf7, 0xbd, 0x06, 0x53, 0xdd, 0xc2, 0x85, 0x98, 0x59, 0x35, 0x33, 0x14, 0x92,
	0xbe, 0x9c, 0x3f, 0x00, 0x51, 0x6f, 0x4b, 0xd4, 0x55, 0xb2, 0x9c, 0x42, 0x4d, 0x4b, 0xa5, 0x24,
	0xf1, 0x0f, 0x1a, 0x90, 0xb4, 0xca, 0x21, 0x2b, 0xd9, 0x08, 0x19, 0x3a, 0x4a, 0x5f, 0x3d, 0x49,
	0x08, 0x72, 0xaf, 0x4b, 0xee, 0x32, 0x59, 0xec, 0xc5, 0x9d, 0xd2, 0x56, 0xe6, 0xa1, 0x3f, 0x19,
	0x47, 0xe4, 0x17, 0x0d, 0x66, 0x7a, 0x68, 0x14, 0xb2, 0x7a, 0x22, 0x41, 0xa3, 0xa8, 0xd7, 0xfe,
	0x83, 0x08, 0x32, 0x36, 0x25, 0xf6, 0xff, 0xc9, 0x9d, 0xbe, 0xa3, 0x6b, 0x05, 0xe2, 0x48, 0x71,
	0xc7, 0x45, 0xdd, 0x91, 0xba, 0x29, 0x7c, 0xc1, 0xd1, 0xef, 0xa6, 0x88, 0xe9, 0x9c, 0x7e, 0x37,
	0x45, 0x5c, 0xf8, 0xf4, 0xbd, 0x29, 0x64, 0xbd, 0x17, 0x9a, 0x94, 0x6a, 0x91, 0xd0, 0x20, 0x8b,
	0xfd, 0x8e, 0xe0, 0x6e, 0x0d, 0xa4, 0x2f, 0xe5, 0xf4, 0x46, 0x9e, 0xab, 0x92, 0xe7, 0x12, 0x29,
	0xf5, 0x3c, 0xb7, 0x23, 0xad, 0x44, 0xbe, 0xd3, 0x60, 0x3a, 0x25, 0x3f, 0xc8, 0x72, 0x8e, 0xef,
	0x93, 0xe4, 0x5b, 0x39, 0x41, 0xc4, 0xb1, 0x77, 0x4b, 0x0f, 0xf5, 0xb4, 0x55, 0x79, 0xf9, 0xa6,
	0xa8, 0xbd, 0x7a, 0x53, 0xd4, 0xfe, 0x7c, 0x53, 0xd4, 0xbe, 0x7a, 0x5b, 0x1c, 0x78, 0xf5, 0xb6,
	0x38, 0xf0, 0xc7, 0xdb, 0xe2, 0xc0, 0x23, 0xb3, 0xce, 0xc4, 0x93, 0xce, 0x6e, 0xb9, 0xe6, 0x35,
	0x65, 0x26, 0xf9, 0x3f, 0xa3, 0x9a, 0xd7, 0x88, 0xa7, 0xdd, 0x57, 0x89, 0xc5, 0x41, 0x8b, 0xf2,
	0xdd, 0x51, 0xe9, 0xb1, 0xf6, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x1b, 0x82, 0xe1, 0xf6,
	0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Owner returns the owner of the core module.
	Owner(ctx context.Context, in *QueryOwnerRequest, opts ...grpc.CallOption) (*QueryOwnerResponse, error)
	// PendingOwner returns the pending owner of the core module.
	PendingOwner(ctx context.Context, in *QueryPendingOwnerRequest, opts ...grpc.CallOption) (*QueryPendingOwnerResponse, error)
	// Paused returns whether the core module is paused.
	Paused(ctx context.Context, in *QueryPausedRequest, opts ...grpc.CallOption) (*QueryPausedResponse, error)
	// Allowlist returns the allowlist of staker public keys.
	Allowlist(ctx context.Context, in *QueryAllowlistRequest, opts ...grpc.CallOption) (*QueryAllowlistResponse, error)
	// Staker returns the staker given its public key.
	Staker(ctx context.Context, in *QueryStakerRequest, opts ...grpc.CallOption) (*QueryStakerResponse, error)
	// Executors returns stakers that are eligible to execute data requests.
	Executors(ctx context.Context, in *QueryExecutorsRequest, opts ...grpc.CallOption) (*QueryExecutorsResponse, error)
	// DataRequest returns the data request given its ID.
	DataRequest(ctx context.Context, in *QueryDataRequestRequest, opts ...grpc.CallOption) (*QueryDataRequestResponse, error)
	// DataRequestsByStatus returns data requests by status.
	DataRequestsByStatus(ctx context.Context, in *QueryDataRequestsByStatusRequest, opts ...grpc.CallOption) (*QueryDataRequestsByStatusResponse, error)
	// AccountSeq returns the account sequence number for a given public key.
	AccountSeq(ctx context.Context, in *QueryAccountSeqRequest, opts ...grpc.CallOption) (*QueryAccountSeqResponse, error)
	// IsStakerExecutor returns whether the staker is a executor.
	IsStakerExecutor(ctx context.Context, in *QueryIsStakerExecutorRequest, opts ...grpc.CallOption) (*QueryIsStakerExecutorResponse, error)
	// IsExecutorEligible returns whether the account is eligible to be an
	// executor.
	IsExecutorEligible(ctx context.Context, in *QueryIsExecutorEligibleRequest, opts ...grpc.CallOption) (*QueryIsExecutorEligibleResponse, error)
	// DataRequestStatuses returns the statuses of data requests given their IDs.
	DataRequestStatuses(ctx context.Context, in *QueryDataRequestStatusesRequest, opts ...grpc.CallOption) (*QueryDataRequestStatusesResponse, error)
	// Params returns the total set of core parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// StakingConfig returns the staking parameters of the core module.
	StakingConfig(ctx context.Context, in *QueryStakingConfigRequest, opts ...grpc.CallOption) (*QueryStakingConfigResponse, error)
	// DataRequestConfig returns the data request parameters of the core module.
	DataRequestConfig(ctx context.Context, in *QueryDataRequestConfigRequest, opts ...grpc.CallOption) (*QueryDataRequestConfigResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Owner(ctx context.Context, in *QueryOwnerRequest, opts ...grpc.CallOption) (*QueryOwnerResponse, error) {
	out := new(QueryOwnerResponse)
	err := c.cc.Invoke(ctx, "/sedachain.core.v1.Query/Owner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingOwner(ctx context.Context, in *QueryPendingOwnerRequest, opts ...grpc.CallOption) (*QueryPendingOwnerResponse, error) {
	out := new(QueryPendingOwnerResponse)
	err := c.cc.Invoke(ctx, "/sedachain.core.v1.Query/PendingOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Paused(ctx context.Context, in *QueryPausedRequest, opts ...grpc.CallOption) (*QueryPausedResponse, error) {
	out := new(QueryPausedResponse)
	err := c.cc.Invoke(ctx, "/sedachain.core.v1.Query/Paused", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Allowlist(ctx context.Context, in *QueryAllowlistRequest, opts ...grpc.CallOption) (*QueryAllowlistResponse, error) {
	out := new(QueryAllowlistResponse)
	err := c.cc.Invoke(ctx, "/sedachain.core.v1.Query/Allowlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Staker(ctx context.Context, in *QueryStakerRequest, opts ...grpc.CallOption) (*QueryStakerResponse, error) {
	out := new(QueryStakerResponse)
	err := c.cc.Invoke(ctx, "/sedachain.core.v1.Query/Staker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Executors(ctx context.Context, in *QueryExecutorsRequest, opts ...grpc.CallOption) (*QueryExecutorsResponse, error) {
	out := new(QueryExecutorsResponse)
	err := c.cc.Invoke(ctx, "/sedachain.core.v1.Query/Executors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataRequest(ctx context.Context, in *QueryDataRequestRequest, opts ...grpc.CallOption) (*QueryDataRequestResponse, error) {
	out := new(QueryDataRequestResponse)
	err := c.cc.Invoke(ctx, "/sedachain.core.v1.Query/DataRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataRequestsByStatus(ctx context.Context, in *QueryDataRequestsByStatusRequest, opts ...grpc.CallOption) (*QueryDataRequestsByStatusResponse, error) {
	out := new(QueryDataRequestsByStatusResponse)
	err := c.cc.Invoke(ctx, "/sedachain.core.v1.Query/DataRequestsByStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountSeq(ctx context.Context, in *QueryAccountSeqRequest, opts ...grpc.CallOption) (*QueryAccountSeqResponse, error) {
	out := new(QueryAccountSeqResponse)
	err := c.cc.Invoke(ctx, "/sedachain.core.v1.Query/AccountSeq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsStakerExecutor(ctx context.Context, in *QueryIsStakerExecutorRequest, opts ...grpc.CallOption) (*QueryIsStakerExecutorResponse, error) {
	out := new(QueryIsStakerExecutorResponse)
	err := c.cc.Invoke(ctx, "/sedachain.core.v1.Query/IsStakerExecutor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsExecutorEligible(ctx context.Context, in *QueryIsExecutorEligibleRequest, opts ...grpc.CallOption) (*QueryIsExecutorEligibleResponse, error) {
	out := new(QueryIsExecutorEligibleResponse)
	err := c.cc.Invoke(ctx, "/sedachain.core.v1.Query/IsExecutorEligible", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataRequestStatuses(ctx context.Context, in *QueryDataRequestStatusesRequest, opts ...grpc.CallOption) (*QueryDataRequestStatusesResponse, error) {
	out := new(QueryDataRequestStatusesResponse)
	err := c.cc.Invoke(ctx, "/sedachain.core.v1.Query/DataRequestStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/sedachain.core.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakingConfig(ctx context.Context, in *QueryStakingConfigRequest, opts ...grpc.CallOption) (*QueryStakingConfigResponse, error) {
	out := new(QueryStakingConfigResponse)
	err := c.cc.Invoke(ctx, "/sedachain.core.v1.Query/StakingConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataRequestConfig(ctx context.Context, in *QueryDataRequestConfigRequest, opts ...grpc.CallOption) (*QueryDataRequestConfigResponse, error) {
	out := new(QueryDataRequestConfigResponse)
	err := c.cc.Invoke(ctx, "/sedachain.core.v1.Query/DataRequestConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Owner returns the owner of the core module.
	Owner(context.Context, *QueryOwnerRequest) (*QueryOwnerResponse, error)
	// PendingOwner returns the pending owner of the core module.
	PendingOwner(context.Context, *QueryPendingOwnerRequest) (*QueryPendingOwnerResponse, error)
	// Paused returns whether the core module is paused.
	Paused(context.Context, *QueryPausedRequest) (*QueryPausedResponse, error)
	// Allowlist returns the allowlist of staker public keys.
	Allowlist(context.Context, *QueryAllowlistRequest) (*QueryAllowlistResponse, error)
	// Staker returns the staker given its public key.
	Staker(context.Context, *QueryStakerRequest) (*QueryStakerResponse, error)
	// Executors returns stakers that are eligible to execute data requests.
	Executors(context.Context, *QueryExecutorsRequest) (*QueryExecutorsResponse, error)
	// DataRequest returns the data request given its ID.
	DataRequest(context.Context, *QueryDataRequestRequest) (*QueryDataRequestResponse, error)
	// DataRequestsByStatus returns data requests by status.
	DataRequestsByStatus(context.Context, *QueryDataRequestsByStatusRequest) (*QueryDataRequestsByStatusResponse, error)
	// AccountSeq returns the account sequence number for a given public key.
	AccountSeq(context.Context, *QueryAccountSeqRequest) (*QueryAccountSeqResponse, error)
	// IsStakerExecutor returns whether the staker is a executor.
	IsStakerExecutor(context.Context, *QueryIsStakerExecutorRequest) (*QueryIsStakerExecutorResponse, error)
	// IsExecutorEligible returns whether the account is eligible to be an
	// executor.
	IsExecutorEligible(context.Context, *QueryIsExecutorEligibleRequest) (*QueryIsExecutorEligibleResponse, error)
	// DataRequestStatuses returns the statuses of data requests given their IDs.
	DataRequestStatuses(context.Context, *QueryDataRequestStatusesRequest) (*QueryDataRequestStatusesResponse, error)
	// Params returns the total set of core parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// StakingConfig returns the staking parameters of the core module.
	StakingConfig(context.Context, *QueryStakingConfigRequest) (*QueryStakingConfigResponse, error)
	// DataRequestConfig returns the data request parameters of the core module.
	DataRequestConfig(context.Context, *QueryDataRequestConfigRequest) (*QueryDataRequestConfigResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Owner(ctx context.Context, req *QueryOwnerRequest) (*QueryOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Owner not implemented")
}
func (*UnimplementedQueryServer) PendingOwner(ctx context.Context, req *QueryPendingOwnerRequest) (*QueryPendingOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingOwner not implemented")
}
func (*UnimplementedQueryServer) Paused(ctx context.Context, req *QueryPausedRequest) (*QueryPausedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paused not implemented")
}
func (*UnimplementedQueryServer) Allowlist(ctx context.Context, req *QueryAllowlistRequest) (*QueryAllowlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allowlist not implemented")
}
func (*UnimplementedQueryServer) Staker(ctx context.Context, req *QueryStakerRequest) (*QueryStakerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Staker not implemented")
}
func (*UnimplementedQueryServer) Executors(ctx context.Context, req *QueryExecutorsRequest) (*QueryExecutorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Executors not implemented")
}
func (*UnimplementedQueryServer) DataRequest(ctx context.Context, req *QueryDataRequestRequest) (*QueryDataRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataRequest not implemented")
}
func (*UnimplementedQueryServer) DataRequestsByStatus(ctx context.Context, req *QueryDataRequestsByStatusRequest) (*QueryDataRequestsByStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataRequestsByStatus not implemented")
}
func (*UnimplementedQueryServer) AccountSeq(ctx context.Context, req *QueryAccountSeqRequest) (*QueryAccountSeqResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSeq not implemented")
}
func (*UnimplementedQueryServer) IsStakerExecutor(ctx context.Context, req *QueryIsStakerExecutorRequest) (*QueryIsStakerExecutorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsStakerExecutor not implemented")
}
func (*UnimplementedQueryServer) IsExecutorEligible(ctx context.Context, req *QueryIsExecutorEligibleRequest) (*QueryIsExecutorEligibleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExecutorEligible not implemented")
}
func (*UnimplementedQueryServer) DataRequestStatuses(ctx context.Context, req *QueryDataRequestStatusesRequest) (*QueryDataRequestStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataRequestStatuses not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) StakingConfig(ctx context.Context, req *QueryStakingConfigRequest) (*QueryStakingConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakingConfig not implemented")
}
func (*UnimplementedQueryServer) DataRequestConfig(ctx context.Context, req *QueryDataRequestConfigRequest) (*QueryDataRequestConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataRequestConfig not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Owner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Owner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.core.v1.Query/Owner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Owner(ctx, req.(*QueryOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.core.v1.Query/PendingOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingOwner(ctx, req.(*QueryPendingOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Paused_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPausedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Paused(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.core.v1.Query/Paused",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Paused(ctx, req.(*QueryPausedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Allowlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllowlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Allowlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.core.v1.Query/Allowlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Allowlist(ctx, req.(*QueryAllowlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Staker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Staker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.core.v1.Query/Staker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Staker(ctx, req.(*QueryStakerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Executors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExecutorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Executors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.core.v1.Query/Executors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Executors(ctx, req.(*QueryExecutorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.core.v1.Query/DataRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataRequest(ctx, req.(*QueryDataRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataRequestsByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataRequestsByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataRequestsByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.core.v1.Query/DataRequestsByStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataRequestsByStatus(ctx, req.(*QueryDataRequestsByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountSeq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountSeqRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountSeq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.core.v1.Query/AccountSeq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountSeq(ctx, req.(*QueryAccountSeqRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsStakerExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsStakerExecutorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsStakerExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.core.v1.Query/IsStakerExecutor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsStakerExecutor(ctx, req.(*QueryIsStakerExecutorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsExecutorEligible_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsExecutorEligibleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsExecutorEligible(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.core.v1.Query/IsExecutorEligible",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsExecutorEligible(ctx, req.(*QueryIsExecutorEligibleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataRequestStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataRequestStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataRequestStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.core.v1.Query/DataRequestStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataRequestStatuses(ctx, req.(*QueryDataRequestStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.core.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakingConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.core.v1.Query/StakingConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakingConfig(ctx, req.(*QueryStakingConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataRequestConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataRequestConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataRequestConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.core.v1.Query/DataRequestConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataRequestConfig(ctx, req.(*QueryDataRequestConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sedachain.core.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Owner",
			Handler:    _Query_Owner_Handler,
		},
		{
			MethodName: "PendingOwner",
			Handler:    _Query_PendingOwner_Handler,
		},
		{
			MethodName: "Paused",
			Handler:    _Query_Paused_Handler,
		},
		{
			MethodName: "Allowlist",
			Handler:    _Query_Allowlist_Handler,
		},
		{
			MethodName: "Staker",
			Handler:    _Query_Staker_Handler,
		},
		{
			MethodName: "Executors",
			Handler:    _Query_Executors_Handler,
		},
		{
			MethodName: "DataRequest",
			Handler:    _Query_DataRequest_Handler,
		},
		{
			MethodName: "DataRequestsByStatus",
			Handler:    _Query_DataRequestsByStatus_Handler,
		},
		{
			MethodName: "AccountSeq",
			Handler:    _Query_AccountSeq_Handler,
		},
		{
			MethodName: "IsStakerExecutor",
			Handler:    _Query_IsStakerExecutor_Handler,
		},
		{
			MethodName: "IsExecutorEligible",
			Handler:    _Query_IsExecutorEligible_Handler,
		},
		{
			MethodName: "DataRequestStatuses",
			Handler:    _Query_DataRequestStatuses_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "StakingConfig",
			Handler:    _Query_StakingConfig_Handler,
		},
		{
			MethodName: "DataRequestConfig",
			Handler:    _Query_DataRequestConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sedachain/core/v1/query.proto",
}

func (m *QueryOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPendingOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingOwner) > 0 {
		i -= len(m.PendingOwner)
		copy(dAtA[i:], m.PendingOwner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PendingOwner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPausedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPausedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPausedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPausedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPausedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPausedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Paused {
		i--
		if m.Paused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllowlistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllowlistRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllowlistRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllowlistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllowlistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllowlistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKeys) > 0 {
		for iNdEx := len(m.PublicKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PublicKeys[iNdEx])
			copy(dAtA[i:], m.PublicKeys[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.PublicKeys[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Staker.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryExecutorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExecutorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExecutorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryExecutorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExecutorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExecutorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Executors) > 0 {
		for iNdEx := len(m.Executors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Executors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DrId) > 0 {
		i -= len(m.DrId)
		copy(dAtA[i:], m.DrId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DrId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DataRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDataRequestsByStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataRequestsByStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataRequestsByStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastSeenIndex) > 0 {
		for iNdEx := len(m.LastSeenIndex) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LastSeenIndex[iNdEx])
			copy(dAtA[i:], m.LastSeenIndex[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.LastSeenIndex[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataRequestsByStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataRequestsByStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataRequestsByStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastSeenIndex) > 0 {
		for iNdEx := len(m.LastSeenIndex) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LastSeenIndex[iNdEx])
			copy(dAtA[i:], m.LastSeenIndex[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.LastSeenIndex[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Total != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if m.IsPaused {
		i--
		if m.IsPaused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.DataRequests) > 0 {
		for iNdEx := len(m.DataRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountSeqRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountSeqRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountSeqRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountSeqResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountSeqResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountSeqResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccountSeq != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AccountSeq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsStakerExecutorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsStakerExecutorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsStakerExecutorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsStakerExecutorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsStakerExecutorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsStakerExecutorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsStakerExecutor {
		i--
		if m.IsStakerExecutor {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsExecutorEligibleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsExecutorEligibleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsExecutorEligibleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsExecutorEligibleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsExecutorEligibleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsExecutorEligibleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsExecutorEligible {
		i--
		if m.IsExecutorEligible {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataRequestStatusesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataRequestStatusesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataRequestStatusesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataRequestIds) > 0 {
		for iNdEx := len(m.DataRequestIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataRequestIds[iNdEx])
			copy(dAtA[i:], m.DataRequestIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.DataRequestIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataRequestStatusesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataRequestStatusesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataRequestStatusesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Statuses) > 0 {
		for k := range m.Statuses {
			v := m.Statuses[k]
			baseI := i
			i = encodeVarintQuery(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryStakingConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakingConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakingConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryStakingConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakingConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakingConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StakingConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDataRequestConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataRequestConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataRequestConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDataRequestConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataRequestConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataRequestConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DataRequestConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPendingOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PendingOwner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPausedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPausedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Paused {
		n += 2
	}
	return n
}

func (m *QueryAllowlistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllowlistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PublicKeys) > 0 {
		for _, s := range m.PublicKeys {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryStakerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Staker.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryExecutorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovQuery(uint64(m.Offset))
	}
	return n
}

func (m *QueryExecutorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Executors) > 0 {
		for _, e := range m.Executors {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDataRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DrId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DataRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDataRequestsByStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	if len(m.LastSeenIndex) > 0 {
		for _, s := range m.LastSeenIndex {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDataRequestsByStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DataRequests) > 0 {
		for _, e := range m.DataRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.IsPaused {
		n += 2
	}
	if m.Total != 0 {
		n += 1 + sovQuery(uint64(m.Total))
	}
	if len(m.LastSeenIndex) > 0 {
		for _, s := range m.LastSeenIndex {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAccountSeqRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAccountSeqResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountSeq != 0 {
		n += 1 + sovQuery(uint64(m.AccountSeq))
	}
	return n
}

func (m *QueryIsStakerExecutorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsStakerExecutorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsStakerExecutor {
		n += 2
	}
	return n
}

func (m *QueryIsExecutorEligibleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsExecutorEligibleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsExecutorEligible {
		n += 2
	}
	return n
}

func (m *QueryDataRequestStatusesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DataRequestIds) > 0 {
		for _, s := range m.DataRequestIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDataRequestStatusesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Statuses) > 0 {
		for k, v := range m.Statuses {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + 1 + sovQuery(uint64(v))
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryStakingConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryStakingConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StakingConfig.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDataRequestConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDataRequestConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DataRequestConfig.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPausedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPausedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPausedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPausedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPausedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPausedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paused = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllowlistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllowlistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllowlistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllowlistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllowlistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllowlistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeys = append(m.PublicKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Staker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExecutorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExecutorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExecutorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExecutorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExecutorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExecutorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executors = append(m.Executors, Staker{})
			if err := m.Executors[len(m.Executors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DataRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataRequestsByStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataRequestsByStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataRequestsByStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DataRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeenIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastSeenIndex = append(m.LastSeenIndex, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataRequestsByStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataRequestsByStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataRequestsByStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataRequests = append(m.DataRequests, DataRequest{})
			if err := m.DataRequests[len(m.DataRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPaused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPaused = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeenIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastSeenIndex = append(m.LastSeenIndex, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountSeqRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountSeqRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountSeqRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountSeqResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountSeqResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountSeqResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountSeq", wireType)
			}
			m.AccountSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountSeq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsStakerExecutorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsStakerExecutorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsStakerExecutorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsStakerExecutorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsStakerExecutorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsStakerExecutorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsStakerExecutor", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsStakerExecutor = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsExecutorEligibleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsExecutorEligibleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsExecutorEligibleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsExecutorEligibleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsExecutorEligibleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsExecutorEligibleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsExecutorEligible", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsExecutorEligible = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataRequestStatusesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataRequestStatusesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataRequestStatusesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRequestIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataRequestIds = append(m.DataRequestIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataRequestStatusesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataRequestStatusesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataRequestStatusesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Statuses == nil {
				m.Statuses = make(map[string]DataRequestStatus)
			}
			var mapkey string
			var mapvalue DataRequestStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= DataRequestStatus(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Statuses[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakingConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakingConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakingConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakingConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakingConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakingConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakingConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataRequestConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataRequestConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataRequestConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataRequestConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataRequestConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataRequestConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRequestConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DataRequestConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
