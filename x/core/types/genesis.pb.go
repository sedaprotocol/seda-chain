// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sedachain/core/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines core module's genesis state.
type GenesisState struct {
	Params       Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	Owner        string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	PendingOwner string `protobuf:"bytes,3,opt,name=pending_owner,json=pendingOwner,proto3" json:"pending_owner,omitempty"`
	Paused       bool   `protobuf:"varint,4,opt,name=paused,proto3" json:"paused,omitempty"`
	// Staking-related states:
	Allowlist []string `protobuf:"bytes,5,rep,name=allowlist,proto3" json:"allowlist,omitempty"`
	Stakers   []Staker `protobuf:"bytes,6,rep,name=stakers,proto3" json:"stakers"`
	// Data request-related states:
	DataRequests    []DataRequest        `protobuf:"bytes,7,rep,name=data_requests,json=dataRequests,proto3" json:"data_requests"`
	CommittingCount uint64               `protobuf:"varint,8,opt,name=committing_count,json=committingCount,proto3" json:"committing_count,omitempty"`
	RevealingCount  uint64               `protobuf:"varint,9,opt,name=revealing_count,json=revealingCount,proto3" json:"revealing_count,omitempty"`
	TallyingCount   uint64               `protobuf:"varint,10,opt,name=tallying_count,json=tallyingCount,proto3" json:"tallying_count,omitempty"`
	Commits         []GenesisStateCommit `protobuf:"bytes,11,rep,name=commits,proto3" json:"commits"`
	Reveals         []GenesisStateReveal `protobuf:"bytes,12,rep,name=reveals,proto3" json:"reveals"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ae62d9b0e76089c, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *GenesisState) GetPendingOwner() string {
	if m != nil {
		return m.PendingOwner
	}
	return ""
}

func (m *GenesisState) GetPaused() bool {
	if m != nil {
		return m.Paused
	}
	return false
}

func (m *GenesisState) GetAllowlist() []string {
	if m != nil {
		return m.Allowlist
	}
	return nil
}

func (m *GenesisState) GetStakers() []Staker {
	if m != nil {
		return m.Stakers
	}
	return nil
}

func (m *GenesisState) GetDataRequests() []DataRequest {
	if m != nil {
		return m.DataRequests
	}
	return nil
}

func (m *GenesisState) GetCommittingCount() uint64 {
	if m != nil {
		return m.CommittingCount
	}
	return 0
}

func (m *GenesisState) GetRevealingCount() uint64 {
	if m != nil {
		return m.RevealingCount
	}
	return 0
}

func (m *GenesisState) GetTallyingCount() uint64 {
	if m != nil {
		return m.TallyingCount
	}
	return 0
}

func (m *GenesisState) GetCommits() []GenesisStateCommit {
	if m != nil {
		return m.Commits
	}
	return nil
}

func (m *GenesisState) GetReveals() []GenesisStateReveal {
	if m != nil {
		return m.Reveals
	}
	return nil
}

// GenesisStateCommit is used to store commits in the genesis state.
type GenesisStateCommit struct {
	DrID      string `protobuf:"bytes,1,opt,name=dr_i_d,json=drID,proto3" json:"dr_id"`
	PublicKey string `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Commit    []byte `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (m *GenesisStateCommit) Reset()         { *m = GenesisStateCommit{} }
func (m *GenesisStateCommit) String() string { return proto.CompactTextString(m) }
func (*GenesisStateCommit) ProtoMessage()    {}
func (*GenesisStateCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ae62d9b0e76089c, []int{1}
}
func (m *GenesisStateCommit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisStateCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisStateCommit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisStateCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisStateCommit.Merge(m, src)
}
func (m *GenesisStateCommit) XXX_Size() int {
	return m.Size()
}
func (m *GenesisStateCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisStateCommit.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisStateCommit proto.InternalMessageInfo

func (m *GenesisStateCommit) GetDrID() string {
	if m != nil {
		return m.DrID
	}
	return ""
}

func (m *GenesisStateCommit) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *GenesisStateCommit) GetCommit() []byte {
	if m != nil {
		return m.Commit
	}
	return nil
}

// GenesisStateReveal is used to store revealers and their reveal bodies in the
// genesis state.
type GenesisStateReveal struct {
	DrID       string     `protobuf:"bytes,1,opt,name=dr_i_d,json=drID,proto3" json:"dr_id"`
	PublicKey  string     `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	RevealBody RevealBody `protobuf:"bytes,3,opt,name=reveal_body,json=revealBody,proto3" json:"reveal_body"`
}

func (m *GenesisStateReveal) Reset()         { *m = GenesisStateReveal{} }
func (m *GenesisStateReveal) String() string { return proto.CompactTextString(m) }
func (*GenesisStateReveal) ProtoMessage()    {}
func (*GenesisStateReveal) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ae62d9b0e76089c, []int{2}
}
func (m *GenesisStateReveal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisStateReveal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisStateReveal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisStateReveal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisStateReveal.Merge(m, src)
}
func (m *GenesisStateReveal) XXX_Size() int {
	return m.Size()
}
func (m *GenesisStateReveal) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisStateReveal.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisStateReveal proto.InternalMessageInfo

func (m *GenesisStateReveal) GetDrID() string {
	if m != nil {
		return m.DrID
	}
	return ""
}

func (m *GenesisStateReveal) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *GenesisStateReveal) GetRevealBody() RevealBody {
	if m != nil {
		return m.RevealBody
	}
	return RevealBody{}
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "sedachain.core.v1.GenesisState")
	proto.RegisterType((*GenesisStateCommit)(nil), "sedachain.core.v1.GenesisStateCommit")
	proto.RegisterType((*GenesisStateReveal)(nil), "sedachain.core.v1.GenesisStateReveal")
}

func init() { proto.RegisterFile("sedachain/core/v1/genesis.proto", fileDescriptor_9ae62d9b0e76089c) }

var fileDescriptor_9ae62d9b0e76089c = []byte{
	// 561 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x1b, 0xfa, 0x6f, 0x71, 0xdb, 0x0d, 0xac, 0x09, 0x65, 0x13, 0x4b, 0xa3, 0x4a, 0x13,
	0xe5, 0xb0, 0x44, 0x1b, 0x12, 0x88, 0x03, 0x07, 0xba, 0x22, 0x54, 0x71, 0x00, 0xa5, 0x37, 0x2e,
	0x91, 0x1b, 0x5b, 0x59, 0xb4, 0x34, 0x2e, 0xb6, 0xd3, 0x91, 0x6f, 0xc1, 0x85, 0x0b, 0x9f, 0x83,
	0x0f, 0xb1, 0xe3, 0xc4, 0x89, 0xd3, 0x84, 0xda, 0x1b, 0x9f, 0x02, 0xc5, 0x76, 0x17, 0x50, 0xcb,
	0x1f, 0x69, 0xb7, 0xf8, 0xc9, 0xef, 0x7d, 0x9e, 0xd7, 0xaf, 0x5e, 0x83, 0x2e, 0x27, 0x18, 0x85,
	0x67, 0x28, 0x4e, 0xbd, 0x90, 0x32, 0xe2, 0xcd, 0x8f, 0xbd, 0x88, 0xa4, 0x84, 0xc7, 0xdc, 0x9d,
	0x31, 0x2a, 0x28, 0xbc, 0x77, 0x03, 0xb8, 0x05, 0xe0, 0xce, 0x8f, 0xf7, 0xf7, 0x42, 0xca, 0xa7,
	0x94, 0x07, 0x12, 0xf0, 0xd4, 0x41, 0xd1, 0xfb, 0xbb, 0x11, 0x8d, 0xa8, 0xd2, 0x8b, 0x2f, 0xad,
	0x3e, 0x58, 0x0f, 0x91, 0x5e, 0xf2, 0x6f, 0xef, 0x53, 0x1d, 0xb4, 0x5f, 0xa9, 0xcc, 0xb1, 0x40,
	0x82, 0xc0, 0xa7, 0xa0, 0x31, 0x43, 0x0c, 0x4d, 0xb9, 0x65, 0x38, 0x46, 0xbf, 0x75, 0xb2, 0xe7,
	0xae, 0xf5, 0xe0, 0xbe, 0x95, 0xc0, 0xa0, 0x76, 0x79, 0xdd, 0xad, 0xf8, 0x1a, 0x87, 0x2e, 0xa8,
	0xd3, 0x8b, 0x94, 0x30, 0xeb, 0x8e, 0x63, 0xf4, 0xcd, 0x81, 0xf5, 0xf5, 0xcb, 0xd1, 0xae, 0x6e,
	0xef, 0x05, 0xc6, 0x8c, 0x70, 0x3e, 0x16, 0x2c, 0x4e, 0x23, 0x5f, 0x61, 0xf0, 0x39, 0xe8, 0xcc,
	0x48, 0x8a, 0xe3, 0x34, 0x0a, 0x54, 0x5d, 0xf5, 0x1f, 0x75, 0x6d, 0x8d, 0xbf, 0x91, 0xe5, 0xf7,
	0x8b, 0x3e, 0x33, 0x4e, 0xb0, 0x55, 0x73, 0x8c, 0xfe, 0x96, 0xaf, 0x4f, 0xf0, 0x09, 0x30, 0x51,
	0x92, 0xd0, 0x8b, 0x24, 0xe6, 0xc2, 0xaa, 0x3b, 0xd5, 0xbf, 0x5a, 0x96, 0x28, 0x7c, 0x06, 0x9a,
	0x5c, 0xa0, 0x73, 0xc2, 0xb8, 0xd5, 0x70, 0xaa, 0x7f, 0xb8, 0xf8, 0x58, 0x12, 0xfa, 0xe2, 0x2b,
	0x1e, 0x8e, 0x40, 0x07, 0x23, 0x81, 0x02, 0x46, 0xde, 0x67, 0x84, 0x0b, 0x6e, 0x35, 0xa5, 0x81,
	0xbd, 0xc1, 0x60, 0x88, 0x04, 0xf2, 0x15, 0xa6, 0x5d, 0xda, 0xb8, 0x94, 0x38, 0x7c, 0x04, 0xee,
	0x86, 0x74, 0x3a, 0x8d, 0x85, 0x28, 0xe6, 0x12, 0xd2, 0x2c, 0x15, 0xd6, 0x96, 0x63, 0xf4, 0x6b,
	0xfe, 0x4e, 0xa9, 0x9f, 0x16, 0x32, 0x7c, 0x08, 0x76, 0x18, 0x99, 0x13, 0x94, 0x94, 0xa4, 0x29,
	0xc9, 0xed, 0x1b, 0x59, 0x81, 0x87, 0x60, 0x5b, 0xa0, 0x24, 0xc9, 0x4b, 0x0e, 0x48, 0xae, 0xb3,
	0x52, 0x15, 0xf6, 0x12, 0x34, 0x55, 0x04, 0xb7, 0x5a, 0xb2, 0xff, 0xc3, 0x0d, 0xfd, 0xff, 0xba,
	0x2a, 0xa7, 0x92, 0x5e, 0x0d, 0x43, 0xd7, 0x16, 0x36, 0x2a, 0x9f, 0x5b, 0xed, 0xff, 0xb2, 0xf1,
	0x25, 0xbd, 0xb2, 0xd1, 0xb5, 0xbd, 0x04, 0xc0, 0xf5, 0x2c, 0xd8, 0x05, 0x0d, 0xcc, 0x82, 0x38,
	0xc0, 0x72, 0x39, 0xcd, 0x81, 0xf9, 0xe3, 0xba, 0x5b, 0x2f, 0x14, 0xec, 0xd7, 0x30, 0x1b, 0x0d,
	0xe1, 0x01, 0x00, 0xb3, 0x6c, 0x92, 0xc4, 0x61, 0x70, 0x4e, 0x72, 0xb5, 0x89, 0xbe, 0xa9, 0x94,
	0xd7, 0x24, 0x2f, 0x96, 0x46, 0xf5, 0x29, 0x97, 0xad, 0xed, 0xeb, 0x53, 0xef, 0xb3, 0xf1, 0x7b,
	0x9c, 0xea, 0xe9, 0xd6, 0x71, 0x43, 0xd0, 0x52, 0xf7, 0x09, 0x26, 0x14, 0xe7, 0x32, 0xb3, 0x75,
	0x72, 0xb0, 0x61, 0x1e, 0x7a, 0x06, 0x14, 0xe7, 0x7a, 0x0e, 0x80, 0x95, 0xca, 0xe8, 0x72, 0x61,
	0x1b, 0x57, 0x0b, 0xdb, 0xf8, 0xbe, 0xb0, 0x8d, 0x8f, 0x4b, 0xbb, 0x72, 0xb5, 0xb4, 0x2b, 0xdf,
	0x96, 0x76, 0xe5, 0x9d, 0x17, 0xc5, 0xe2, 0x2c, 0x9b, 0xb8, 0x21, 0x9d, 0x7a, 0x85, 0xa9, 0x7c,
	0xd2, 0x21, 0x4d, 0xe4, 0xe1, 0x48, 0xbd, 0xf9, 0x0f, 0xea, 0xd5, 0x8b, 0x7c, 0x46, 0xf8, 0xa4,
	0x21, 0x89, 0xc7, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x26, 0x6b, 0x9d, 0x79, 0x04, 0x00,
	0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reveals) > 0 {
		for iNdEx := len(m.Reveals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reveals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Commits) > 0 {
		for iNdEx := len(m.Commits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Commits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.TallyingCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.TallyingCount))
		i--
		dAtA[i] = 0x50
	}
	if m.RevealingCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.RevealingCount))
		i--
		dAtA[i] = 0x48
	}
	if m.CommittingCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.CommittingCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.DataRequests) > 0 {
		for iNdEx := len(m.DataRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Stakers) > 0 {
		for iNdEx := len(m.Stakers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stakers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Allowlist) > 0 {
		for iNdEx := len(m.Allowlist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Allowlist[iNdEx])
			copy(dAtA[i:], m.Allowlist[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.Allowlist[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Paused {
		i--
		if m.Paused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.PendingOwner) > 0 {
		i -= len(m.PendingOwner)
		copy(dAtA[i:], m.PendingOwner)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.PendingOwner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GenesisStateCommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisStateCommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisStateCommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commit) > 0 {
		i -= len(m.Commit)
		copy(dAtA[i:], m.Commit)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Commit)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DrID) > 0 {
		i -= len(m.DrID)
		copy(dAtA[i:], m.DrID)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.DrID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisStateReveal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisStateReveal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisStateReveal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RevealBody.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DrID) > 0 {
		i -= len(m.DrID)
		copy(dAtA[i:], m.DrID)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.DrID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.PendingOwner)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Paused {
		n += 2
	}
	if len(m.Allowlist) > 0 {
		for _, s := range m.Allowlist {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Stakers) > 0 {
		for _, e := range m.Stakers {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.DataRequests) > 0 {
		for _, e := range m.DataRequests {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.CommittingCount != 0 {
		n += 1 + sovGenesis(uint64(m.CommittingCount))
	}
	if m.RevealingCount != 0 {
		n += 1 + sovGenesis(uint64(m.RevealingCount))
	}
	if m.TallyingCount != 0 {
		n += 1 + sovGenesis(uint64(m.TallyingCount))
	}
	if len(m.Commits) > 0 {
		for _, e := range m.Commits {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Reveals) > 0 {
		for _, e := range m.Reveals {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *GenesisStateCommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DrID)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Commit)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *GenesisStateReveal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DrID)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.RevealBody.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paused = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allowlist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Allowlist = append(m.Allowlist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stakers = append(m.Stakers, Staker{})
			if err := m.Stakers[len(m.Stakers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataRequests = append(m.DataRequests, DataRequest{})
			if err := m.DataRequests[len(m.DataRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommittingCount", wireType)
			}
			m.CommittingCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommittingCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealingCount", wireType)
			}
			m.RevealingCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevealingCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TallyingCount", wireType)
			}
			m.TallyingCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TallyingCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commits = append(m.Commits, GenesisStateCommit{})
			if err := m.Commits[len(m.Commits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reveals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reveals = append(m.Reveals, GenesisStateReveal{})
			if err := m.Reveals[len(m.Reveals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisStateCommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisStateCommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisStateCommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commit = append(m.Commit[:0], dAtA[iNdEx:postIndex]...)
			if m.Commit == nil {
				m.Commit = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisStateReveal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisStateReveal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisStateReveal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RevealBody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
