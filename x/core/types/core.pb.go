// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sedachain/core/v1/core.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the core module.
type Params struct {
	DataRequestConfig DataRequestConfig `protobuf:"bytes,1,opt,name=data_request_config,json=dataRequestConfig,proto3" json:"data_request_config"`
	StakingConfig     StakingConfig     `protobuf:"bytes,2,opt,name=staking_config,json=stakingConfig,proto3" json:"staking_config"`
	TallyConfig       TallyConfig       `protobuf:"bytes,3,opt,name=tally_config,json=tallyConfig,proto3" json:"tally_config"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_0152bc97eaf51aad, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetDataRequestConfig() DataRequestConfig {
	if m != nil {
		return m.DataRequestConfig
	}
	return DataRequestConfig{}
}

func (m *Params) GetStakingConfig() StakingConfig {
	if m != nil {
		return m.StakingConfig
	}
	return StakingConfig{}
}

func (m *Params) GetTallyConfig() TallyConfig {
	if m != nil {
		return m.TallyConfig
	}
	return TallyConfig{}
}

// DataRequestConfig defines data request-related parameters.
type DataRequestConfig struct {
	// Number of blocks after which a data request is timed out while waiting
	// for commits.
	CommitTimeoutInBlocks uint32 `protobuf:"varint,1,opt,name=commit_timeout_in_blocks,json=commitTimeoutInBlocks,proto3" json:"commit_timeout_in_blocks,omitempty"`
	// Number of blocks after which a data request is timed out while waiting
	// for reveals.
	RevealTimeoutInBlocks uint32 `protobuf:"varint,2,opt,name=reveal_timeout_in_blocks,json=revealTimeoutInBlocks,proto3" json:"reveal_timeout_in_blocks,omitempty"`
	// Delay in blocks before the backup executors are allowed to start executing
	// the data request.
	BackupDelayInBlocks uint32 `protobuf:"varint,3,opt,name=backup_delay_in_blocks,json=backupDelayInBlocks,proto3" json:"backup_delay_in_blocks,omitempty"`
	// Maximum size of all the reveals in a data request.
	DrRevealSizeLimitInBytes uint32 `protobuf:"varint,4,opt,name=dr_reveal_size_limit_in_bytes,json=drRevealSizeLimitInBytes,proto3" json:"dr_reveal_size_limit_in_bytes,omitempty"`
	// Maximum size of the input for the execution program.
	ExecInputLimitInBytes uint32 `protobuf:"varint,5,opt,name=exec_input_limit_in_bytes,json=execInputLimitInBytes,proto3" json:"exec_input_limit_in_bytes,omitempty"`
	// Maximum size of the input for the tally program.
	TallyInputLimitInBytes uint32 `protobuf:"varint,6,opt,name=tally_input_limit_in_bytes,json=tallyInputLimitInBytes,proto3" json:"tally_input_limit_in_bytes,omitempty"`
	// Maximum size of the consensus filter.
	ConsensusFilterLimitInBytes uint32 `protobuf:"varint,7,opt,name=consensus_filter_limit_in_bytes,json=consensusFilterLimitInBytes,proto3" json:"consensus_filter_limit_in_bytes,omitempty"`
	// Maximum size of the memo.
	MemoLimitInBytes uint32 `protobuf:"varint,8,opt,name=memo_limit_in_bytes,json=memoLimitInBytes,proto3" json:"memo_limit_in_bytes,omitempty"`
	// Maximum size of the payback address.
	PaybackAddressLimitInBytes uint32 `protobuf:"varint,9,opt,name=payback_address_limit_in_bytes,json=paybackAddressLimitInBytes,proto3" json:"payback_address_limit_in_bytes,omitempty"`
	// Maximum size of the SEDA payload.
	SEDAPayloadLimitInBytes uint32 `protobuf:"varint,10,opt,name=s_e_d_a_payload_limit_in_bytes,json=sEDAPayloadLimitInBytes,proto3" json:"s_e_d_a_payload_limit_in_bytes,omitempty"`
}

func (m *DataRequestConfig) Reset()         { *m = DataRequestConfig{} }
func (m *DataRequestConfig) String() string { return proto.CompactTextString(m) }
func (*DataRequestConfig) ProtoMessage()    {}
func (*DataRequestConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0152bc97eaf51aad, []int{1}
}
func (m *DataRequestConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataRequestConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataRequestConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataRequestConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRequestConfig.Merge(m, src)
}
func (m *DataRequestConfig) XXX_Size() int {
	return m.Size()
}
func (m *DataRequestConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRequestConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DataRequestConfig proto.InternalMessageInfo

func (m *DataRequestConfig) GetCommitTimeoutInBlocks() uint32 {
	if m != nil {
		return m.CommitTimeoutInBlocks
	}
	return 0
}

func (m *DataRequestConfig) GetRevealTimeoutInBlocks() uint32 {
	if m != nil {
		return m.RevealTimeoutInBlocks
	}
	return 0
}

func (m *DataRequestConfig) GetBackupDelayInBlocks() uint32 {
	if m != nil {
		return m.BackupDelayInBlocks
	}
	return 0
}

func (m *DataRequestConfig) GetDrRevealSizeLimitInBytes() uint32 {
	if m != nil {
		return m.DrRevealSizeLimitInBytes
	}
	return 0
}

func (m *DataRequestConfig) GetExecInputLimitInBytes() uint32 {
	if m != nil {
		return m.ExecInputLimitInBytes
	}
	return 0
}

func (m *DataRequestConfig) GetTallyInputLimitInBytes() uint32 {
	if m != nil {
		return m.TallyInputLimitInBytes
	}
	return 0
}

func (m *DataRequestConfig) GetConsensusFilterLimitInBytes() uint32 {
	if m != nil {
		return m.ConsensusFilterLimitInBytes
	}
	return 0
}

func (m *DataRequestConfig) GetMemoLimitInBytes() uint32 {
	if m != nil {
		return m.MemoLimitInBytes
	}
	return 0
}

func (m *DataRequestConfig) GetPaybackAddressLimitInBytes() uint32 {
	if m != nil {
		return m.PaybackAddressLimitInBytes
	}
	return 0
}

func (m *DataRequestConfig) GetSEDAPayloadLimitInBytes() uint32 {
	if m != nil {
		return m.SEDAPayloadLimitInBytes
	}
	return 0
}

// StakingConfig defines staking-related parameters.
type StakingConfig struct {
	// MiminumStake is the minimum amount of SEDA tokens required to register as
	// an Overlay.
	MinimumStake cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=minimum_stake,json=minimumStake,proto3,customtype=cosmossdk.io/math.Int" json:"minimum_stake"`
	// AllowlistEnabled is a flag that indicates whether the allowlist is enabled.
	AllowlistEnabled bool `protobuf:"varint,2,opt,name=allowlist_enabled,json=allowlistEnabled,proto3" json:"allowlist_enabled,omitempty"`
}

func (m *StakingConfig) Reset()         { *m = StakingConfig{} }
func (m *StakingConfig) String() string { return proto.CompactTextString(m) }
func (*StakingConfig) ProtoMessage()    {}
func (*StakingConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0152bc97eaf51aad, []int{2}
}
func (m *StakingConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingConfig.Merge(m, src)
}
func (m *StakingConfig) XXX_Size() int {
	return m.Size()
}
func (m *StakingConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StakingConfig proto.InternalMessageInfo

func (m *StakingConfig) GetAllowlistEnabled() bool {
	if m != nil {
		return m.AllowlistEnabled
	}
	return false
}

// TallyConfig definfes tally-related parameters.
type TallyConfig struct {
	// MaxTallyGasLimit is the maximum gas limit for a tally request.
	MaxTallyGasLimit uint64 `protobuf:"varint,1,opt,name=max_tally_gas_limit,json=maxTallyGasLimit,proto3" json:"max_tally_gas_limit,omitempty"`
	// FilterGasCostNone is the gas cost for a filter type none.
	FilterGasCostNone uint64 `protobuf:"varint,2,opt,name=filter_gas_cost_none,json=filterGasCostNone,proto3" json:"filter_gas_cost_none,omitempty"`
	// FilterGasCostMultiplierMode is the gas cost multiplier for a filter type
	// mode.
	FilterGasCostMultiplierMode uint64 `protobuf:"varint,3,opt,name=filter_gas_cost_multiplier_mode,json=filterGasCostMultiplierMode,proto3" json:"filter_gas_cost_multiplier_mode,omitempty"`
	// FilterGasCostMAD is the gas cost multiplier for a filter type
	// Median Absolute Deviation.
	FilterGasCostMultiplierMAD uint64 `protobuf:"varint,4,opt,name=filter_gas_cost_multiplier_m_a_d,json=filterGasCostMultiplierMAD,proto3" json:"filter_gas_cost_multiplier_m_a_d,omitempty"`
	// GasCostBase is the base gas cost for a data request.
	GasCostBase uint64 `protobuf:"varint,5,opt,name=gas_cost_base,json=gasCostBase,proto3" json:"gas_cost_base,omitempty"`
	// GasCostFallback is the gas cost incurred for data request execution when
	// even basic consensus has not been reached.
	ExecutionGasCostFallback uint64 `protobuf:"varint,6,opt,name=execution_gas_cost_fallback,json=executionGasCostFallback,proto3" json:"execution_gas_cost_fallback,omitempty"`
	// BurnRatio is the ratio of the gas cost to be burned in case of reduced
	// payout scenarios.
	BurnRatio cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=burn_ratio,json=burnRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"burn_ratio"`
	// MaxResultSize is the maximum size of the result of a data request in bytes.
	MaxResultSize uint32 `protobuf:"varint,8,opt,name=max_result_size,json=maxResultSize,proto3" json:"max_result_size,omitempty"`
	// MaxTalliesPerBlock specifies the maximum number of tallies per block.
	MaxTalliesPerBlock uint32 `protobuf:"varint,9,opt,name=max_tallies_per_block,json=maxTalliesPerBlock,proto3" json:"max_tallies_per_block,omitempty"`
}

func (m *TallyConfig) Reset()         { *m = TallyConfig{} }
func (m *TallyConfig) String() string { return proto.CompactTextString(m) }
func (*TallyConfig) ProtoMessage()    {}
func (*TallyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0152bc97eaf51aad, []int{3}
}
func (m *TallyConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TallyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TallyConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TallyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TallyConfig.Merge(m, src)
}
func (m *TallyConfig) XXX_Size() int {
	return m.Size()
}
func (m *TallyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TallyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TallyConfig proto.InternalMessageInfo

func (m *TallyConfig) GetMaxTallyGasLimit() uint64 {
	if m != nil {
		return m.MaxTallyGasLimit
	}
	return 0
}

func (m *TallyConfig) GetFilterGasCostNone() uint64 {
	if m != nil {
		return m.FilterGasCostNone
	}
	return 0
}

func (m *TallyConfig) GetFilterGasCostMultiplierMode() uint64 {
	if m != nil {
		return m.FilterGasCostMultiplierMode
	}
	return 0
}

func (m *TallyConfig) GetFilterGasCostMultiplierMAD() uint64 {
	if m != nil {
		return m.FilterGasCostMultiplierMAD
	}
	return 0
}

func (m *TallyConfig) GetGasCostBase() uint64 {
	if m != nil {
		return m.GasCostBase
	}
	return 0
}

func (m *TallyConfig) GetExecutionGasCostFallback() uint64 {
	if m != nil {
		return m.ExecutionGasCostFallback
	}
	return 0
}

func (m *TallyConfig) GetMaxResultSize() uint32 {
	if m != nil {
		return m.MaxResultSize
	}
	return 0
}

func (m *TallyConfig) GetMaxTalliesPerBlock() uint32 {
	if m != nil {
		return m.MaxTalliesPerBlock
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "sedachain.core.v1.Params")
	proto.RegisterType((*DataRequestConfig)(nil), "sedachain.core.v1.DataRequestConfig")
	proto.RegisterType((*StakingConfig)(nil), "sedachain.core.v1.StakingConfig")
	proto.RegisterType((*TallyConfig)(nil), "sedachain.core.v1.TallyConfig")
}

func init() { proto.RegisterFile("sedachain/core/v1/core.proto", fileDescriptor_0152bc97eaf51aad) }

var fileDescriptor_0152bc97eaf51aad = []byte{
	// 872 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0x8f, 0xdb, 0x25, 0x34, 0x93, 0x1a, 0xe2, 0x4d, 0x53, 0x5c, 0x07, 0x9c, 0xc8, 0x42, 0x08,
	0x81, 0x62, 0x13, 0x2a, 0x01, 0x42, 0x42, 0x55, 0x5c, 0xb7, 0x91, 0xa5, 0x06, 0x45, 0xdb, 0xf6,
	0xd2, 0xcb, 0xe8, 0x79, 0xf7, 0xc5, 0x19, 0x65, 0xfe, 0x98, 0x9d, 0xd9, 0x60, 0xf7, 0x43, 0x20,
	0x24, 0xbe, 0x04, 0x47, 0x0e, 0x7c, 0x88, 0x1e, 0x2b, 0x4e, 0x88, 0x43, 0x85, 0x92, 0x03, 0x07,
	0xbe, 0x02, 0x07, 0x34, 0x6f, 0x36, 0x8e, 0xed, 0x04, 0x2e, 0xb6, 0xf7, 0xfd, 0xfe, 0xcc, 0x7a,
	0xde, 0xef, 0xcd, 0xb0, 0xf7, 0x2d, 0x66, 0x90, 0x1e, 0x83, 0xd0, 0x9d, 0xd4, 0xe4, 0xd8, 0x39,
	0xdd, 0xa5, 0xef, 0xf6, 0x28, 0x37, 0xce, 0xc4, 0xb5, 0x29, 0xda, 0xa6, 0xea, 0xe9, 0x6e, 0xe3,
	0x5e, 0x6a, 0xac, 0x32, 0x96, 0x13, 0xa1, 0x13, 0x1e, 0x02, 0xbb, 0x71, 0x67, 0x68, 0x86, 0x26,
	0xd4, 0xfd, 0xaf, 0xb2, 0x5a, 0x03, 0x25, 0xb4, 0xe9, 0xd0, 0x67, 0x28, 0xb5, 0xfe, 0xa9, 0xb0,
	0xe5, 0x43, 0xc8, 0x41, 0xd9, 0xf8, 0x05, 0x5b, 0xcf, 0xc0, 0x01, 0xcf, 0xf1, 0xbb, 0x02, 0xad,
	0xe3, 0xa9, 0xd1, 0x47, 0x62, 0x58, 0xaf, 0x6c, 0x57, 0x3e, 0x5e, 0xfd, 0xfc, 0xc3, 0xf6, 0x95,
	0xf5, 0xdb, 0x3d, 0x70, 0x90, 0x04, 0xf2, 0x43, 0xe2, 0x76, 0xa3, 0x57, 0x6f, 0xb6, 0x96, 0x92,
	0x5a, 0xb6, 0x08, 0xc4, 0x07, 0xec, 0x1d, 0xeb, 0xe0, 0x44, 0xe8, 0xe1, 0x85, 0xed, 0x0d, 0xb2,
	0xdd, 0xbe, 0xc6, 0xf6, 0x69, 0x20, 0xce, 0x59, 0x56, 0xed, 0x6c, 0x31, 0xde, 0x67, 0xb7, 0x1d,
	0x48, 0x39, 0xb9, 0x30, 0xbb, 0x49, 0x66, 0xcd, 0x6b, 0xcc, 0x9e, 0x79, 0xda, 0x9c, 0xd5, 0xaa,
	0xbb, 0x2c, 0xb5, 0xfe, 0x8e, 0x58, 0xed, 0xca, 0xdf, 0x88, 0xbf, 0x64, 0xf5, 0xd4, 0x28, 0x25,
	0x1c, 0x77, 0x42, 0xa1, 0x29, 0x1c, 0x17, 0x9a, 0x0f, 0xa4, 0x49, 0x4f, 0x2c, 0x6d, 0x47, 0x35,
	0xd9, 0x08, 0xf8, 0xb3, 0x00, 0xf7, 0x75, 0x97, 0x40, 0x2f, 0xcc, 0xf1, 0x14, 0x41, 0x5e, 0x23,
	0xbc, 0x11, 0x84, 0x01, 0x5f, 0x14, 0xde, 0x67, 0x77, 0x07, 0x90, 0x9e, 0x14, 0x23, 0x9e, 0xa1,
	0x84, 0xc9, 0x8c, 0xec, 0x26, 0xc9, 0xd6, 0x03, 0xda, 0xf3, 0xe0, 0x54, 0xf4, 0x80, 0x7d, 0x90,
	0xe5, 0xbc, 0x5c, 0xd0, 0x8a, 0x97, 0xc8, 0xa5, 0xf0, 0x2f, 0xed, 0xc5, 0x13, 0x87, 0xb6, 0x1e,
	0x91, 0xb6, 0x9e, 0xe5, 0x09, 0x71, 0x9e, 0x8a, 0x97, 0xf8, 0xc4, 0x33, 0xfa, 0xba, 0xeb, 0xf1,
	0xf8, 0x2b, 0x76, 0x0f, 0xc7, 0x98, 0x72, 0xa1, 0x47, 0x85, 0x5b, 0x14, 0xbf, 0x15, 0xde, 0xd7,
	0x13, 0xfa, 0x1e, 0x9f, 0x53, 0x7e, 0xcd, 0x1a, 0xa1, 0x01, 0xd7, 0x4a, 0x97, 0x49, 0x7a, 0x97,
	0x18, 0x57, 0xb5, 0x3d, 0xb6, 0x95, 0x1a, 0x6d, 0x51, 0xdb, 0xc2, 0xf2, 0x23, 0x21, 0x1d, 0xe6,
	0x8b, 0x06, 0x6f, 0x93, 0xc1, 0xe6, 0x94, 0xf6, 0x98, 0x58, 0x73, 0x2e, 0x3b, 0x6c, 0x5d, 0xa1,
	0x32, 0x8b, 0xca, 0x5b, 0xa4, 0x5c, 0xf3, 0xd0, 0x1c, 0xbd, 0xcb, 0x9a, 0x23, 0x98, 0xf8, 0x5d,
	0xe4, 0x90, 0x65, 0x39, 0x5a, 0xbb, 0xa8, 0x5c, 0x21, 0x65, 0xa3, 0x64, 0xed, 0x05, 0xd2, 0x9c,
	0xc7, 0x03, 0xd6, 0xb4, 0x1c, 0x79, 0xc6, 0x81, 0x8f, 0x60, 0x22, 0x0d, 0x64, 0x8b, 0x1e, 0x8c,
	0x3c, 0xde, 0xb3, 0x8f, 0x7a, 0x7b, 0x87, 0x81, 0x31, 0x6b, 0xd0, 0xfa, 0xa9, 0xc2, 0xaa, 0x73,
	0xe9, 0x8e, 0x9f, 0xb3, 0xaa, 0x12, 0x5a, 0xa8, 0x42, 0x71, 0x9f, 0x70, 0xa4, 0x78, 0xad, 0x74,
	0x3f, 0xf3, 0x49, 0xfd, 0xe3, 0xcd, 0xd6, 0x46, 0x18, 0x6a, 0x9b, 0x9d, 0xb4, 0x85, 0xe9, 0x28,
	0x70, 0xc7, 0xed, 0xbe, 0x76, 0xbf, 0xfd, 0xba, 0xc3, 0xca, 0x69, 0xef, 0x6b, 0xf7, 0xf3, 0x5f,
	0xbf, 0x7c, 0x52, 0x49, 0x6e, 0x97, 0x36, 0xde, 0x1e, 0xe3, 0x4f, 0x59, 0x0d, 0xa4, 0x34, 0xdf,
	0x4b, 0x61, 0x1d, 0x47, 0x0d, 0x03, 0x89, 0x19, 0x05, 0xf0, 0x56, 0xb2, 0x36, 0x05, 0x1e, 0x85,
	0x7a, 0xeb, 0x87, 0x88, 0xad, 0xce, 0x8c, 0x09, 0xed, 0x2c, 0x8c, 0x79, 0xe8, 0xef, 0x10, 0xca,
	0x8d, 0xa2, 0x37, 0x8b, 0x92, 0x35, 0x05, 0x63, 0x22, 0xef, 0x43, 0xd8, 0x9c, 0xb8, 0xc3, 0xee,
	0x94, 0x4d, 0xf4, 0xdc, 0xd4, 0x58, 0xc7, 0xb5, 0xd1, 0x48, 0xcb, 0x45, 0x49, 0x2d, 0x60, 0xfb,
	0x60, 0x1f, 0x1a, 0xeb, 0xbe, 0x35, 0x1a, 0x7d, 0xff, 0x17, 0x05, 0xaa, 0x90, 0x4e, 0x8c, 0xa4,
	0xc0, 0x9c, 0x2b, 0x93, 0x21, 0x85, 0x3e, 0x4a, 0x36, 0xe7, 0xb4, 0x07, 0x53, 0xce, 0x81, 0xc9,
	0xbc, 0xcb, 0xf6, 0xff, 0xb9, 0x70, 0xe0, 0x19, 0xe5, 0x3f, 0x4a, 0x1a, 0xff, 0x65, 0xb3, 0xd7,
	0x8b, 0x5b, 0xac, 0x3a, 0x95, 0x0f, 0xc0, 0x22, 0xa5, 0x3e, 0x4a, 0x56, 0x87, 0x81, 0xdc, 0x05,
	0x8b, 0xf1, 0x37, 0x6c, 0xd3, 0x0f, 0x41, 0xe1, 0x84, 0xd1, 0x97, 0x8b, 0x1d, 0x81, 0x94, 0x3e,
	0x28, 0x14, 0xf6, 0x28, 0xa9, 0x4f, 0x29, 0xe5, 0x3a, 0x8f, 0x4b, 0x3c, 0x7e, 0xce, 0xd8, 0xa0,
	0xc8, 0x35, 0xcf, 0xc1, 0x09, 0x43, 0xc9, 0x5e, 0xe9, 0x7e, 0x51, 0xf6, 0x77, 0xf3, 0x6a, 0x7f,
	0x9f, 0xe0, 0x10, 0xd2, 0x49, 0x0f, 0xd3, 0x99, 0x2e, 0xf7, 0x30, 0x0d, 0x5d, 0x5e, 0xf1, 0x4e,
	0x89, 0x37, 0x8a, 0x3f, 0x62, 0xef, 0xfa, 0x2e, 0xe5, 0x68, 0x0b, 0xe9, 0x68, 0xfa, 0xcb, 0xec,
	0x57, 0x15, 0x8c, 0x13, 0xaa, 0xfa, 0x79, 0x8f, 0x77, 0xd9, 0xc6, 0x45, 0x37, 0x05, 0x5a, 0x3e,
	0xc2, 0x3c, 0x9c, 0x2c, 0x65, 0xde, 0xe3, 0xb2, 0x9f, 0x02, 0xed, 0x21, 0xe6, 0x74, 0xb0, 0x74,
	0xfb, 0xaf, 0xce, 0x9a, 0x95, 0xd7, 0x67, 0xcd, 0xca, 0x9f, 0x67, 0xcd, 0xca, 0x8f, 0xe7, 0xcd,
	0xa5, 0xd7, 0xe7, 0xcd, 0xa5, 0xdf, 0xcf, 0x9b, 0x4b, 0x2f, 0x3a, 0x43, 0xe1, 0x8e, 0x8b, 0x41,
	0x3b, 0x35, 0xaa, 0xe3, 0xcf, 0x5a, 0xba, 0x43, 0x52, 0x23, 0xe9, 0x61, 0x27, 0xdc, 0x5d, 0xe3,
	0x70, 0x7b, 0xb9, 0xc9, 0x08, 0xed, 0x60, 0x99, 0x18, 0xf7, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0xec, 0x2e, 0x07, 0xfe, 0xdc, 0x06, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TallyConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.StakingConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.DataRequestConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DataRequestConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataRequestConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataRequestConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SEDAPayloadLimitInBytes != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.SEDAPayloadLimitInBytes))
		i--
		dAtA[i] = 0x50
	}
	if m.PaybackAddressLimitInBytes != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.PaybackAddressLimitInBytes))
		i--
		dAtA[i] = 0x48
	}
	if m.MemoLimitInBytes != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.MemoLimitInBytes))
		i--
		dAtA[i] = 0x40
	}
	if m.ConsensusFilterLimitInBytes != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.ConsensusFilterLimitInBytes))
		i--
		dAtA[i] = 0x38
	}
	if m.TallyInputLimitInBytes != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.TallyInputLimitInBytes))
		i--
		dAtA[i] = 0x30
	}
	if m.ExecInputLimitInBytes != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.ExecInputLimitInBytes))
		i--
		dAtA[i] = 0x28
	}
	if m.DrRevealSizeLimitInBytes != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.DrRevealSizeLimitInBytes))
		i--
		dAtA[i] = 0x20
	}
	if m.BackupDelayInBlocks != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.BackupDelayInBlocks))
		i--
		dAtA[i] = 0x18
	}
	if m.RevealTimeoutInBlocks != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.RevealTimeoutInBlocks))
		i--
		dAtA[i] = 0x10
	}
	if m.CommitTimeoutInBlocks != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.CommitTimeoutInBlocks))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StakingConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowlistEnabled {
		i--
		if m.AllowlistEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.MinimumStake.Size()
		i -= size
		if _, err := m.MinimumStake.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TallyConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TallyConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TallyConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxTalliesPerBlock != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.MaxTalliesPerBlock))
		i--
		dAtA[i] = 0x48
	}
	if m.MaxResultSize != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.MaxResultSize))
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.BurnRatio.Size()
		i -= size
		if _, err := m.BurnRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.ExecutionGasCostFallback != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.ExecutionGasCostFallback))
		i--
		dAtA[i] = 0x30
	}
	if m.GasCostBase != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.GasCostBase))
		i--
		dAtA[i] = 0x28
	}
	if m.FilterGasCostMultiplierMAD != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.FilterGasCostMultiplierMAD))
		i--
		dAtA[i] = 0x20
	}
	if m.FilterGasCostMultiplierMode != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.FilterGasCostMultiplierMode))
		i--
		dAtA[i] = 0x18
	}
	if m.FilterGasCostNone != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.FilterGasCostNone))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxTallyGasLimit != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.MaxTallyGasLimit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCore(dAtA []byte, offset int, v uint64) int {
	offset -= sovCore(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DataRequestConfig.Size()
	n += 1 + l + sovCore(uint64(l))
	l = m.StakingConfig.Size()
	n += 1 + l + sovCore(uint64(l))
	l = m.TallyConfig.Size()
	n += 1 + l + sovCore(uint64(l))
	return n
}

func (m *DataRequestConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommitTimeoutInBlocks != 0 {
		n += 1 + sovCore(uint64(m.CommitTimeoutInBlocks))
	}
	if m.RevealTimeoutInBlocks != 0 {
		n += 1 + sovCore(uint64(m.RevealTimeoutInBlocks))
	}
	if m.BackupDelayInBlocks != 0 {
		n += 1 + sovCore(uint64(m.BackupDelayInBlocks))
	}
	if m.DrRevealSizeLimitInBytes != 0 {
		n += 1 + sovCore(uint64(m.DrRevealSizeLimitInBytes))
	}
	if m.ExecInputLimitInBytes != 0 {
		n += 1 + sovCore(uint64(m.ExecInputLimitInBytes))
	}
	if m.TallyInputLimitInBytes != 0 {
		n += 1 + sovCore(uint64(m.TallyInputLimitInBytes))
	}
	if m.ConsensusFilterLimitInBytes != 0 {
		n += 1 + sovCore(uint64(m.ConsensusFilterLimitInBytes))
	}
	if m.MemoLimitInBytes != 0 {
		n += 1 + sovCore(uint64(m.MemoLimitInBytes))
	}
	if m.PaybackAddressLimitInBytes != 0 {
		n += 1 + sovCore(uint64(m.PaybackAddressLimitInBytes))
	}
	if m.SEDAPayloadLimitInBytes != 0 {
		n += 1 + sovCore(uint64(m.SEDAPayloadLimitInBytes))
	}
	return n
}

func (m *StakingConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MinimumStake.Size()
	n += 1 + l + sovCore(uint64(l))
	if m.AllowlistEnabled {
		n += 2
	}
	return n
}

func (m *TallyConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxTallyGasLimit != 0 {
		n += 1 + sovCore(uint64(m.MaxTallyGasLimit))
	}
	if m.FilterGasCostNone != 0 {
		n += 1 + sovCore(uint64(m.FilterGasCostNone))
	}
	if m.FilterGasCostMultiplierMode != 0 {
		n += 1 + sovCore(uint64(m.FilterGasCostMultiplierMode))
	}
	if m.FilterGasCostMultiplierMAD != 0 {
		n += 1 + sovCore(uint64(m.FilterGasCostMultiplierMAD))
	}
	if m.GasCostBase != 0 {
		n += 1 + sovCore(uint64(m.GasCostBase))
	}
	if m.ExecutionGasCostFallback != 0 {
		n += 1 + sovCore(uint64(m.ExecutionGasCostFallback))
	}
	l = m.BurnRatio.Size()
	n += 1 + l + sovCore(uint64(l))
	if m.MaxResultSize != 0 {
		n += 1 + sovCore(uint64(m.MaxResultSize))
	}
	if m.MaxTalliesPerBlock != 0 {
		n += 1 + sovCore(uint64(m.MaxTalliesPerBlock))
	}
	return n
}

func sovCore(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCore(x uint64) (n int) {
	return sovCore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRequestConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DataRequestConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakingConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TallyConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TallyConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataRequestConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataRequestConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataRequestConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTimeoutInBlocks", wireType)
			}
			m.CommitTimeoutInBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitTimeoutInBlocks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealTimeoutInBlocks", wireType)
			}
			m.RevealTimeoutInBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevealTimeoutInBlocks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupDelayInBlocks", wireType)
			}
			m.BackupDelayInBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackupDelayInBlocks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrRevealSizeLimitInBytes", wireType)
			}
			m.DrRevealSizeLimitInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DrRevealSizeLimitInBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecInputLimitInBytes", wireType)
			}
			m.ExecInputLimitInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecInputLimitInBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TallyInputLimitInBytes", wireType)
			}
			m.TallyInputLimitInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TallyInputLimitInBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusFilterLimitInBytes", wireType)
			}
			m.ConsensusFilterLimitInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsensusFilterLimitInBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoLimitInBytes", wireType)
			}
			m.MemoLimitInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoLimitInBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaybackAddressLimitInBytes", wireType)
			}
			m.PaybackAddressLimitInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaybackAddressLimitInBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SEDAPayloadLimitInBytes", wireType)
			}
			m.SEDAPayloadLimitInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SEDAPayloadLimitInBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowlistEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowlistEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TallyConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TallyConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TallyConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTallyGasLimit", wireType)
			}
			m.MaxTallyGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTallyGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterGasCostNone", wireType)
			}
			m.FilterGasCostNone = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilterGasCostNone |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterGasCostMultiplierMode", wireType)
			}
			m.FilterGasCostMultiplierMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilterGasCostMultiplierMode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterGasCostMultiplierMAD", wireType)
			}
			m.FilterGasCostMultiplierMAD = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilterGasCostMultiplierMAD |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasCostBase", wireType)
			}
			m.GasCostBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasCostBase |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionGasCostFallback", wireType)
			}
			m.ExecutionGasCostFallback = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionGasCostFallback |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxResultSize", wireType)
			}
			m.MaxResultSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxResultSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTalliesPerBlock", wireType)
			}
			m.MaxTalliesPerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTalliesPerBlock |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCore
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCore
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCore
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCore        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCore          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCore = fmt.Errorf("proto: unexpected end of group")
)
