// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sedachain/core/v1/core.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DataRequestStatus int32

const (
	DATA_REQUEST_COMMITTING DataRequestStatus = 0
	DATA_REQUEST_REVEALING  DataRequestStatus = 1
	DATA_REQUEST_TALLYING   DataRequestStatus = 2
)

var DataRequestStatus_name = map[int32]string{
	0: "DATA_REQUEST_COMMITTING",
	1: "DATA_REQUEST_REVEALING",
	2: "DATA_REQUEST_TALLYING",
}

var DataRequestStatus_value = map[string]int32{
	"DATA_REQUEST_COMMITTING": 0,
	"DATA_REQUEST_REVEALING":  1,
	"DATA_REQUEST_TALLYING":   2,
}

func (x DataRequestStatus) String() string {
	return proto.EnumName(DataRequestStatus_name, int32(x))
}

func (DataRequestStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0152bc97eaf51aad, []int{0}
}

// Staker is an identity that has staked SEDA tokens to perform data request
// execution.
type Staker struct {
	PublicKey         string                `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Memo              string                `protobuf:"bytes,2,opt,name=memo,proto3" json:"memo,omitempty"`
	Staked            cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=staked,proto3,customtype=cosmossdk.io/math.Int" json:"staked"`
	PendingWithdrawal cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=pending_withdrawal,json=pendingWithdrawal,proto3,customtype=cosmossdk.io/math.Int" json:"pending_withdrawal"`
	SequenceNum       uint64                `protobuf:"varint,5,opt,name=sequence_num,json=sequenceNum,proto3" json:"sequence_num,omitempty"`
}

func (m *Staker) Reset()         { *m = Staker{} }
func (m *Staker) String() string { return proto.CompactTextString(m) }
func (*Staker) ProtoMessage()    {}
func (*Staker) Descriptor() ([]byte, []int) {
	return fileDescriptor_0152bc97eaf51aad, []int{0}
}
func (m *Staker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Staker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Staker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Staker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Staker.Merge(m, src)
}
func (m *Staker) XXX_Size() int {
	return m.Size()
}
func (m *Staker) XXX_DiscardUnknown() {
	xxx_messageInfo_Staker.DiscardUnknown(m)
}

var xxx_messageInfo_Staker proto.InternalMessageInfo

func (m *Staker) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *Staker) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Staker) GetSequenceNum() uint64 {
	if m != nil {
		return m.SequenceNum
	}
	return 0
}

type DataRequest struct {
	Id                string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version           string                `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	ExecProgramId     string                `protobuf:"bytes,3,opt,name=exec_program_id,json=execProgramId,proto3" json:"exec_program_id,omitempty"`
	ExecInputs        []byte                `protobuf:"bytes,4,opt,name=exec_inputs,json=execInputs,proto3" json:"exec_inputs,omitempty"`
	ExecGasLimit      uint64                `protobuf:"varint,5,opt,name=exec_gas_limit,json=execGasLimit,proto3" json:"exec_gas_limit,omitempty"`
	TallyProgramId    string                `protobuf:"bytes,6,opt,name=tally_program_id,json=tallyProgramId,proto3" json:"tally_program_id,omitempty"`
	TallyInputs       []byte                `protobuf:"bytes,7,opt,name=tally_inputs,json=tallyInputs,proto3" json:"tally_inputs,omitempty"`
	TallyGasLimit     uint64                `protobuf:"varint,8,opt,name=tally_gas_limit,json=tallyGasLimit,proto3" json:"tally_gas_limit,omitempty"`
	ReplicationFactor uint32                `protobuf:"varint,9,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
	ConsensusFilter   []byte                `protobuf:"bytes,10,opt,name=consensus_filter,json=consensusFilter,proto3" json:"consensus_filter,omitempty"`
	GasPrice          cosmossdk_io_math.Int `protobuf:"bytes,11,opt,name=gas_price,json=gasPrice,proto3,customtype=cosmossdk.io/math.Int" json:"gas_price"`
	Memo              []byte                `protobuf:"bytes,12,opt,name=memo,proto3" json:"memo,omitempty"`
	PaybackAddress    []byte                `protobuf:"bytes,13,opt,name=payback_address,json=paybackAddress,proto3" json:"payback_address,omitempty"`
	SedaPayload       []byte                `protobuf:"bytes,14,opt,name=seda_payload,json=sedaPayload,proto3" json:"seda_payload,omitempty"`
	Height            uint64                `protobuf:"varint,15,opt,name=height,proto3" json:"height,omitempty"`
	PostedGasPrice    cosmossdk_io_math.Int `protobuf:"bytes,16,opt,name=posted_gas_price,json=postedGasPrice,proto3,customtype=cosmossdk.io/math.Int" json:"posted_gas_price"`
	// Commits is a map from staker public keys to their commitments.
	Commits map[string][]byte `protobuf:"bytes,17,rep,name=commits,proto3" json:"commits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Reveals is a map from staker public keys to placeholder booleans.
	Reveals       map[string]bool   `protobuf:"bytes,18,rep,name=reveals,proto3" json:"reveals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Poster        string            `protobuf:"bytes,19,opt,name=poster,proto3" json:"poster,omitempty"`
	Escrow        types.Coin        `protobuf:"bytes,20,opt,name=escrow,proto3" json:"escrow"`
	TimeoutHeight uint64            `protobuf:"varint,21,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height,omitempty"`
	Status        DataRequestStatus `protobuf:"varint,22,opt,name=status,proto3,enum=sedachain.core.v1.DataRequestStatus" json:"status,omitempty"`
}

func (m *DataRequest) Reset()         { *m = DataRequest{} }
func (m *DataRequest) String() string { return proto.CompactTextString(m) }
func (*DataRequest) ProtoMessage()    {}
func (*DataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0152bc97eaf51aad, []int{1}
}
func (m *DataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRequest.Merge(m, src)
}
func (m *DataRequest) XXX_Size() int {
	return m.Size()
}
func (m *DataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DataRequest proto.InternalMessageInfo

func (m *DataRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DataRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *DataRequest) GetExecProgramId() string {
	if m != nil {
		return m.ExecProgramId
	}
	return ""
}

func (m *DataRequest) GetExecInputs() []byte {
	if m != nil {
		return m.ExecInputs
	}
	return nil
}

func (m *DataRequest) GetExecGasLimit() uint64 {
	if m != nil {
		return m.ExecGasLimit
	}
	return 0
}

func (m *DataRequest) GetTallyProgramId() string {
	if m != nil {
		return m.TallyProgramId
	}
	return ""
}

func (m *DataRequest) GetTallyInputs() []byte {
	if m != nil {
		return m.TallyInputs
	}
	return nil
}

func (m *DataRequest) GetTallyGasLimit() uint64 {
	if m != nil {
		return m.TallyGasLimit
	}
	return 0
}

func (m *DataRequest) GetReplicationFactor() uint32 {
	if m != nil {
		return m.ReplicationFactor
	}
	return 0
}

func (m *DataRequest) GetConsensusFilter() []byte {
	if m != nil {
		return m.ConsensusFilter
	}
	return nil
}

func (m *DataRequest) GetMemo() []byte {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *DataRequest) GetPaybackAddress() []byte {
	if m != nil {
		return m.PaybackAddress
	}
	return nil
}

func (m *DataRequest) GetSedaPayload() []byte {
	if m != nil {
		return m.SedaPayload
	}
	return nil
}

func (m *DataRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *DataRequest) GetCommits() map[string][]byte {
	if m != nil {
		return m.Commits
	}
	return nil
}

func (m *DataRequest) GetReveals() map[string]bool {
	if m != nil {
		return m.Reveals
	}
	return nil
}

func (m *DataRequest) GetPoster() string {
	if m != nil {
		return m.Poster
	}
	return ""
}

func (m *DataRequest) GetEscrow() types.Coin {
	if m != nil {
		return m.Escrow
	}
	return types.Coin{}
}

func (m *DataRequest) GetTimeoutHeight() uint64 {
	if m != nil {
		return m.TimeoutHeight
	}
	return 0
}

func (m *DataRequest) GetStatus() DataRequestStatus {
	if m != nil {
		return m.Status
	}
	return DATA_REQUEST_COMMITTING
}

// Params defines the parameters for the core module.
type Params struct {
	DataRequestConfig DataRequestConfig `protobuf:"bytes,1,opt,name=data_request_config,json=dataRequestConfig,proto3" json:"data_request_config"`
	StakingConfig     StakingConfig     `protobuf:"bytes,2,opt,name=staking_config,json=stakingConfig,proto3" json:"staking_config"`
	TallyConfig       TallyConfig       `protobuf:"bytes,3,opt,name=tally_config,json=tallyConfig,proto3" json:"tally_config"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_0152bc97eaf51aad, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetDataRequestConfig() DataRequestConfig {
	if m != nil {
		return m.DataRequestConfig
	}
	return DataRequestConfig{}
}

func (m *Params) GetStakingConfig() StakingConfig {
	if m != nil {
		return m.StakingConfig
	}
	return StakingConfig{}
}

func (m *Params) GetTallyConfig() TallyConfig {
	if m != nil {
		return m.TallyConfig
	}
	return TallyConfig{}
}

// DataRequestConfig defines data request-related parameters.
type DataRequestConfig struct {
	// Number of blocks after which a data request is timed out while waiting
	// for commits.
	CommitTimeoutInBlocks uint32 `protobuf:"varint,1,opt,name=commit_timeout_in_blocks,json=commitTimeoutInBlocks,proto3" json:"commit_timeout_in_blocks,omitempty"`
	// Number of blocks after which a data request is timed out while waiting
	// for reveals.
	RevealTimeoutInBlocks uint32 `protobuf:"varint,2,opt,name=reveal_timeout_in_blocks,json=revealTimeoutInBlocks,proto3" json:"reveal_timeout_in_blocks,omitempty"`
	// Delay in blocks before the backup executors are allowed to start executing
	// the data request.
	BackupDelayInBlocks uint32 `protobuf:"varint,3,opt,name=backup_delay_in_blocks,json=backupDelayInBlocks,proto3" json:"backup_delay_in_blocks,omitempty"`
	// Maximum size of all the reveals in a data request.
	DrRevealSizeLimitInBytes uint32 `protobuf:"varint,4,opt,name=dr_reveal_size_limit_in_bytes,json=drRevealSizeLimitInBytes,proto3" json:"dr_reveal_size_limit_in_bytes,omitempty"`
	// Maximum size of the input for the execution program.
	ExecInputLimitInBytes uint32 `protobuf:"varint,5,opt,name=exec_input_limit_in_bytes,json=execInputLimitInBytes,proto3" json:"exec_input_limit_in_bytes,omitempty"`
	// Maximum size of the input for the tally program.
	TallyInputLimitInBytes uint32 `protobuf:"varint,6,opt,name=tally_input_limit_in_bytes,json=tallyInputLimitInBytes,proto3" json:"tally_input_limit_in_bytes,omitempty"`
	// Maximum size of the consensus filter.
	ConsensusFilterLimitInBytes uint32 `protobuf:"varint,7,opt,name=consensus_filter_limit_in_bytes,json=consensusFilterLimitInBytes,proto3" json:"consensus_filter_limit_in_bytes,omitempty"`
	// Maximum size of the memo.
	MemoLimitInBytes uint32 `protobuf:"varint,8,opt,name=memo_limit_in_bytes,json=memoLimitInBytes,proto3" json:"memo_limit_in_bytes,omitempty"`
	// Maximum size of the payback address.
	PaybackAddressLimitInBytes uint32 `protobuf:"varint,9,opt,name=payback_address_limit_in_bytes,json=paybackAddressLimitInBytes,proto3" json:"payback_address_limit_in_bytes,omitempty"`
	// Maximum size of the SEDA payload.
	SEDAPayloadLimitInBytes uint32 `protobuf:"varint,10,opt,name=s_e_d_a_payload_limit_in_bytes,json=sEDAPayloadLimitInBytes,proto3" json:"s_e_d_a_payload_limit_in_bytes,omitempty"`
}

func (m *DataRequestConfig) Reset()         { *m = DataRequestConfig{} }
func (m *DataRequestConfig) String() string { return proto.CompactTextString(m) }
func (*DataRequestConfig) ProtoMessage()    {}
func (*DataRequestConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0152bc97eaf51aad, []int{3}
}
func (m *DataRequestConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataRequestConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataRequestConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataRequestConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRequestConfig.Merge(m, src)
}
func (m *DataRequestConfig) XXX_Size() int {
	return m.Size()
}
func (m *DataRequestConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRequestConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DataRequestConfig proto.InternalMessageInfo

func (m *DataRequestConfig) GetCommitTimeoutInBlocks() uint32 {
	if m != nil {
		return m.CommitTimeoutInBlocks
	}
	return 0
}

func (m *DataRequestConfig) GetRevealTimeoutInBlocks() uint32 {
	if m != nil {
		return m.RevealTimeoutInBlocks
	}
	return 0
}

func (m *DataRequestConfig) GetBackupDelayInBlocks() uint32 {
	if m != nil {
		return m.BackupDelayInBlocks
	}
	return 0
}

func (m *DataRequestConfig) GetDrRevealSizeLimitInBytes() uint32 {
	if m != nil {
		return m.DrRevealSizeLimitInBytes
	}
	return 0
}

func (m *DataRequestConfig) GetExecInputLimitInBytes() uint32 {
	if m != nil {
		return m.ExecInputLimitInBytes
	}
	return 0
}

func (m *DataRequestConfig) GetTallyInputLimitInBytes() uint32 {
	if m != nil {
		return m.TallyInputLimitInBytes
	}
	return 0
}

func (m *DataRequestConfig) GetConsensusFilterLimitInBytes() uint32 {
	if m != nil {
		return m.ConsensusFilterLimitInBytes
	}
	return 0
}

func (m *DataRequestConfig) GetMemoLimitInBytes() uint32 {
	if m != nil {
		return m.MemoLimitInBytes
	}
	return 0
}

func (m *DataRequestConfig) GetPaybackAddressLimitInBytes() uint32 {
	if m != nil {
		return m.PaybackAddressLimitInBytes
	}
	return 0
}

func (m *DataRequestConfig) GetSEDAPayloadLimitInBytes() uint32 {
	if m != nil {
		return m.SEDAPayloadLimitInBytes
	}
	return 0
}

// StakingConfig defines staking-related parameters.
type StakingConfig struct {
	// MiminumStake is the minimum amount of SEDA tokens required to register as
	// an Overlay.
	MinimumStake cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=minimum_stake,json=minimumStake,proto3,customtype=cosmossdk.io/math.Int" json:"minimum_stake"`
	// AllowlistEnabled is a flag that indicates whether the allowlist is enabled.
	AllowlistEnabled bool `protobuf:"varint,2,opt,name=allowlist_enabled,json=allowlistEnabled,proto3" json:"allowlist_enabled,omitempty"`
}

func (m *StakingConfig) Reset()         { *m = StakingConfig{} }
func (m *StakingConfig) String() string { return proto.CompactTextString(m) }
func (*StakingConfig) ProtoMessage()    {}
func (*StakingConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0152bc97eaf51aad, []int{4}
}
func (m *StakingConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingConfig.Merge(m, src)
}
func (m *StakingConfig) XXX_Size() int {
	return m.Size()
}
func (m *StakingConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StakingConfig proto.InternalMessageInfo

func (m *StakingConfig) GetAllowlistEnabled() bool {
	if m != nil {
		return m.AllowlistEnabled
	}
	return false
}

// TallyConfig definfes tally-related parameters.
type TallyConfig struct {
	// MaxTallyGasLimit is the maximum gas limit for a tally request.
	MaxTallyGasLimit uint64 `protobuf:"varint,1,opt,name=max_tally_gas_limit,json=maxTallyGasLimit,proto3" json:"max_tally_gas_limit,omitempty"`
	// FilterGasCostNone is the gas cost for a filter type none.
	FilterGasCostNone uint64 `protobuf:"varint,2,opt,name=filter_gas_cost_none,json=filterGasCostNone,proto3" json:"filter_gas_cost_none,omitempty"`
	// FilterGasCostMultiplierMode is the gas cost multiplier for a filter type
	// mode.
	FilterGasCostMultiplierMode uint64 `protobuf:"varint,3,opt,name=filter_gas_cost_multiplier_mode,json=filterGasCostMultiplierMode,proto3" json:"filter_gas_cost_multiplier_mode,omitempty"`
	// FilterGasCostMAD is the gas cost multiplier for a filter type
	// Median Absolute Deviation.
	FilterGasCostMultiplierMAD uint64 `protobuf:"varint,4,opt,name=filter_gas_cost_multiplier_m_a_d,json=filterGasCostMultiplierMAD,proto3" json:"filter_gas_cost_multiplier_m_a_d,omitempty"`
	// GasCostBase is the base gas cost for a data request.
	GasCostBase uint64 `protobuf:"varint,5,opt,name=gas_cost_base,json=gasCostBase,proto3" json:"gas_cost_base,omitempty"`
	// GasCostFallback is the gas cost incurred for data request execution when
	// even basic consensus has not been reached.
	ExecutionGasCostFallback uint64 `protobuf:"varint,6,opt,name=execution_gas_cost_fallback,json=executionGasCostFallback,proto3" json:"execution_gas_cost_fallback,omitempty"`
	// BurnRatio is the ratio of the gas cost to be burned in case of reduced
	// payout scenarios.
	BurnRatio cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=burn_ratio,json=burnRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"burn_ratio"`
	// MaxResultSize is the maximum size of the result of a data request in bytes.
	MaxResultSize uint32 `protobuf:"varint,8,opt,name=max_result_size,json=maxResultSize,proto3" json:"max_result_size,omitempty"`
	// MaxTalliesPerBlock specifies the maximum number of tallies per block.
	MaxTalliesPerBlock uint32 `protobuf:"varint,9,opt,name=max_tallies_per_block,json=maxTalliesPerBlock,proto3" json:"max_tallies_per_block,omitempty"`
}

func (m *TallyConfig) Reset()         { *m = TallyConfig{} }
func (m *TallyConfig) String() string { return proto.CompactTextString(m) }
func (*TallyConfig) ProtoMessage()    {}
func (*TallyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0152bc97eaf51aad, []int{5}
}
func (m *TallyConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TallyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TallyConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TallyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TallyConfig.Merge(m, src)
}
func (m *TallyConfig) XXX_Size() int {
	return m.Size()
}
func (m *TallyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TallyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TallyConfig proto.InternalMessageInfo

func (m *TallyConfig) GetMaxTallyGasLimit() uint64 {
	if m != nil {
		return m.MaxTallyGasLimit
	}
	return 0
}

func (m *TallyConfig) GetFilterGasCostNone() uint64 {
	if m != nil {
		return m.FilterGasCostNone
	}
	return 0
}

func (m *TallyConfig) GetFilterGasCostMultiplierMode() uint64 {
	if m != nil {
		return m.FilterGasCostMultiplierMode
	}
	return 0
}

func (m *TallyConfig) GetFilterGasCostMultiplierMAD() uint64 {
	if m != nil {
		return m.FilterGasCostMultiplierMAD
	}
	return 0
}

func (m *TallyConfig) GetGasCostBase() uint64 {
	if m != nil {
		return m.GasCostBase
	}
	return 0
}

func (m *TallyConfig) GetExecutionGasCostFallback() uint64 {
	if m != nil {
		return m.ExecutionGasCostFallback
	}
	return 0
}

func (m *TallyConfig) GetMaxResultSize() uint32 {
	if m != nil {
		return m.MaxResultSize
	}
	return 0
}

func (m *TallyConfig) GetMaxTalliesPerBlock() uint32 {
	if m != nil {
		return m.MaxTalliesPerBlock
	}
	return 0
}

func init() {
	proto.RegisterEnum("sedachain.core.v1.DataRequestStatus", DataRequestStatus_name, DataRequestStatus_value)
	proto.RegisterType((*Staker)(nil), "sedachain.core.v1.Staker")
	proto.RegisterType((*DataRequest)(nil), "sedachain.core.v1.DataRequest")
	proto.RegisterMapType((map[string][]byte)(nil), "sedachain.core.v1.DataRequest.CommitsEntry")
	proto.RegisterMapType((map[string]bool)(nil), "sedachain.core.v1.DataRequest.RevealsEntry")
	proto.RegisterType((*Params)(nil), "sedachain.core.v1.Params")
	proto.RegisterType((*DataRequestConfig)(nil), "sedachain.core.v1.DataRequestConfig")
	proto.RegisterType((*StakingConfig)(nil), "sedachain.core.v1.StakingConfig")
	proto.RegisterType((*TallyConfig)(nil), "sedachain.core.v1.TallyConfig")
}

func init() { proto.RegisterFile("sedachain/core/v1/core.proto", fileDescriptor_0152bc97eaf51aad) }

var fileDescriptor_0152bc97eaf51aad = []byte{
	// 1462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xce, 0x26, 0xae, 0x93, 0x8c, 0x3f, 0x62, 0x4f, 0x3e, 0xba, 0x71, 0xa8, 0xe3, 0x46, 0xa5,
	0x84, 0x56, 0xb1, 0x69, 0x2b, 0x41, 0x55, 0x15, 0x55, 0x71, 0xec, 0x06, 0x8b, 0xa4, 0x84, 0x8d,
	0x0b, 0x22, 0x97, 0xd1, 0x78, 0x77, 0xe2, 0x8c, 0xb2, 0xbb, 0x63, 0x76, 0x66, 0x93, 0xb8, 0xbf,
	0x80, 0x13, 0x42, 0xe2, 0x27, 0x70, 0xe1, 0xc8, 0x81, 0x1f, 0xd1, 0x63, 0xc5, 0x09, 0x38, 0x54,
	0xa8, 0x3d, 0x70, 0xe0, 0x2f, 0x20, 0x81, 0xe6, 0xc3, 0x8e, 0xd7, 0x2d, 0x2d, 0xed, 0x25, 0xf1,
	0x3e, 0xef, 0xfb, 0x3c, 0xef, 0xce, 0x3b, 0xef, 0x3c, 0xbb, 0x0b, 0xde, 0xe1, 0xc4, 0xc3, 0xee,
	0x11, 0xa6, 0x61, 0xcd, 0x65, 0x11, 0xa9, 0x9d, 0xdc, 0x50, 0xff, 0xab, 0xbd, 0x88, 0x09, 0x06,
	0x8b, 0xc3, 0x68, 0x55, 0xa1, 0x27, 0x37, 0x4a, 0x0b, 0x5d, 0xd6, 0x65, 0x2a, 0x5a, 0x93, 0xbf,
	0x74, 0x62, 0xa9, 0x88, 0x03, 0x1a, 0xb2, 0x9a, 0xfa, 0x6b, 0xa0, 0x65, 0x97, 0xf1, 0x80, 0x71,
	0xa4, 0x73, 0xf5, 0x85, 0x09, 0x95, 0xf5, 0x55, 0xad, 0x83, 0xb9, 0xac, 0xd8, 0x21, 0x02, 0xcb,
	0xb2, 0x34, 0xd4, 0xf1, 0xb5, 0x7f, 0x2c, 0x90, 0xde, 0x17, 0xf8, 0x98, 0x44, 0xf0, 0x12, 0x00,
	0xbd, 0xb8, 0xe3, 0x53, 0x17, 0x1d, 0x93, 0xbe, 0x6d, 0x55, 0xac, 0xf5, 0x59, 0x67, 0x56, 0x23,
	0x9f, 0x92, 0x3e, 0x84, 0x20, 0x15, 0x90, 0x80, 0xd9, 0x93, 0x2a, 0xa0, 0x7e, 0xc3, 0x2d, 0x90,
	0xe6, 0x92, 0xec, 0xd9, 0x53, 0x12, 0xad, 0x5f, 0x7f, 0xfc, 0x74, 0x75, 0xe2, 0xf7, 0xa7, 0xab,
	0x8b, 0xba, 0x2a, 0xf7, 0x8e, 0xab, 0x94, 0xd5, 0x02, 0x2c, 0x8e, 0xaa, 0xad, 0x50, 0xfc, 0xf2,
	0xf3, 0x06, 0x30, 0x37, 0xd7, 0x0a, 0x85, 0x63, 0xa8, 0xf0, 0x00, 0xc0, 0x1e, 0x09, 0x3d, 0x1a,
	0x76, 0xd1, 0x29, 0x15, 0x47, 0x5e, 0x84, 0x4f, 0xb1, 0x6f, 0xa7, 0xde, 0x5c, 0xb0, 0x68, 0x64,
	0xbe, 0x1c, 0xaa, 0xc0, 0xcb, 0x20, 0xcb, 0xc9, 0xd7, 0x31, 0x09, 0x5d, 0x82, 0xc2, 0x38, 0xb0,
	0x2f, 0x54, 0xac, 0xf5, 0x94, 0x93, 0x19, 0x60, 0x0f, 0xe2, 0x60, 0xed, 0xb7, 0x19, 0x90, 0x69,
	0x60, 0x81, 0x1d, 0x89, 0x71, 0x01, 0xf3, 0x60, 0x92, 0x7a, 0x66, 0xf9, 0x93, 0xd4, 0x83, 0x36,
	0x98, 0x3e, 0x21, 0x11, 0xa7, 0x2c, 0x34, 0x4b, 0x1f, 0x5c, 0xc2, 0xab, 0x60, 0x8e, 0x9c, 0x11,
	0x57, 0xb6, 0xbd, 0x1b, 0xe1, 0x00, 0x51, 0xd3, 0x06, 0x27, 0x27, 0xe1, 0x3d, 0x8d, 0xb6, 0x3c,
	0xb8, 0x0a, 0x32, 0x2a, 0x8f, 0x86, 0xbd, 0x58, 0x70, 0xb5, 0xb2, 0xac, 0x03, 0x24, 0xd4, 0x52,
	0x08, 0xbc, 0x02, 0xf2, 0x2a, 0xa1, 0x8b, 0x39, 0xf2, 0x69, 0x40, 0x85, 0xb9, 0xcf, 0xac, 0x44,
	0xb7, 0x31, 0xdf, 0x91, 0x18, 0x5c, 0x07, 0x05, 0x81, 0x7d, 0xbf, 0x3f, 0x5a, 0x2f, 0xad, 0xea,
	0xe5, 0x15, 0x7e, 0x5e, 0xf0, 0x32, 0xc8, 0xea, 0x4c, 0x53, 0x71, 0x5a, 0x55, 0xcc, 0x28, 0xcc,
	0x94, 0xbc, 0x0a, 0xe6, 0x74, 0xca, 0x79, 0xcd, 0x19, 0x55, 0x33, 0xa7, 0xe0, 0x61, 0xd1, 0x0d,
	0x00, 0x23, 0xd2, 0xf3, 0xa9, 0x8b, 0x05, 0x65, 0x21, 0x3a, 0xc4, 0xae, 0x60, 0x91, 0x3d, 0x5b,
	0xb1, 0xd6, 0x73, 0x4e, 0x71, 0x24, 0x72, 0x5f, 0x05, 0xe0, 0xfb, 0xa0, 0xe0, 0xb2, 0x90, 0x93,
	0x90, 0xc7, 0x1c, 0x1d, 0x52, 0x5f, 0x90, 0xc8, 0x06, 0xaa, 0xfa, 0xdc, 0x10, 0xbf, 0xaf, 0x60,
	0xb8, 0x0b, 0x66, 0x65, 0xed, 0x5e, 0x44, 0x5d, 0x62, 0x67, 0xd4, 0x6e, 0x7f, 0xf0, 0x06, 0xbb,
	0xfd, 0xe3, 0x9f, 0x3f, 0x5d, 0xb3, 0x9c, 0x99, 0x2e, 0xe6, 0x7b, 0x52, 0x61, 0x38, 0x9e, 0x59,
	0x55, 0x4d, 0x8f, 0xe7, 0x7b, 0x60, 0xae, 0x87, 0xfb, 0x1d, 0xec, 0x1e, 0x23, 0xec, 0x79, 0x11,
	0xe1, 0xdc, 0xce, 0xa9, 0x70, 0xde, 0xc0, 0x9b, 0x1a, 0xd5, 0x63, 0xe2, 0x61, 0xd4, 0xc3, 0x7d,
	0x9f, 0x61, 0xcf, 0xce, 0xeb, 0x86, 0x49, 0x6c, 0x4f, 0x43, 0x70, 0x09, 0xa4, 0x8f, 0x08, 0xed,
	0x1e, 0x09, 0x7b, 0x4e, 0xf5, 0xc9, 0x5c, 0xc1, 0x03, 0x50, 0xe8, 0x31, 0x2e, 0x88, 0x87, 0xce,
	0x57, 0x53, 0x78, 0xcb, 0xd5, 0xe4, 0xb5, 0xd2, 0xf6, 0x60, 0x4d, 0x4d, 0x30, 0xed, 0xb2, 0x20,
	0xa0, 0x82, 0xdb, 0xc5, 0xca, 0xd4, 0x7a, 0xe6, 0xe6, 0xf5, 0xea, 0x0b, 0x2e, 0x51, 0x1d, 0x99,
	0xdd, 0xea, 0x96, 0xce, 0x6e, 0x86, 0x22, 0xea, 0x3b, 0x03, 0xae, 0x94, 0x89, 0xc8, 0x09, 0xc1,
	0x3e, 0xb7, 0xe1, 0xff, 0x92, 0x71, 0x74, 0xb6, 0x91, 0x31, 0x5c, 0xd9, 0x01, 0x75, 0x7f, 0x91,
	0x3d, 0xaf, 0xa6, 0xce, 0x5c, 0xc1, 0xbb, 0x20, 0x4d, 0xb8, 0x1b, 0xb1, 0x53, 0x7b, 0xa1, 0x62,
	0xad, 0x67, 0x6e, 0x2e, 0x57, 0xcd, 0xba, 0xa4, 0xe7, 0x54, 0x8d, 0xe7, 0x54, 0xb7, 0x18, 0x0d,
	0xeb, 0xb3, 0xb2, 0x25, 0x7a, 0xad, 0x86, 0x03, 0xdf, 0x05, 0x79, 0x41, 0x03, 0xc2, 0x62, 0x81,
	0x4c, 0x7f, 0x17, 0xcd, 0x1c, 0x6a, 0xf4, 0x13, 0xdd, 0xe6, 0xbb, 0xca, 0x69, 0x44, 0xcc, 0xed,
	0xa5, 0x8a, 0xb5, 0x9e, 0xbf, 0x79, 0xe5, 0xd5, 0x4b, 0xd8, 0x57, 0xb9, 0x8e, 0xe1, 0x94, 0xee,
	0x80, 0xec, 0x68, 0x6b, 0x60, 0x01, 0x4c, 0x9d, 0x7b, 0x9c, 0xfc, 0x09, 0x17, 0xc0, 0x85, 0x13,
	0xec, 0xc7, 0x44, 0x9d, 0xf1, 0xac, 0xa3, 0x2f, 0xee, 0x4c, 0xde, 0xb6, 0x24, 0x77, 0xb4, 0x1f,
	0xaf, 0xe3, 0xce, 0x8c, 0x70, 0xd7, 0xfe, 0xb6, 0x40, 0x7a, 0x0f, 0x47, 0x38, 0xe0, 0xf0, 0x00,
	0xcc, 0x7b, 0x58, 0x60, 0x14, 0xe9, 0x1b, 0x44, 0x2e, 0x0b, 0x0f, 0x69, 0x57, 0xc9, 0x64, 0x5e,
	0xb7, 0x9a, 0x2d, 0x95, 0x5b, 0x4f, 0xc9, 0xee, 0x39, 0x45, 0x6f, 0x3c, 0x00, 0x77, 0x41, 0x5e,
	0x7a, 0xa9, 0x74, 0x50, 0x23, 0x3b, 0xa9, 0x64, 0x2b, 0x2f, 0x91, 0xdd, 0xd7, 0x89, 0x09, 0xc9,
	0x1c, 0x1f, 0x05, 0xe1, 0xf6, 0xc0, 0x3e, 0x8c, 0xd8, 0x94, 0x12, 0x2b, 0xbf, 0x44, 0xac, 0x2d,
	0xd3, 0x12, 0x52, 0xda, 0x64, 0x34, 0xb4, 0xf6, 0x57, 0x0a, 0x14, 0x5f, 0x58, 0x06, 0xfc, 0x08,
	0xd8, 0x7a, 0x32, 0xd1, 0x60, 0xe3, 0x69, 0x88, 0x3a, 0x3e, 0x73, 0x8f, 0xb9, 0x6a, 0x47, 0xce,
	0x59, 0xd4, 0xf1, 0xb6, 0x0e, 0xb7, 0xc2, 0xba, 0x0a, 0x4a, 0xa2, 0x9e, 0xc5, 0x97, 0x10, 0x27,
	0x35, 0x51, 0xc7, 0xc7, 0x89, 0xb7, 0xc0, 0x92, 0x3c, 0xed, 0x71, 0x0f, 0x79, 0xc4, 0xc7, 0xfd,
	0x11, 0xda, 0x94, 0xa2, 0xcd, 0xeb, 0x68, 0x43, 0x06, 0x87, 0xa4, 0x7b, 0xe0, 0x92, 0x17, 0x21,
	0x53, 0x90, 0xd3, 0x47, 0x44, 0xdb, 0xa4, 0x22, 0xf7, 0x05, 0xd1, 0x3e, 0x9e, 0x73, 0x6c, 0x2f,
	0xd2, 0xe3, 0xb1, 0x4f, 0x1f, 0x11, 0xe5, 0x99, 0xad, 0xb0, 0x2e, 0xe3, 0xf0, 0x36, 0x58, 0x3e,
	0xb7, 0xfd, 0x71, 0xf2, 0x05, 0x7d, 0xbf, 0xc3, 0x87, 0x40, 0x82, 0x79, 0x07, 0x94, 0x46, 0xfc,
	0x7b, 0x9c, 0x9a, 0x56, 0xd4, 0xa5, 0x73, 0x37, 0x4f, 0x70, 0x1b, 0x60, 0x75, 0xdc, 0x81, 0xc7,
	0x05, 0xa6, 0x95, 0xc0, 0xca, 0x98, 0x21, 0x27, 0x54, 0x36, 0xc0, 0xbc, 0x74, 0xd0, 0x71, 0xe6,
	0x8c, 0x62, 0x16, 0x64, 0x28, 0x91, 0x5e, 0x07, 0xe5, 0x31, 0xa3, 0x1d, 0x67, 0xea, 0x27, 0x46,
	0x29, 0xe9, 0xbb, 0x09, 0x8d, 0x7b, 0xa0, 0xcc, 0x11, 0x41, 0x1e, 0x1a, 0xda, 0xf0, 0xb8, 0x06,
	0x50, 0x1a, 0x17, 0x79, 0xb3, 0xb1, 0x69, 0x5c, 0x79, 0x54, 0x60, 0xed, 0x7b, 0x0b, 0xe4, 0x12,
	0xd3, 0x0d, 0x1f, 0x82, 0x5c, 0x40, 0x43, 0x1a, 0xc4, 0x01, 0x52, 0xef, 0x1a, 0xfa, 0xd0, 0xbe,
	0x85, 0x31, 0x67, 0x8d, 0x8c, 0x7a, 0x53, 0x82, 0xd7, 0x41, 0x11, 0xfb, 0x3e, 0x3b, 0xf5, 0x29,
	0x17, 0x88, 0x84, 0xb8, 0xe3, 0x13, 0xcf, 0x9c, 0xfd, 0xc2, 0x30, 0xd0, 0xd4, 0xf8, 0xda, 0xb7,
	0x29, 0x90, 0x19, 0x39, 0x26, 0xaa, 0xb3, 0xf8, 0x0c, 0x8d, 0x3f, 0x7c, 0x2d, 0x65, 0x7a, 0x85,
	0x00, 0x9f, 0xb5, 0x13, 0xcf, 0xdf, 0x1a, 0x58, 0x30, 0x9b, 0x28, 0x73, 0x5d, 0xc6, 0x05, 0x0a,
	0x59, 0xa8, 0xad, 0x26, 0xe5, 0x14, 0x75, 0x6c, 0x1b, 0xf3, 0x2d, 0xc6, 0xc5, 0x03, 0x16, 0x12,
	0xb9, 0xff, 0xe3, 0x84, 0x20, 0xf6, 0x05, 0xed, 0xf9, 0x94, 0x44, 0x28, 0x60, 0x1e, 0x51, 0x43,
	0x9f, 0x72, 0x56, 0x12, 0xdc, 0xdd, 0x61, 0xce, 0x2e, 0xf3, 0xa4, 0x4a, 0xe5, 0x55, 0x2a, 0x08,
	0x23, 0x4f, 0xcd, 0x7f, 0xca, 0x29, 0xfd, 0x97, 0xcc, 0x66, 0x03, 0xae, 0x81, 0xdc, 0x90, 0x2e,
	0x1f, 0x06, 0x83, 0xd7, 0xaf, 0xae, 0x4e, 0xae, 0x63, 0x4e, 0xe0, 0xc7, 0x60, 0x45, 0x1e, 0x82,
	0x58, 0xbd, 0x5e, 0x0c, 0xb3, 0x0f, 0xb1, 0xef, 0xcb, 0x41, 0x51, 0xc3, 0x9e, 0x72, 0xec, 0x61,
	0x8a, 0xa9, 0x73, 0xdf, 0xc4, 0xe1, 0x43, 0x00, 0x3a, 0x71, 0x14, 0xa2, 0x48, 0xbe, 0x85, 0xa8,
	0xc9, 0x9e, 0xad, 0x7f, 0x68, 0xf6, 0x77, 0xe5, 0xc5, 0xfd, 0xdd, 0x21, 0x5d, 0xec, 0xf6, 0x1b,
	0xc4, 0x1d, 0xd9, 0xe5, 0x06, 0x71, 0xf5, 0x2e, 0xcf, 0x4a, 0x25, 0x47, 0x0a, 0xc9, 0xd7, 0x23,
	0xb9, 0x4b, 0x11, 0xe1, 0xb1, 0x2f, 0xd4, 0xe9, 0x37, 0xb3, 0x9f, 0x0b, 0xf0, 0x99, 0xa3, 0x50,
	0x79, 0xde, 0xe1, 0x0d, 0xb0, 0x38, 0xd8, 0x4d, 0x4a, 0x38, 0xea, 0x91, 0x48, 0x3b, 0x8b, 0x99,
	0x77, 0x68, 0xf6, 0x93, 0x12, 0xbe, 0x47, 0x22, 0x65, 0x2c, 0xd7, 0x82, 0x84, 0x27, 0xea, 0x07,
	0x15, 0x5c, 0x01, 0x17, 0x1b, 0x9b, 0xed, 0x4d, 0xe4, 0x34, 0x3f, 0x7f, 0xd8, 0xdc, 0x6f, 0xa3,
	0xad, 0xcf, 0x76, 0x77, 0x5b, 0xed, 0x76, 0xeb, 0xc1, 0x76, 0x61, 0x02, 0x96, 0xc0, 0x52, 0x22,
	0xe8, 0x34, 0xbf, 0x68, 0x6e, 0xee, 0xc8, 0x98, 0x05, 0x97, 0xc1, 0x62, 0x22, 0xd6, 0xde, 0xdc,
	0xd9, 0xf9, 0x4a, 0x86, 0x26, 0x4b, 0xa9, 0x6f, 0x7e, 0x28, 0x4f, 0xd4, 0x5b, 0x8f, 0x9f, 0x95,
	0xad, 0x27, 0xcf, 0xca, 0xd6, 0x1f, 0xcf, 0xca, 0xd6, 0x77, 0xcf, 0xcb, 0x13, 0x4f, 0x9e, 0x97,
	0x27, 0x7e, 0x7d, 0x5e, 0x9e, 0x38, 0xa8, 0x75, 0xa9, 0x38, 0x8a, 0x3b, 0x55, 0x97, 0x05, 0x35,
	0x69, 0xed, 0xea, 0x83, 0xc0, 0x65, 0xbe, 0xba, 0xd8, 0xd0, 0x1f, 0x2a, 0x67, 0xfa, 0x53, 0x45,
	0xf4, 0x7b, 0x84, 0x77, 0xd2, 0x2a, 0xe3, 0xd6, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x91, 0xbb,
	0x81, 0xdb, 0xc9, 0x0c, 0x00, 0x00,
}

func (m *Staker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Staker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Staker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SequenceNum != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.SequenceNum))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.PendingWithdrawal.Size()
		i -= size
		if _, err := m.PendingWithdrawal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Staked.Size()
		i -= size
		if _, err := m.Staked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintCore(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintCore(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.TimeoutHeight != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.TimeoutHeight))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	{
		size, err := m.Escrow.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	if len(m.Poster) > 0 {
		i -= len(m.Poster)
		copy(dAtA[i:], m.Poster)
		i = encodeVarintCore(dAtA, i, uint64(len(m.Poster)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Reveals) > 0 {
		for k := range m.Reveals {
			v := m.Reveals[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCore(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCore(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.Commits) > 0 {
		for k := range m.Commits {
			v := m.Commits[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintCore(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCore(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCore(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	{
		size := m.PostedGasPrice.Size()
		i -= size
		if _, err := m.PostedGasPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	if m.Height != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x78
	}
	if len(m.SedaPayload) > 0 {
		i -= len(m.SedaPayload)
		copy(dAtA[i:], m.SedaPayload)
		i = encodeVarintCore(dAtA, i, uint64(len(m.SedaPayload)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.PaybackAddress) > 0 {
		i -= len(m.PaybackAddress)
		copy(dAtA[i:], m.PaybackAddress)
		i = encodeVarintCore(dAtA, i, uint64(len(m.PaybackAddress)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintCore(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x62
	}
	{
		size := m.GasPrice.Size()
		i -= size
		if _, err := m.GasPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if len(m.ConsensusFilter) > 0 {
		i -= len(m.ConsensusFilter)
		copy(dAtA[i:], m.ConsensusFilter)
		i = encodeVarintCore(dAtA, i, uint64(len(m.ConsensusFilter)))
		i--
		dAtA[i] = 0x52
	}
	if m.ReplicationFactor != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.ReplicationFactor))
		i--
		dAtA[i] = 0x48
	}
	if m.TallyGasLimit != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.TallyGasLimit))
		i--
		dAtA[i] = 0x40
	}
	if len(m.TallyInputs) > 0 {
		i -= len(m.TallyInputs)
		copy(dAtA[i:], m.TallyInputs)
		i = encodeVarintCore(dAtA, i, uint64(len(m.TallyInputs)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TallyProgramId) > 0 {
		i -= len(m.TallyProgramId)
		copy(dAtA[i:], m.TallyProgramId)
		i = encodeVarintCore(dAtA, i, uint64(len(m.TallyProgramId)))
		i--
		dAtA[i] = 0x32
	}
	if m.ExecGasLimit != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.ExecGasLimit))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ExecInputs) > 0 {
		i -= len(m.ExecInputs)
		copy(dAtA[i:], m.ExecInputs)
		i = encodeVarintCore(dAtA, i, uint64(len(m.ExecInputs)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ExecProgramId) > 0 {
		i -= len(m.ExecProgramId)
		copy(dAtA[i:], m.ExecProgramId)
		i = encodeVarintCore(dAtA, i, uint64(len(m.ExecProgramId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintCore(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCore(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TallyConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.StakingConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.DataRequestConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DataRequestConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataRequestConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataRequestConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SEDAPayloadLimitInBytes != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.SEDAPayloadLimitInBytes))
		i--
		dAtA[i] = 0x50
	}
	if m.PaybackAddressLimitInBytes != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.PaybackAddressLimitInBytes))
		i--
		dAtA[i] = 0x48
	}
	if m.MemoLimitInBytes != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.MemoLimitInBytes))
		i--
		dAtA[i] = 0x40
	}
	if m.ConsensusFilterLimitInBytes != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.ConsensusFilterLimitInBytes))
		i--
		dAtA[i] = 0x38
	}
	if m.TallyInputLimitInBytes != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.TallyInputLimitInBytes))
		i--
		dAtA[i] = 0x30
	}
	if m.ExecInputLimitInBytes != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.ExecInputLimitInBytes))
		i--
		dAtA[i] = 0x28
	}
	if m.DrRevealSizeLimitInBytes != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.DrRevealSizeLimitInBytes))
		i--
		dAtA[i] = 0x20
	}
	if m.BackupDelayInBlocks != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.BackupDelayInBlocks))
		i--
		dAtA[i] = 0x18
	}
	if m.RevealTimeoutInBlocks != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.RevealTimeoutInBlocks))
		i--
		dAtA[i] = 0x10
	}
	if m.CommitTimeoutInBlocks != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.CommitTimeoutInBlocks))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StakingConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowlistEnabled {
		i--
		if m.AllowlistEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.MinimumStake.Size()
		i -= size
		if _, err := m.MinimumStake.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TallyConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TallyConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TallyConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxTalliesPerBlock != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.MaxTalliesPerBlock))
		i--
		dAtA[i] = 0x48
	}
	if m.MaxResultSize != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.MaxResultSize))
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.BurnRatio.Size()
		i -= size
		if _, err := m.BurnRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.ExecutionGasCostFallback != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.ExecutionGasCostFallback))
		i--
		dAtA[i] = 0x30
	}
	if m.GasCostBase != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.GasCostBase))
		i--
		dAtA[i] = 0x28
	}
	if m.FilterGasCostMultiplierMAD != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.FilterGasCostMultiplierMAD))
		i--
		dAtA[i] = 0x20
	}
	if m.FilterGasCostMultiplierMode != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.FilterGasCostMultiplierMode))
		i--
		dAtA[i] = 0x18
	}
	if m.FilterGasCostNone != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.FilterGasCostNone))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxTallyGasLimit != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.MaxTallyGasLimit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCore(dAtA []byte, offset int, v uint64) int {
	offset -= sovCore(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Staker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = m.Staked.Size()
	n += 1 + l + sovCore(uint64(l))
	l = m.PendingWithdrawal.Size()
	n += 1 + l + sovCore(uint64(l))
	if m.SequenceNum != 0 {
		n += 1 + sovCore(uint64(m.SequenceNum))
	}
	return n
}

func (m *DataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.ExecProgramId)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.ExecInputs)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	if m.ExecGasLimit != 0 {
		n += 1 + sovCore(uint64(m.ExecGasLimit))
	}
	l = len(m.TallyProgramId)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.TallyInputs)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	if m.TallyGasLimit != 0 {
		n += 1 + sovCore(uint64(m.TallyGasLimit))
	}
	if m.ReplicationFactor != 0 {
		n += 1 + sovCore(uint64(m.ReplicationFactor))
	}
	l = len(m.ConsensusFilter)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = m.GasPrice.Size()
	n += 1 + l + sovCore(uint64(l))
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.PaybackAddress)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.SedaPayload)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovCore(uint64(m.Height))
	}
	l = m.PostedGasPrice.Size()
	n += 2 + l + sovCore(uint64(l))
	if len(m.Commits) > 0 {
		for k, v := range m.Commits {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovCore(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovCore(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovCore(uint64(mapEntrySize))
		}
	}
	if len(m.Reveals) > 0 {
		for k, v := range m.Reveals {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCore(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 2 + sovCore(uint64(mapEntrySize))
		}
	}
	l = len(m.Poster)
	if l > 0 {
		n += 2 + l + sovCore(uint64(l))
	}
	l = m.Escrow.Size()
	n += 2 + l + sovCore(uint64(l))
	if m.TimeoutHeight != 0 {
		n += 2 + sovCore(uint64(m.TimeoutHeight))
	}
	if m.Status != 0 {
		n += 2 + sovCore(uint64(m.Status))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DataRequestConfig.Size()
	n += 1 + l + sovCore(uint64(l))
	l = m.StakingConfig.Size()
	n += 1 + l + sovCore(uint64(l))
	l = m.TallyConfig.Size()
	n += 1 + l + sovCore(uint64(l))
	return n
}

func (m *DataRequestConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommitTimeoutInBlocks != 0 {
		n += 1 + sovCore(uint64(m.CommitTimeoutInBlocks))
	}
	if m.RevealTimeoutInBlocks != 0 {
		n += 1 + sovCore(uint64(m.RevealTimeoutInBlocks))
	}
	if m.BackupDelayInBlocks != 0 {
		n += 1 + sovCore(uint64(m.BackupDelayInBlocks))
	}
	if m.DrRevealSizeLimitInBytes != 0 {
		n += 1 + sovCore(uint64(m.DrRevealSizeLimitInBytes))
	}
	if m.ExecInputLimitInBytes != 0 {
		n += 1 + sovCore(uint64(m.ExecInputLimitInBytes))
	}
	if m.TallyInputLimitInBytes != 0 {
		n += 1 + sovCore(uint64(m.TallyInputLimitInBytes))
	}
	if m.ConsensusFilterLimitInBytes != 0 {
		n += 1 + sovCore(uint64(m.ConsensusFilterLimitInBytes))
	}
	if m.MemoLimitInBytes != 0 {
		n += 1 + sovCore(uint64(m.MemoLimitInBytes))
	}
	if m.PaybackAddressLimitInBytes != 0 {
		n += 1 + sovCore(uint64(m.PaybackAddressLimitInBytes))
	}
	if m.SEDAPayloadLimitInBytes != 0 {
		n += 1 + sovCore(uint64(m.SEDAPayloadLimitInBytes))
	}
	return n
}

func (m *StakingConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MinimumStake.Size()
	n += 1 + l + sovCore(uint64(l))
	if m.AllowlistEnabled {
		n += 2
	}
	return n
}

func (m *TallyConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxTallyGasLimit != 0 {
		n += 1 + sovCore(uint64(m.MaxTallyGasLimit))
	}
	if m.FilterGasCostNone != 0 {
		n += 1 + sovCore(uint64(m.FilterGasCostNone))
	}
	if m.FilterGasCostMultiplierMode != 0 {
		n += 1 + sovCore(uint64(m.FilterGasCostMultiplierMode))
	}
	if m.FilterGasCostMultiplierMAD != 0 {
		n += 1 + sovCore(uint64(m.FilterGasCostMultiplierMAD))
	}
	if m.GasCostBase != 0 {
		n += 1 + sovCore(uint64(m.GasCostBase))
	}
	if m.ExecutionGasCostFallback != 0 {
		n += 1 + sovCore(uint64(m.ExecutionGasCostFallback))
	}
	l = m.BurnRatio.Size()
	n += 1 + l + sovCore(uint64(l))
	if m.MaxResultSize != 0 {
		n += 1 + sovCore(uint64(m.MaxResultSize))
	}
	if m.MaxTalliesPerBlock != 0 {
		n += 1 + sovCore(uint64(m.MaxTalliesPerBlock))
	}
	return n
}

func sovCore(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCore(x uint64) (n int) {
	return sovCore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Staker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Staker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Staker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Staked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingWithdrawal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingWithdrawal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNum", wireType)
			}
			m.SequenceNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecInputs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecInputs = append(m.ExecInputs[:0], dAtA[iNdEx:postIndex]...)
			if m.ExecInputs == nil {
				m.ExecInputs = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecGasLimit", wireType)
			}
			m.ExecGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TallyProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TallyProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TallyInputs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TallyInputs = append(m.TallyInputs[:0], dAtA[iNdEx:postIndex]...)
			if m.TallyInputs == nil {
				m.TallyInputs = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TallyGasLimit", wireType)
			}
			m.TallyGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TallyGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationFactor", wireType)
			}
			m.ReplicationFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicationFactor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusFilter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsensusFilter = append(m.ConsensusFilter[:0], dAtA[iNdEx:postIndex]...)
			if m.ConsensusFilter == nil {
				m.ConsensusFilter = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = append(m.Memo[:0], dAtA[iNdEx:postIndex]...)
			if m.Memo == nil {
				m.Memo = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaybackAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaybackAddress = append(m.PaybackAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.PaybackAddress == nil {
				m.PaybackAddress = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SedaPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SedaPayload = append(m.SedaPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.SedaPayload == nil {
				m.SedaPayload = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostedGasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PostedGasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commits == nil {
				m.Commits = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCore
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCore
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCore
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCore
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCore
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthCore
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthCore
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCore(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCore
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Commits[mapkey] = mapvalue
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reveals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reveals == nil {
				m.Reveals = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCore
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCore
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCore
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCore
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCore
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCore(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCore
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Reveals[mapkey] = mapvalue
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Poster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Escrow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Escrow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			m.TimeoutHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DataRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRequestConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DataRequestConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakingConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TallyConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TallyConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataRequestConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataRequestConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataRequestConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTimeoutInBlocks", wireType)
			}
			m.CommitTimeoutInBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitTimeoutInBlocks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealTimeoutInBlocks", wireType)
			}
			m.RevealTimeoutInBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevealTimeoutInBlocks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupDelayInBlocks", wireType)
			}
			m.BackupDelayInBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackupDelayInBlocks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrRevealSizeLimitInBytes", wireType)
			}
			m.DrRevealSizeLimitInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DrRevealSizeLimitInBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecInputLimitInBytes", wireType)
			}
			m.ExecInputLimitInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecInputLimitInBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TallyInputLimitInBytes", wireType)
			}
			m.TallyInputLimitInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TallyInputLimitInBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusFilterLimitInBytes", wireType)
			}
			m.ConsensusFilterLimitInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsensusFilterLimitInBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoLimitInBytes", wireType)
			}
			m.MemoLimitInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoLimitInBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaybackAddressLimitInBytes", wireType)
			}
			m.PaybackAddressLimitInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaybackAddressLimitInBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SEDAPayloadLimitInBytes", wireType)
			}
			m.SEDAPayloadLimitInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SEDAPayloadLimitInBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowlistEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowlistEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TallyConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TallyConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TallyConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTallyGasLimit", wireType)
			}
			m.MaxTallyGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTallyGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterGasCostNone", wireType)
			}
			m.FilterGasCostNone = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilterGasCostNone |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterGasCostMultiplierMode", wireType)
			}
			m.FilterGasCostMultiplierMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilterGasCostMultiplierMode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterGasCostMultiplierMAD", wireType)
			}
			m.FilterGasCostMultiplierMAD = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilterGasCostMultiplierMAD |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasCostBase", wireType)
			}
			m.GasCostBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasCostBase |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionGasCostFallback", wireType)
			}
			m.ExecutionGasCostFallback = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionGasCostFallback |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxResultSize", wireType)
			}
			m.MaxResultSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxResultSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTalliesPerBlock", wireType)
			}
			m.MaxTalliesPerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTalliesPerBlock |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCore
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCore
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCore
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCore        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCore          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCore = fmt.Errorf("proto: unexpected end of group")
)
