// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sedachain/core/v1/core.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the core module.
type Params struct {
	// DataRequestConfig contains data request-related module parameters.
	DataRequestConfig DataRequestConfig `protobuf:"bytes,1,opt,name=data_request_config,json=dataRequestConfig,proto3" json:"data_request_config"`
	// StakingConfig contains Overlay staking-related module parameters.
	StakingConfig StakingConfig `protobuf:"bytes,2,opt,name=staking_config,json=stakingConfig,proto3" json:"staking_config"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_0152bc97eaf51aad, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetDataRequestConfig() DataRequestConfig {
	if m != nil {
		return m.DataRequestConfig
	}
	return DataRequestConfig{}
}

func (m *Params) GetStakingConfig() StakingConfig {
	if m != nil {
		return m.StakingConfig
	}
	return StakingConfig{}
}

// DataRequestConfig contains data request-related module parameters.
type DataRequestConfig struct {
}

func (m *DataRequestConfig) Reset()         { *m = DataRequestConfig{} }
func (m *DataRequestConfig) String() string { return proto.CompactTextString(m) }
func (*DataRequestConfig) ProtoMessage()    {}
func (*DataRequestConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0152bc97eaf51aad, []int{1}
}
func (m *DataRequestConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataRequestConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataRequestConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataRequestConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRequestConfig.Merge(m, src)
}
func (m *DataRequestConfig) XXX_Size() int {
	return m.Size()
}
func (m *DataRequestConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRequestConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DataRequestConfig proto.InternalMessageInfo

// StakingConfig contains Overlay staking-related module parameters.
type StakingConfig struct {
	// MiminumStake is the minimum amount of SEDA tokens required to register as an Overlay.
	MinimumStake cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=minimum_stake,json=minimumStake,proto3,customtype=cosmossdk.io/math.Int" json:"minimum_stake"`
	// AllowlistEnabled is a flag that indicates whether the allowlist is enabled.
	AllowlistEnabled bool `protobuf:"varint,2,opt,name=allowlist_enabled,json=allowlistEnabled,proto3" json:"allowlist_enabled,omitempty"`
}

func (m *StakingConfig) Reset()         { *m = StakingConfig{} }
func (m *StakingConfig) String() string { return proto.CompactTextString(m) }
func (*StakingConfig) ProtoMessage()    {}
func (*StakingConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0152bc97eaf51aad, []int{2}
}
func (m *StakingConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingConfig.Merge(m, src)
}
func (m *StakingConfig) XXX_Size() int {
	return m.Size()
}
func (m *StakingConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StakingConfig proto.InternalMessageInfo

func (m *StakingConfig) GetAllowlistEnabled() bool {
	if m != nil {
		return m.AllowlistEnabled
	}
	return false
}

func init() {
	proto.RegisterType((*Params)(nil), "sedachain.core.v1.Params")
	proto.RegisterType((*DataRequestConfig)(nil), "sedachain.core.v1.DataRequestConfig")
	proto.RegisterType((*StakingConfig)(nil), "sedachain.core.v1.StakingConfig")
}

func init() { proto.RegisterFile("sedachain/core/v1/core.proto", fileDescriptor_0152bc97eaf51aad) }

var fileDescriptor_0152bc97eaf51aad = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xc1, 0x4a, 0xf3, 0x40,
	0x10, 0xc7, 0xb3, 0x1f, 0x1f, 0xe5, 0xfb, 0x56, 0x2b, 0x26, 0x55, 0xd0, 0x22, 0x69, 0x29, 0x1e,
	0x44, 0x69, 0xd6, 0xea, 0x1b, 0x54, 0x3d, 0xf4, 0x20, 0x48, 0xc4, 0x4b, 0x2f, 0x61, 0x9b, 0xac,
	0xe9, 0xd2, 0xec, 0x6e, 0xcd, 0x6e, 0xab, 0xbe, 0x85, 0xe0, 0x4b, 0x78, 0x14, 0xf4, 0x21, 0x7a,
	0x2c, 0x9e, 0xc4, 0x43, 0x91, 0xf6, 0xe0, 0x6b, 0x48, 0x76, 0x6b, 0xb1, 0xd6, 0x4b, 0x92, 0xf9,
	0xcf, 0x7f, 0x7e, 0xc3, 0x4c, 0x06, 0x6e, 0x49, 0x12, 0xe1, 0xb0, 0x8d, 0x29, 0x47, 0xa1, 0x48,
	0x09, 0xea, 0xd7, 0xf4, 0xdb, 0xeb, 0xa6, 0x42, 0x09, 0xc7, 0x9e, 0x65, 0x3d, 0xad, 0xf6, 0x6b,
	0xc5, 0xcd, 0x50, 0x48, 0x26, 0x64, 0xa0, 0x0d, 0xc8, 0x04, 0xc6, 0x5d, 0x5c, 0x8b, 0x45, 0x2c,
	0x8c, 0x9e, 0x7d, 0x4d, 0x55, 0x1b, 0x33, 0xca, 0x05, 0xd2, 0x4f, 0x23, 0x55, 0x9e, 0x00, 0xcc,
	0x9d, 0xe1, 0x14, 0x33, 0xe9, 0x34, 0x61, 0x21, 0xc2, 0x0a, 0x07, 0x29, 0xb9, 0xea, 0x11, 0xa9,
	0x82, 0x50, 0xf0, 0x4b, 0x1a, 0x6f, 0x80, 0x32, 0xd8, 0x59, 0x3a, 0xd8, 0xf6, 0x16, 0xfa, 0x7b,
	0xc7, 0x58, 0x61, 0xdf, 0x98, 0x8f, 0xb4, 0xb7, 0xfe, 0x77, 0x30, 0x2a, 0x59, 0xbe, 0x1d, 0xfd,
	0x4c, 0x38, 0xa7, 0x70, 0x45, 0x2a, 0xdc, 0xa1, 0x3c, 0xfe, 0xc2, 0xfe, 0xd1, 0xd8, 0xf2, 0x2f,
	0xd8, 0x73, 0x63, 0x9c, 0x43, 0xe6, 0xe5, 0x77, 0xb1, 0x52, 0x80, 0xf6, 0x42, 0xf3, 0xca, 0x3d,
	0x80, 0xf9, 0xb9, 0x5a, 0xe7, 0x02, 0xe6, 0x19, 0xe5, 0x94, 0xf5, 0x58, 0x90, 0xd5, 0x13, 0x3d,
	0xcb, 0xff, 0xfa, 0x7e, 0x86, 0x7c, 0x1b, 0x95, 0xd6, 0xcd, 0xca, 0x64, 0xd4, 0xf1, 0xa8, 0x40,
	0x0c, 0xab, 0xb6, 0xd7, 0xe0, 0xea, 0xe5, 0xb9, 0x0a, 0xa7, 0xbb, 0x6c, 0x70, 0xf5, 0xf0, 0xf1,
	0xb8, 0x0b, 0xfc, 0xe5, 0x29, 0x26, 0xc3, 0x13, 0x67, 0x0f, 0xda, 0x38, 0x49, 0xc4, 0x75, 0x42,
	0xa5, 0x0a, 0x08, 0xc7, 0xad, 0x84, 0x44, 0x7a, 0x9e, 0x7f, 0xfe, 0xea, 0x2c, 0x71, 0x62, 0xf4,
	0x7a, 0x63, 0x30, 0x76, 0xc1, 0x70, 0xec, 0x82, 0xf7, 0xb1, 0x0b, 0xee, 0x26, 0xae, 0x35, 0x9c,
	0xb8, 0xd6, 0xeb, 0xc4, 0xb5, 0x9a, 0x28, 0xa6, 0xaa, 0xdd, 0x6b, 0x79, 0xa1, 0x60, 0x28, 0xdb,
	0x82, 0xfe, 0x21, 0xa1, 0x48, 0x74, 0x50, 0x35, 0x87, 0x70, 0x63, 0x4e, 0x41, 0xdd, 0x76, 0x89,
	0x6c, 0xe5, 0xb4, 0xe3, 0xf0, 0x33, 0x00, 0x00, 0xff, 0xff, 0x86, 0xa0, 0x2b, 0x00, 0x29, 0x02,
	0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StakingConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.DataRequestConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DataRequestConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataRequestConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataRequestConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StakingConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowlistEnabled {
		i--
		if m.AllowlistEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.MinimumStake.Size()
		i -= size
		if _, err := m.MinimumStake.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintCore(dAtA []byte, offset int, v uint64) int {
	offset -= sovCore(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DataRequestConfig.Size()
	n += 1 + l + sovCore(uint64(l))
	l = m.StakingConfig.Size()
	n += 1 + l + sovCore(uint64(l))
	return n
}

func (m *DataRequestConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StakingConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MinimumStake.Size()
	n += 1 + l + sovCore(uint64(l))
	if m.AllowlistEnabled {
		n += 2
	}
	return n
}

func sovCore(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCore(x uint64) (n int) {
	return sovCore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRequestConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DataRequestConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakingConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataRequestConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataRequestConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataRequestConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowlistEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowlistEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCore
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCore
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCore
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCore        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCore          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCore = fmt.Errorf("proto: unexpected end of group")
)
