package types

import (
	"cosmossdk.io/errors"
)

var (
	ErrAlreadyAllowlisted           = errors.Register("core", 2, "public key already exists in allowlist")
	ErrNotAllowlisted               = errors.Register("core", 3, "public key is not in allowlist")
	ErrInsufficientStake            = errors.Register("core", 4, "stake amount is insufficient")
	ErrInvalidStakeProof            = errors.Register("core", 5, "invalid stake proof")
	ErrZeroReplicationFactor        = errors.Register("core", 6, "replication factor cannot be zero")
	ErrGasPriceTooLow               = errors.Register("core", 7, "gas price is too low")
	ErrGasPriceTooHigh              = errors.Register("core", 8, "gas price must fit within 128 bits (unsigned)")
	ErrExecGasLimitTooLow           = errors.Register("core", 9, "exec gas limit is too low")
	ErrTallyGasLimitTooLow          = errors.Register("core", 10, "tally gas limit is too low")
	ErrInvalidExecProgramID         = errors.Register("core", 11, "exec program ID is not a valid hex string")
	ErrInvalidTallyProgramID        = errors.Register("core", 12, "tally program ID is not a valid hex string")
	ErrInvalidLengthExecProgramID   = errors.Register("core", 13, "hex-encoded exec program ID is not 64 characters long")
	ErrInvalidLengthTallyProgramID  = errors.Register("core", 14, "hex-encoded tally program ID is not 64 characters long")
	ErrInvalidVersion               = errors.Register("core", 15, "invalid data request version")
	ErrExecInputLimitExceeded       = errors.Register("core", 16, "exec input limit exceeded")
	ErrTallyInputLimitExceeded      = errors.Register("core", 17, "tally input limit exceeded")
	ErrConsensusFilterLimitExceeded = errors.Register("core", 18, "consensus filter limit exceeded")
	ErrMemoLimitExceeded            = errors.Register("core", 19, "memo limit exceeded")
	ErrPaybackAddressLimitExceeded  = errors.Register("core", 20, "payback address limit exceeded")
	ErrSEDAPayloadLimitExceeded     = errors.Register("core", 21, "SEDA payload limit exceeded")
	ErrReplicationFactorNotUint16   = errors.Register("core", 22, "replication factor must fit within 16 bits (unsigned)")
	ErrReplicationFactorTooHigh     = errors.Register("core", 23, "replication factor is too high")
	ErrDataRequestAlreadyExists     = errors.Register("core", 24, "data request already exists")
	ErrNotCommitting                = errors.Register("core", 25, "data request is not in committing state")
	ErrAlreadyCommitted             = errors.Register("core", 26, "commit under given public key already exists")
	ErrCommitTimeout                = errors.Register("core", 27, "commit timeout")
	ErrRevealNotStarted             = errors.Register("core", 28, "reveal phase has not started")
	ErrDataRequestExpired           = errors.Register("core", 29, "data request expired")
	ErrNotCommitted                 = errors.Register("core", 30, "commit under given public key does not exist")
	ErrAlreadyRevealed              = errors.Register("core", 31, "reveal under given public key already exists")
	ErrRevealTimeout                = errors.Register("core", 32, "reveal timeout")
	ErrRevealTooBig                 = errors.Register("core", 33, "reveal is too big")
	ErrInvalidProxyPublicKey        = errors.Register("core", 34, "invalid hex-encoded proxy public key")
	ErrInvalidRevealExitCode        = errors.Register("core", 35, "invalid reveal exit code")
	ErrRevealMismatch               = errors.Register("core", 36, "revealed result does not match the committed result")
	ErrInvalidCommitProof           = errors.Register("core", 37, "invalid commit proof")
	ErrInvalidRevealProof           = errors.Register("core", 38, "invalid reveal proof")
	// Errors used in filter:
	ErrInvalidFilterType      = errors.Register("core", 39, "invalid filter type")
	ErrFilterInputTooShort    = errors.Register("core", 40, "filter input length too short")
	ErrInvalidPathLen         = errors.Register("core", 41, "invalid JSON path length")
	ErrInvalidNumberType      = errors.Register("core", 42, "invalid number type specified")
	ErrInvalidFilterInput     = errors.Register("core", 43, "invalid filter input")
	ErrInvalidSigmaMultiplier = errors.Register("core", 44, "invalid sigma multiplier")
	ErrOutofTallyGas          = errors.Register("core", 45, "out of tally gas")
	ErrConsensusInError       = errors.Register("core", 46, "consensus in error")
	ErrNoConsensus            = errors.Register("core", 47, "> 1/3 of reveals do not agree on reveal data")
	ErrNoBasicConsensus       = errors.Register("core", 48, "> 1/3 of reveals do not agree on (exit_code_success, proxy_pub_keys)")
	// Errors used in tally program execution:
	ErrDecodingPaybackAddress     = errors.Register("core", 49, "failed to decode payback address")
	ErrFindingTallyProgram        = errors.Register("core", 50, "failed to find tally program")
	ErrDecodingTallyInputs        = errors.Register("core", 51, "failed to decode tally inputs")
	ErrConstructingTallyVMArgs    = errors.Register("core", 52, "failed to construct tally VM arguments")
	ErrGettingMaxTallyGasLimit    = errors.Register("core", 53, "failed to get max tally gas limit")
	ErrInvalidStatusTransition    = errors.Register("core", 54, "invalid status transition")
	ErrDataRequestNotFoundInIndex = errors.Register("core", 55, "data request not found in index")
)
