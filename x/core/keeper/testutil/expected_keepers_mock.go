// Code generated by MockGen. DO NOT EDIT.
// Source: x/core/types/types.go
//
// Generated by this command:
//
//	mockgen -source=x/core/types/types.go -package testutil -destination=x/core/keeper/testutil/expected_keepers_mock.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	types0 "github.com/sedaprotocol/seda-chain/x/wasm-storage/types"
	gomock "go.uber.org/mock/gomock"
)

// MockWasmStorageKeeper is a mock of WasmStorageKeeper interface.
type MockWasmStorageKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockWasmStorageKeeperMockRecorder
	isgomock struct{}
}

// MockWasmStorageKeeperMockRecorder is the mock recorder for MockWasmStorageKeeper.
type MockWasmStorageKeeperMockRecorder struct {
	mock *MockWasmStorageKeeper
}

// NewMockWasmStorageKeeper creates a new mock instance.
func NewMockWasmStorageKeeper(ctrl *gomock.Controller) *MockWasmStorageKeeper {
	mock := &MockWasmStorageKeeper{ctrl: ctrl}
	mock.recorder = &MockWasmStorageKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmStorageKeeper) EXPECT() *MockWasmStorageKeeperMockRecorder {
	return m.recorder
}

// GetCoreContractAddr mocks base method.
func (m *MockWasmStorageKeeper) GetCoreContractAddr(ctx context.Context) (types.AccAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoreContractAddr", ctx)
	ret0, _ := ret[0].(types.AccAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoreContractAddr indicates an expected call of GetCoreContractAddr.
func (mr *MockWasmStorageKeeperMockRecorder) GetCoreContractAddr(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoreContractAddr", reflect.TypeOf((*MockWasmStorageKeeper)(nil).GetCoreContractAddr), ctx)
}

// GetOracleProgram mocks base method.
func (m *MockWasmStorageKeeper) GetOracleProgram(ctx context.Context, hash string) (types0.OracleProgram, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOracleProgram", ctx, hash)
	ret0, _ := ret[0].(types0.OracleProgram)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOracleProgram indicates an expected call of GetOracleProgram.
func (mr *MockWasmStorageKeeperMockRecorder) GetOracleProgram(ctx, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOracleProgram", reflect.TypeOf((*MockWasmStorageKeeper)(nil).GetOracleProgram), ctx, hash)
}

// MockStakingKeeper is a mock of StakingKeeper interface.
type MockStakingKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockStakingKeeperMockRecorder
	isgomock struct{}
}

// MockStakingKeeperMockRecorder is the mock recorder for MockStakingKeeper.
type MockStakingKeeperMockRecorder struct {
	mock *MockStakingKeeper
}

// NewMockStakingKeeper creates a new mock instance.
func NewMockStakingKeeper(ctrl *gomock.Controller) *MockStakingKeeper {
	mock := &MockStakingKeeper{ctrl: ctrl}
	mock.recorder = &MockStakingKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStakingKeeper) EXPECT() *MockStakingKeeperMockRecorder {
	return m.recorder
}

// BondDenom mocks base method.
func (m *MockStakingKeeper) BondDenom(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BondDenom", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BondDenom indicates an expected call of BondDenom.
func (mr *MockStakingKeeperMockRecorder) BondDenom(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BondDenom", reflect.TypeOf((*MockStakingKeeper)(nil).BondDenom), ctx)
}

// MockBankKeeper is a mock of BankKeeper interface.
type MockBankKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBankKeeperMockRecorder
	isgomock struct{}
}

// MockBankKeeperMockRecorder is the mock recorder for MockBankKeeper.
type MockBankKeeperMockRecorder struct {
	mock *MockBankKeeper
}

// NewMockBankKeeper creates a new mock instance.
func NewMockBankKeeper(ctrl *gomock.Controller) *MockBankKeeper {
	mock := &MockBankKeeper{ctrl: ctrl}
	mock.recorder = &MockBankKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankKeeper) EXPECT() *MockBankKeeperMockRecorder {
	return m.recorder
}

// SendCoinsFromAccountToModule mocks base method.
func (m *MockBankKeeper) SendCoinsFromAccountToModule(ctx context.Context, senderAddr types.AccAddress, recipientModule string, amt types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinsFromAccountToModule", ctx, senderAddr, recipientModule, amt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoinsFromAccountToModule indicates an expected call of SendCoinsFromAccountToModule.
func (mr *MockBankKeeperMockRecorder) SendCoinsFromAccountToModule(ctx, senderAddr, recipientModule, amt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinsFromAccountToModule", reflect.TypeOf((*MockBankKeeper)(nil).SendCoinsFromAccountToModule), ctx, senderAddr, recipientModule, amt)
}
