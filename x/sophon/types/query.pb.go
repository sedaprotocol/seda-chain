// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sedachain/sophon/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The request message for QuerySophonInfo RPC method.
type QuerySophonInfoRequest struct {
	// A hex encoded string of the public key of the sophon.
	SophonPubKey string `protobuf:"bytes,1,opt,name=sophon_pub_key,json=sophonPubKey,proto3" json:"sophon_pub_key,omitempty"`
}

func (m *QuerySophonInfoRequest) Reset()         { *m = QuerySophonInfoRequest{} }
func (m *QuerySophonInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySophonInfoRequest) ProtoMessage()    {}
func (*QuerySophonInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f993889749b497ab, []int{0}
}
func (m *QuerySophonInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySophonInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySophonInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySophonInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySophonInfoRequest.Merge(m, src)
}
func (m *QuerySophonInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySophonInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySophonInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySophonInfoRequest proto.InternalMessageInfo

func (m *QuerySophonInfoRequest) GetSophonPubKey() string {
	if m != nil {
		return m.SophonPubKey
	}
	return ""
}

// The response message for QuerySophonInfo RPC method.
type QuerySophonInfoResponse struct {
	Info *SophonInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *QuerySophonInfoResponse) Reset()         { *m = QuerySophonInfoResponse{} }
func (m *QuerySophonInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySophonInfoResponse) ProtoMessage()    {}
func (*QuerySophonInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f993889749b497ab, []int{1}
}
func (m *QuerySophonInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySophonInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySophonInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySophonInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySophonInfoResponse.Merge(m, src)
}
func (m *QuerySophonInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySophonInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySophonInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySophonInfoResponse proto.InternalMessageInfo

func (m *QuerySophonInfoResponse) GetInfo() *SophonInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// The request message for QuerySophonUsers RPC method.
type QuerySophonUsersRequest struct {
	// A hex encoded string of the public key of the sophon.
	SophonPubKey string `protobuf:"bytes,1,opt,name=sophon_pub_key,json=sophonPubKey,proto3" json:"sophon_pub_key,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySophonUsersRequest) Reset()         { *m = QuerySophonUsersRequest{} }
func (m *QuerySophonUsersRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySophonUsersRequest) ProtoMessage()    {}
func (*QuerySophonUsersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f993889749b497ab, []int{2}
}
func (m *QuerySophonUsersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySophonUsersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySophonUsersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySophonUsersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySophonUsersRequest.Merge(m, src)
}
func (m *QuerySophonUsersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySophonUsersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySophonUsersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySophonUsersRequest proto.InternalMessageInfo

func (m *QuerySophonUsersRequest) GetSophonPubKey() string {
	if m != nil {
		return m.SophonPubKey
	}
	return ""
}

func (m *QuerySophonUsersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// The response message for QuerySophonUsers RPC method.
type QuerySophonUsersResponse struct {
	// users are the users of the sophon with given sophon_pub_key.
	Users []*SophonUser `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySophonUsersResponse) Reset()         { *m = QuerySophonUsersResponse{} }
func (m *QuerySophonUsersResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySophonUsersResponse) ProtoMessage()    {}
func (*QuerySophonUsersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f993889749b497ab, []int{3}
}
func (m *QuerySophonUsersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySophonUsersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySophonUsersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySophonUsersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySophonUsersResponse.Merge(m, src)
}
func (m *QuerySophonUsersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySophonUsersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySophonUsersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySophonUsersResponse proto.InternalMessageInfo

func (m *QuerySophonUsersResponse) GetUsers() []*SophonUser {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *QuerySophonUsersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// The request message for QuerySophonUser RPC method.
type QuerySophonUserRequest struct {
	// A hex encoded string of the public key of the Sophon.
	SophonPubKey string `protobuf:"bytes,1,opt,name=sophon_pub_key,json=sophonPubKey,proto3" json:"sophon_pub_key,omitempty"`
	// A hex encoded string of the public key of the user.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *QuerySophonUserRequest) Reset()         { *m = QuerySophonUserRequest{} }
func (m *QuerySophonUserRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySophonUserRequest) ProtoMessage()    {}
func (*QuerySophonUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f993889749b497ab, []int{4}
}
func (m *QuerySophonUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySophonUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySophonUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySophonUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySophonUserRequest.Merge(m, src)
}
func (m *QuerySophonUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySophonUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySophonUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySophonUserRequest proto.InternalMessageInfo

func (m *QuerySophonUserRequest) GetSophonPubKey() string {
	if m != nil {
		return m.SophonPubKey
	}
	return ""
}

func (m *QuerySophonUserRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// The response message for QuerySophonUser RPC method.
type QuerySophonUserResponse struct {
	User *SophonUser `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *QuerySophonUserResponse) Reset()         { *m = QuerySophonUserResponse{} }
func (m *QuerySophonUserResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySophonUserResponse) ProtoMessage()    {}
func (*QuerySophonUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f993889749b497ab, []int{5}
}
func (m *QuerySophonUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySophonUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySophonUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySophonUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySophonUserResponse.Merge(m, src)
}
func (m *QuerySophonUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySophonUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySophonUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySophonUserResponse proto.InternalMessageInfo

func (m *QuerySophonUserResponse) GetUser() *SophonUser {
	if m != nil {
		return m.User
	}
	return nil
}

// The request message for QuerySophonEligibility RPC method.
type QuerySophonEligibilityRequest struct {
	// A hex encoded string of the signature of the sophon.
	Signature   string `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	BlockHeight string `protobuf:"bytes,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QuerySophonEligibilityRequest) Reset()         { *m = QuerySophonEligibilityRequest{} }
func (m *QuerySophonEligibilityRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySophonEligibilityRequest) ProtoMessage()    {}
func (*QuerySophonEligibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f993889749b497ab, []int{6}
}
func (m *QuerySophonEligibilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySophonEligibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySophonEligibilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySophonEligibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySophonEligibilityRequest.Merge(m, src)
}
func (m *QuerySophonEligibilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySophonEligibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySophonEligibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySophonEligibilityRequest proto.InternalMessageInfo

func (m *QuerySophonEligibilityRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *QuerySophonEligibilityRequest) GetBlockHeight() string {
	if m != nil {
		return m.BlockHeight
	}
	return ""
}

// The response message for QuerySophonEligibility RPC method.
type QuerySophonEligibilityResponse struct {
	Eligible bool   `protobuf:"varint,1,opt,name=eligible,proto3" json:"eligible,omitempty"`
	Balance  string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (m *QuerySophonEligibilityResponse) Reset()         { *m = QuerySophonEligibilityResponse{} }
func (m *QuerySophonEligibilityResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySophonEligibilityResponse) ProtoMessage()    {}
func (*QuerySophonEligibilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f993889749b497ab, []int{7}
}
func (m *QuerySophonEligibilityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySophonEligibilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySophonEligibilityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySophonEligibilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySophonEligibilityResponse.Merge(m, src)
}
func (m *QuerySophonEligibilityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySophonEligibilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySophonEligibilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySophonEligibilityResponse proto.InternalMessageInfo

func (m *QuerySophonEligibilityResponse) GetEligible() bool {
	if m != nil {
		return m.Eligible
	}
	return false
}

func (m *QuerySophonEligibilityResponse) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

// The request message for QueryParams RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f993889749b497ab, []int{8}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// The response message for QueryParams RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f993889749b497ab, []int{9}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QuerySophonInfoRequest)(nil), "sedachain.sophon.v1.QuerySophonInfoRequest")
	proto.RegisterType((*QuerySophonInfoResponse)(nil), "sedachain.sophon.v1.QuerySophonInfoResponse")
	proto.RegisterType((*QuerySophonUsersRequest)(nil), "sedachain.sophon.v1.QuerySophonUsersRequest")
	proto.RegisterType((*QuerySophonUsersResponse)(nil), "sedachain.sophon.v1.QuerySophonUsersResponse")
	proto.RegisterType((*QuerySophonUserRequest)(nil), "sedachain.sophon.v1.QuerySophonUserRequest")
	proto.RegisterType((*QuerySophonUserResponse)(nil), "sedachain.sophon.v1.QuerySophonUserResponse")
	proto.RegisterType((*QuerySophonEligibilityRequest)(nil), "sedachain.sophon.v1.QuerySophonEligibilityRequest")
	proto.RegisterType((*QuerySophonEligibilityResponse)(nil), "sedachain.sophon.v1.QuerySophonEligibilityResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "sedachain.sophon.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "sedachain.sophon.v1.QueryParamsResponse")
}

func init() { proto.RegisterFile("sedachain/sophon/v1/query.proto", fileDescriptor_f993889749b497ab) }

var fileDescriptor_f993889749b497ab = []byte{
	// 712 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xcf, 0x4f, 0xd4, 0x4e,
	0x18, 0xc6, 0xb7, 0x7c, 0x61, 0x81, 0x81, 0x7c, 0x13, 0x07, 0x22, 0x6b, 0xc1, 0x02, 0x0d, 0x01,
	0x82, 0xd0, 0x61, 0x21, 0x1a, 0xf5, 0x60, 0x0c, 0x89, 0x3f, 0x08, 0x89, 0x59, 0x6b, 0xd4, 0xc4,
	0xcb, 0x3a, 0x2d, 0x43, 0x77, 0x42, 0xe9, 0x94, 0x9d, 0x96, 0xb8, 0x21, 0x78, 0xf0, 0xe2, 0xd5,
	0xc4, 0x93, 0xde, 0xf4, 0xa6, 0x7f, 0x09, 0x47, 0x12, 0x2f, 0x9e, 0x8c, 0x01, 0xff, 0x10, 0xd3,
	0x99, 0xd9, 0xdd, 0xd6, 0x2d, 0xd9, 0xdd, 0xdb, 0xf6, 0xcd, 0xf3, 0x3c, 0xef, 0x67, 0xde, 0x99,
	0x17, 0xc0, 0x2c, 0x27, 0xbb, 0xd8, 0xad, 0x61, 0x1a, 0x20, 0xce, 0xc2, 0x1a, 0x0b, 0xd0, 0x51,
	0x19, 0x1d, 0xc6, 0xa4, 0xde, 0xb0, 0xc2, 0x3a, 0x8b, 0x18, 0x9c, 0x68, 0x09, 0x2c, 0x29, 0xb0,
	0x8e, 0xca, 0xfa, 0x8c, 0xc7, 0x98, 0xe7, 0x13, 0x84, 0x43, 0x8a, 0x70, 0x10, 0xb0, 0x08, 0x47,
	0x94, 0x05, 0x5c, 0x5a, 0xf4, 0x49, 0x8f, 0x79, 0x4c, 0xfc, 0x44, 0xc9, 0x2f, 0x55, 0x5d, 0x71,
	0x19, 0x3f, 0x60, 0x1c, 0x39, 0x98, 0x13, 0xd9, 0x01, 0x1d, 0x95, 0x1d, 0x12, 0xe1, 0x32, 0x0a,
	0xb1, 0x47, 0x03, 0x11, 0xa1, 0xb4, 0x73, 0x79, 0x54, 0xaa, 0xbd, 0x50, 0x98, 0xf7, 0xc0, 0xd5,
	0xa7, 0x49, 0xc6, 0x33, 0x51, 0xdc, 0x0e, 0xf6, 0x98, 0x4d, 0x0e, 0x63, 0xc2, 0x23, 0xb8, 0x00,
	0xfe, 0x97, 0xca, 0x6a, 0x18, 0x3b, 0xd5, 0x7d, 0xd2, 0x28, 0x69, 0x73, 0xda, 0xf2, 0xa8, 0x3d,
	0x2e, 0xab, 0x95, 0xd8, 0xd9, 0x21, 0x0d, 0xf3, 0x09, 0x98, 0xea, 0xf0, 0xf3, 0x90, 0x05, 0x9c,
	0xc0, 0x4d, 0x30, 0x48, 0x83, 0x3d, 0x26, 0x6c, 0x63, 0x1b, 0xb3, 0x56, 0xce, 0x00, 0xac, 0x94,
	0x4d, 0x88, 0xcd, 0xf7, 0x5a, 0x26, 0xf0, 0x39, 0x27, 0x75, 0xde, 0x17, 0x11, 0x7c, 0x08, 0x40,
	0x7b, 0x0e, 0xa5, 0x01, 0xd1, 0x7c, 0xd1, 0x92, 0x43, 0xb3, 0x92, 0xa1, 0x59, 0xf2, 0x5a, 0xd4,
	0xd0, 0xac, 0x0a, 0xf6, 0x88, 0xea, 0x60, 0xa7, 0x9c, 0xe6, 0x67, 0x0d, 0x94, 0x3a, 0x49, 0xd4,
	0xd9, 0x6e, 0x82, 0xa1, 0x38, 0x29, 0x94, 0xb4, 0xb9, 0xff, 0xba, 0x1c, 0x2e, 0x31, 0xda, 0x52,
	0x0d, 0x1f, 0xe5, 0xb0, 0x2d, 0x75, 0x65, 0x93, 0x3d, 0x33, 0x70, 0x2f, 0x33, 0xd7, 0x26, 0x5a,
	0xf4, 0x35, 0xa4, 0x29, 0x30, 0x9c, 0x10, 0x55, 0xe9, 0xae, 0xa0, 0x18, 0xb5, 0x8b, 0xc9, 0xe7,
	0xf6, 0xee, 0x3f, 0xf7, 0x29, 0x83, 0xdb, 0xf7, 0x99, 0x88, 0x7a, 0xb8, 0x4f, 0x61, 0x13, 0x62,
	0xf3, 0x35, 0xb8, 0x9e, 0xca, 0x7b, 0xe0, 0x53, 0x8f, 0x3a, 0xd4, 0xa7, 0x51, 0xa3, 0xc9, 0x3b,
	0x03, 0x46, 0x39, 0xf5, 0x02, 0x1c, 0xc5, 0x75, 0xa2, 0x50, 0xdb, 0x05, 0x38, 0x0f, 0xc6, 0x1d,
	0x9f, 0xb9, 0xfb, 0xd5, 0x1a, 0xa1, 0x5e, 0x2d, 0x52, 0xb0, 0x63, 0xa2, 0xf6, 0x58, 0x94, 0xcc,
	0x17, 0xc0, 0xb8, 0xac, 0x83, 0x02, 0xd7, 0xc1, 0x08, 0x11, 0x65, 0x5f, 0x76, 0x18, 0xb1, 0x5b,
	0xdf, 0xb0, 0x04, 0x86, 0x1d, 0xec, 0xe3, 0xc0, 0x25, 0x2a, 0xbb, 0xf9, 0x69, 0x4e, 0x02, 0x28,
	0x72, 0x2b, 0xb8, 0x8e, 0x0f, 0x9a, 0x6f, 0xd0, 0xac, 0x80, 0x89, 0x4c, 0x55, 0xb5, 0xb8, 0x03,
	0x8a, 0xa1, 0xa8, 0xa8, 0xe9, 0x4c, 0xe7, 0x4e, 0x47, 0x9a, 0xb6, 0x06, 0x4f, 0x7f, 0xcd, 0x16,
	0x6c, 0x65, 0xd8, 0xf8, 0x52, 0x04, 0x43, 0x22, 0x12, 0x7e, 0xd2, 0x00, 0x68, 0x2f, 0x04, 0xbc,
	0x91, 0x9b, 0x91, 0xbf, 0xad, 0xfa, 0x6a, 0x6f, 0x62, 0x89, 0x6b, 0xae, 0xbf, 0xfb, 0xf1, 0xe7,
	0xe3, 0xc0, 0x0a, 0x5c, 0x46, 0x89, 0x6b, 0x2d, 0xf3, 0x17, 0x22, 0x59, 0x43, 0x74, 0x9c, 0x7d,
	0x43, 0x27, 0xf0, 0xab, 0x06, 0xc6, 0x52, 0x8b, 0x00, 0xbb, 0xf6, 0x4b, 0x6f, 0xae, 0xbe, 0xd6,
	0xa3, 0x5a, 0xe1, 0xdd, 0x12, 0x78, 0xeb, 0xd0, 0xea, 0x15, 0x0f, 0xc9, 0xf5, 0xfa, 0xd6, 0x1a,
	0x60, 0x92, 0xd7, 0x7d, 0x80, 0xa9, 0xbd, 0xd1, 0x57, 0x7b, 0x13, 0x2b, 0xc2, 0xfb, 0x82, 0xf0,
	0x2e, 0xbc, 0xdd, 0x1f, 0x21, 0x3a, 0x56, 0x5b, 0x77, 0x02, 0xbf, 0x6b, 0xe0, 0x4a, 0xc7, 0x93,
	0x85, 0x1b, 0xdd, 0x28, 0x3a, 0x37, 0x48, 0xdf, 0xec, 0xcb, 0xa3, 0x0e, 0xb0, 0x2a, 0x0e, 0xb0,
	0x08, 0x17, 0x72, 0x0e, 0xe0, 0xd6, 0x88, 0xbb, 0x5f, 0x25, 0x29, 0xac, 0xb7, 0xa0, 0x28, 0xdf,
	0x2e, 0x5c, 0xba, 0xbc, 0x59, 0x66, 0x51, 0xf4, 0xe5, 0xee, 0x42, 0x85, 0x32, 0x2f, 0x50, 0xa6,
	0xe1, 0xb5, 0x1c, 0x14, 0xb9, 0x23, 0x5b, 0x3b, 0xa7, 0xe7, 0x86, 0x76, 0x76, 0x6e, 0x68, 0xbf,
	0xcf, 0x0d, 0xed, 0xc3, 0x85, 0x51, 0x38, 0xbb, 0x30, 0x0a, 0x3f, 0x2f, 0x8c, 0xc2, 0xab, 0xb2,
	0x47, 0xa3, 0x5a, 0xec, 0x58, 0x2e, 0x3b, 0x10, 0x76, 0xf1, 0x5f, 0xcd, 0x65, 0x7e, 0x3a, 0xeb,
	0x4d, 0x33, 0x2d, 0x6a, 0x84, 0x84, 0x3b, 0x45, 0xa1, 0xd9, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0x61, 0xe1, 0x23, 0xf3, 0xb3, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// SophonInfo returns a sophon info when given its public key as a hex
	// encoded string.
	SophonInfo(ctx context.Context, in *QuerySophonInfoRequest, opts ...grpc.CallOption) (*QuerySophonInfoResponse, error)
	// SophonUsers returns a paginated list of Sophon users when given its public
	// key as a hex encoded string.
	SophonUsers(ctx context.Context, in *QuerySophonUsersRequest, opts ...grpc.CallOption) (*QuerySophonUsersResponse, error)
	// SophonUser returns a sophon user when given its public key as a hex
	// encoded string.
	SophonUser(ctx context.Context, in *QuerySophonUserRequest, opts ...grpc.CallOption) (*QuerySophonUserResponse, error)
	// SophonEligibility returns a sophon eligibility when given its public key
	// as a hex encoded string.
	SophonEligibility(ctx context.Context, in *QuerySophonEligibilityRequest, opts ...grpc.CallOption) (*QuerySophonEligibilityResponse, error)
	// Params returns the total set of sophon parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) SophonInfo(ctx context.Context, in *QuerySophonInfoRequest, opts ...grpc.CallOption) (*QuerySophonInfoResponse, error) {
	out := new(QuerySophonInfoResponse)
	err := c.cc.Invoke(ctx, "/sedachain.sophon.v1.Query/SophonInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SophonUsers(ctx context.Context, in *QuerySophonUsersRequest, opts ...grpc.CallOption) (*QuerySophonUsersResponse, error) {
	out := new(QuerySophonUsersResponse)
	err := c.cc.Invoke(ctx, "/sedachain.sophon.v1.Query/SophonUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SophonUser(ctx context.Context, in *QuerySophonUserRequest, opts ...grpc.CallOption) (*QuerySophonUserResponse, error) {
	out := new(QuerySophonUserResponse)
	err := c.cc.Invoke(ctx, "/sedachain.sophon.v1.Query/SophonUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SophonEligibility(ctx context.Context, in *QuerySophonEligibilityRequest, opts ...grpc.CallOption) (*QuerySophonEligibilityResponse, error) {
	out := new(QuerySophonEligibilityResponse)
	err := c.cc.Invoke(ctx, "/sedachain.sophon.v1.Query/SophonEligibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/sedachain.sophon.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// SophonInfo returns a sophon info when given its public key as a hex
	// encoded string.
	SophonInfo(context.Context, *QuerySophonInfoRequest) (*QuerySophonInfoResponse, error)
	// SophonUsers returns a paginated list of Sophon users when given its public
	// key as a hex encoded string.
	SophonUsers(context.Context, *QuerySophonUsersRequest) (*QuerySophonUsersResponse, error)
	// SophonUser returns a sophon user when given its public key as a hex
	// encoded string.
	SophonUser(context.Context, *QuerySophonUserRequest) (*QuerySophonUserResponse, error)
	// SophonEligibility returns a sophon eligibility when given its public key
	// as a hex encoded string.
	SophonEligibility(context.Context, *QuerySophonEligibilityRequest) (*QuerySophonEligibilityResponse, error)
	// Params returns the total set of sophon parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) SophonInfo(ctx context.Context, req *QuerySophonInfoRequest) (*QuerySophonInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SophonInfo not implemented")
}
func (*UnimplementedQueryServer) SophonUsers(ctx context.Context, req *QuerySophonUsersRequest) (*QuerySophonUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SophonUsers not implemented")
}
func (*UnimplementedQueryServer) SophonUser(ctx context.Context, req *QuerySophonUserRequest) (*QuerySophonUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SophonUser not implemented")
}
func (*UnimplementedQueryServer) SophonEligibility(ctx context.Context, req *QuerySophonEligibilityRequest) (*QuerySophonEligibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SophonEligibility not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_SophonInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySophonInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SophonInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.sophon.v1.Query/SophonInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SophonInfo(ctx, req.(*QuerySophonInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SophonUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySophonUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SophonUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.sophon.v1.Query/SophonUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SophonUsers(ctx, req.(*QuerySophonUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SophonUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySophonUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SophonUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.sophon.v1.Query/SophonUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SophonUser(ctx, req.(*QuerySophonUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SophonEligibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySophonEligibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SophonEligibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.sophon.v1.Query/SophonEligibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SophonEligibility(ctx, req.(*QuerySophonEligibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.sophon.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sedachain.sophon.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SophonInfo",
			Handler:    _Query_SophonInfo_Handler,
		},
		{
			MethodName: "SophonUsers",
			Handler:    _Query_SophonUsers_Handler,
		},
		{
			MethodName: "SophonUser",
			Handler:    _Query_SophonUser_Handler,
		},
		{
			MethodName: "SophonEligibility",
			Handler:    _Query_SophonEligibility_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sedachain/sophon/v1/query.proto",
}

func (m *QuerySophonInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySophonInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySophonInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SophonPubKey) > 0 {
		i -= len(m.SophonPubKey)
		copy(dAtA[i:], m.SophonPubKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SophonPubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySophonInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySophonInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySophonInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySophonUsersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySophonUsersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySophonUsersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SophonPubKey) > 0 {
		i -= len(m.SophonPubKey)
		copy(dAtA[i:], m.SophonPubKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SophonPubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySophonUsersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySophonUsersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySophonUsersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySophonUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySophonUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySophonUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SophonPubKey) > 0 {
		i -= len(m.SophonPubKey)
		copy(dAtA[i:], m.SophonPubKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SophonPubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySophonUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySophonUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySophonUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySophonEligibilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySophonEligibilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySophonEligibilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockHeight) > 0 {
		i -= len(m.BlockHeight)
		copy(dAtA[i:], m.BlockHeight)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BlockHeight)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySophonEligibilityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySophonEligibilityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySophonEligibilityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balance) > 0 {
		i -= len(m.Balance)
		copy(dAtA[i:], m.Balance)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Balance)))
		i--
		dAtA[i] = 0x12
	}
	if m.Eligible {
		i--
		if m.Eligible {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QuerySophonInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SophonPubKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySophonInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySophonUsersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SophonPubKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySophonUsersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySophonUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SophonPubKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySophonUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySophonEligibilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BlockHeight)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySophonEligibilityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Eligible {
		n += 2
	}
	l = len(m.Balance)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuerySophonInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySophonInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySophonInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SophonPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SophonPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySophonInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySophonInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySophonInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &SophonInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySophonUsersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySophonUsersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySophonUsersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SophonPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SophonPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySophonUsersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySophonUsersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySophonUsersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &SophonUser{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySophonUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySophonUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySophonUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SophonPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SophonPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySophonUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySophonUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySophonUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &SophonUser{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySophonEligibilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySophonEligibilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySophonEligibilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHeight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySophonEligibilityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySophonEligibilityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySophonEligibilityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eligible", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Eligible = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
