// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sedachain/sophon/v1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SettleType defines the type of settle (withdraw or burn)
type SettleType int32

const (
	// An unspecified settle type which will throw an error.
	SETTLE_TYPE_UNSPECIFIED SettleType = 0
	// Withdraw the credits to the admin address.
	SETTLE_TYPE_WITHDRAW SettleType = 1
	// Burn the credits.
	SETTLE_TYPE_BURN SettleType = 2
)

var SettleType_name = map[int32]string{
	0: "SETTLE_TYPE_UNSPECIFIED",
	1: "SETTLE_TYPE_WITHDRAW",
	2: "SETTLE_TYPE_BURN",
}

var SettleType_value = map[string]int32{
	"SETTLE_TYPE_UNSPECIFIED": 0,
	"SETTLE_TYPE_WITHDRAW":    1,
	"SETTLE_TYPE_BURN":        2,
}

func (x SettleType) String() string {
	return proto.EnumName(SettleType_name, int32(x))
}

func (SettleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{0}
}

// All data required for a new sophon.
type MsgRegisterSophon struct {
	// authority is the address that controls the module.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// the address that can edit the Sophon.
	OwnerAddress string `protobuf:"bytes,2,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	// The public key of the Sophon used to verify signed requests as a hex
	// string.
	PublicKey string `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// admin_address defines the address that can perform administrative actions
	// on the sophon.
	AdminAddress string `protobuf:"bytes,4,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// the address of the sophon
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// memo defines an optional string which is not used by the protocol.
	Memo string `protobuf:"bytes,6,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (m *MsgRegisterSophon) Reset()         { *m = MsgRegisterSophon{} }
func (m *MsgRegisterSophon) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterSophon) ProtoMessage()    {}
func (*MsgRegisterSophon) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{0}
}
func (m *MsgRegisterSophon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterSophon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterSophon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterSophon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterSophon.Merge(m, src)
}
func (m *MsgRegisterSophon) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterSophon) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterSophon.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterSophon proto.InternalMessageInfo

func (m *MsgRegisterSophon) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgRegisterSophon) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgRegisterSophon) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *MsgRegisterSophon) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *MsgRegisterSophon) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgRegisterSophon) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

// MsgRegisterSophonResponse is the response type for the Msg/RegisterSophon
type MsgRegisterSophonResponse struct {
}

func (m *MsgRegisterSophonResponse) Reset()         { *m = MsgRegisterSophonResponse{} }
func (m *MsgRegisterSophonResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterSophonResponse) ProtoMessage()    {}
func (*MsgRegisterSophonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{1}
}
func (m *MsgRegisterSophonResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterSophonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterSophonResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterSophonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterSophonResponse.Merge(m, src)
}
func (m *MsgRegisterSophonResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterSophonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterSophonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterSophonResponse proto.InternalMessageInfo

// Allows the owner to edit the sophon.
type MsgEditSophon struct {
	// this should match the owner_address in the sophon info
	OwnerAddress string `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	// the public key of the sophon as a hex string
	SophonPublicKey string `protobuf:"bytes,2,opt,name=sophon_public_key,json=sophonPublicKey,proto3" json:"sophon_public_key,omitempty"`
	// [optional] the new admin address of the sophon
	NewAdminAddress string `protobuf:"bytes,3,opt,name=new_admin_address,json=newAdminAddress,proto3" json:"new_admin_address,omitempty"`
	// [optional] the new address of the sophon
	NewAddress string `protobuf:"bytes,4,opt,name=new_address,json=newAddress,proto3" json:"new_address,omitempty"`
	// [optional] the new public key of the sophon as a hex string
	NewPublicKey string `protobuf:"bytes,5,opt,name=new_public_key,json=newPublicKey,proto3" json:"new_public_key,omitempty"`
	// [optional] the new memo of the sophon
	NewMemo string `protobuf:"bytes,6,opt,name=new_memo,json=newMemo,proto3" json:"new_memo,omitempty"`
}

func (m *MsgEditSophon) Reset()         { *m = MsgEditSophon{} }
func (m *MsgEditSophon) String() string { return proto.CompactTextString(m) }
func (*MsgEditSophon) ProtoMessage()    {}
func (*MsgEditSophon) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{2}
}
func (m *MsgEditSophon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditSophon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditSophon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditSophon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditSophon.Merge(m, src)
}
func (m *MsgEditSophon) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditSophon) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditSophon.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditSophon proto.InternalMessageInfo

func (m *MsgEditSophon) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgEditSophon) GetSophonPublicKey() string {
	if m != nil {
		return m.SophonPublicKey
	}
	return ""
}

func (m *MsgEditSophon) GetNewAdminAddress() string {
	if m != nil {
		return m.NewAdminAddress
	}
	return ""
}

func (m *MsgEditSophon) GetNewAddress() string {
	if m != nil {
		return m.NewAddress
	}
	return ""
}

func (m *MsgEditSophon) GetNewPublicKey() string {
	if m != nil {
		return m.NewPublicKey
	}
	return ""
}

func (m *MsgEditSophon) GetNewMemo() string {
	if m != nil {
		return m.NewMemo
	}
	return ""
}

// MsgEditSophonResponse is the response type for the Msg/EditSophon RPC method.
type MsgEditSophonResponse struct {
}

func (m *MsgEditSophonResponse) Reset()         { *m = MsgEditSophonResponse{} }
func (m *MsgEditSophonResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEditSophonResponse) ProtoMessage()    {}
func (*MsgEditSophonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{3}
}
func (m *MsgEditSophonResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditSophonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditSophonResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditSophonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditSophonResponse.Merge(m, src)
}
func (m *MsgEditSophonResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditSophonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditSophonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditSophonResponse proto.InternalMessageInfo

// Allows the owner to transfer the ownership of the sophon to a new address.
type MsgTransferOwnership struct {
	// this should match the owner_address in the sophon info
	OwnerAddress string `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	// the public key of the sophon as a hex string
	SophonPublicKey string `protobuf:"bytes,2,opt,name=sophon_public_key,json=sophonPublicKey,proto3" json:"sophon_public_key,omitempty"`
	// the new owner address of the sophon
	NewOwnerAddress string `protobuf:"bytes,3,opt,name=new_owner_address,json=newOwnerAddress,proto3" json:"new_owner_address,omitempty"`
}

func (m *MsgTransferOwnership) Reset()         { *m = MsgTransferOwnership{} }
func (m *MsgTransferOwnership) String() string { return proto.CompactTextString(m) }
func (*MsgTransferOwnership) ProtoMessage()    {}
func (*MsgTransferOwnership) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{4}
}
func (m *MsgTransferOwnership) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferOwnership) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferOwnership.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferOwnership) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferOwnership.Merge(m, src)
}
func (m *MsgTransferOwnership) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferOwnership) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferOwnership.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferOwnership proto.InternalMessageInfo

func (m *MsgTransferOwnership) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgTransferOwnership) GetSophonPublicKey() string {
	if m != nil {
		return m.SophonPublicKey
	}
	return ""
}

func (m *MsgTransferOwnership) GetNewOwnerAddress() string {
	if m != nil {
		return m.NewOwnerAddress
	}
	return ""
}

// MsgTransferOwnershipResponse is the response type for the
// Msg/TransferOwnership RPC method.
type MsgTransferOwnershipResponse struct {
}

func (m *MsgTransferOwnershipResponse) Reset()         { *m = MsgTransferOwnershipResponse{} }
func (m *MsgTransferOwnershipResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferOwnershipResponse) ProtoMessage()    {}
func (*MsgTransferOwnershipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{5}
}
func (m *MsgTransferOwnershipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferOwnershipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferOwnershipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferOwnershipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferOwnershipResponse.Merge(m, src)
}
func (m *MsgTransferOwnershipResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferOwnershipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferOwnershipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferOwnershipResponse proto.InternalMessageInfo

// Allows the new owner to accept the ownership of the sophon.
type MsgAcceptOwnership struct {
	// the address that is accepting the ownership
	NewOwnerAddress string `protobuf:"bytes,1,opt,name=new_owner_address,json=newOwnerAddress,proto3" json:"new_owner_address,omitempty"`
	// the public key of the sophon as a hex string
	SophonPublicKey string `protobuf:"bytes,2,opt,name=sophon_public_key,json=sophonPublicKey,proto3" json:"sophon_public_key,omitempty"`
}

func (m *MsgAcceptOwnership) Reset()         { *m = MsgAcceptOwnership{} }
func (m *MsgAcceptOwnership) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptOwnership) ProtoMessage()    {}
func (*MsgAcceptOwnership) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{6}
}
func (m *MsgAcceptOwnership) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptOwnership) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptOwnership.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptOwnership) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptOwnership.Merge(m, src)
}
func (m *MsgAcceptOwnership) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptOwnership) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptOwnership.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptOwnership proto.InternalMessageInfo

func (m *MsgAcceptOwnership) GetNewOwnerAddress() string {
	if m != nil {
		return m.NewOwnerAddress
	}
	return ""
}

func (m *MsgAcceptOwnership) GetSophonPublicKey() string {
	if m != nil {
		return m.SophonPublicKey
	}
	return ""
}

// MsgAcceptOwnershipResponse is the response type for the
// Msg/AcceptOwnership RPC method.
type MsgAcceptOwnershipResponse struct {
}

func (m *MsgAcceptOwnershipResponse) Reset()         { *m = MsgAcceptOwnershipResponse{} }
func (m *MsgAcceptOwnershipResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptOwnershipResponse) ProtoMessage()    {}
func (*MsgAcceptOwnershipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{7}
}
func (m *MsgAcceptOwnershipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptOwnershipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptOwnershipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptOwnershipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptOwnershipResponse.Merge(m, src)
}
func (m *MsgAcceptOwnershipResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptOwnershipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptOwnershipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptOwnershipResponse proto.InternalMessageInfo

// Allows the owner to cancel the ownership transfer of the sophon.
type MsgCancelOwnershipTransfer struct {
	// the address that is cancelling the ownership transfer
	OwnerAddress string `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	// the public key of the sophon as a hex string
	SophonPublicKey string `protobuf:"bytes,2,opt,name=sophon_public_key,json=sophonPublicKey,proto3" json:"sophon_public_key,omitempty"`
}

func (m *MsgCancelOwnershipTransfer) Reset()         { *m = MsgCancelOwnershipTransfer{} }
func (m *MsgCancelOwnershipTransfer) String() string { return proto.CompactTextString(m) }
func (*MsgCancelOwnershipTransfer) ProtoMessage()    {}
func (*MsgCancelOwnershipTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{8}
}
func (m *MsgCancelOwnershipTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelOwnershipTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelOwnershipTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelOwnershipTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelOwnershipTransfer.Merge(m, src)
}
func (m *MsgCancelOwnershipTransfer) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelOwnershipTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelOwnershipTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelOwnershipTransfer proto.InternalMessageInfo

func (m *MsgCancelOwnershipTransfer) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgCancelOwnershipTransfer) GetSophonPublicKey() string {
	if m != nil {
		return m.SophonPublicKey
	}
	return ""
}

// MsgCancelOwnershipTransferResponse is the response type for the
// Msg/CancelOwnershipTransfer RPC method.
type MsgCancelOwnershipTransferResponse struct {
}

func (m *MsgCancelOwnershipTransferResponse) Reset()         { *m = MsgCancelOwnershipTransferResponse{} }
func (m *MsgCancelOwnershipTransferResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelOwnershipTransferResponse) ProtoMessage()    {}
func (*MsgCancelOwnershipTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{9}
}
func (m *MsgCancelOwnershipTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelOwnershipTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelOwnershipTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelOwnershipTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelOwnershipTransferResponse.Merge(m, src)
}
func (m *MsgCancelOwnershipTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelOwnershipTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelOwnershipTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelOwnershipTransferResponse proto.InternalMessageInfo

// Allows the admin to add a user to the sophon.
type MsgAddUser struct {
	// the address that is adding the user
	AdminAddress string `protobuf:"bytes,1,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// the public key of the sophon as a hex string
	SophonPublicKey string `protobuf:"bytes,2,opt,name=sophon_public_key,json=sophonPublicKey,proto3" json:"sophon_public_key,omitempty"`
	// the identifier of the user
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// the amount of credits the user has initially
	InitialCredits cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=initial_credits,json=initialCredits,proto3,customtype=cosmossdk.io/math.Int" json:"initial_credits"`
}

func (m *MsgAddUser) Reset()         { *m = MsgAddUser{} }
func (m *MsgAddUser) String() string { return proto.CompactTextString(m) }
func (*MsgAddUser) ProtoMessage()    {}
func (*MsgAddUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{10}
}
func (m *MsgAddUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddUser.Merge(m, src)
}
func (m *MsgAddUser) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddUser) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddUser.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddUser proto.InternalMessageInfo

func (m *MsgAddUser) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *MsgAddUser) GetSophonPublicKey() string {
	if m != nil {
		return m.SophonPublicKey
	}
	return ""
}

func (m *MsgAddUser) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// MsgAddUserResponse is the response type for the Msg/AddUser RPC method.
type MsgAddUserResponse struct {
}

func (m *MsgAddUserResponse) Reset()         { *m = MsgAddUserResponse{} }
func (m *MsgAddUserResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddUserResponse) ProtoMessage()    {}
func (*MsgAddUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{11}
}
func (m *MsgAddUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddUserResponse.Merge(m, src)
}
func (m *MsgAddUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddUserResponse proto.InternalMessageInfo

// Allows the admin to remove a user from the sophon.
type MsgRemoveUser struct {
	// the address that is removing the user
	AdminAddress string `protobuf:"bytes,1,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// the public key of the sophon as a hex string
	SophonPublicKey string `protobuf:"bytes,2,opt,name=sophon_public_key,json=sophonPublicKey,proto3" json:"sophon_public_key,omitempty"`
	// the identifier of the user
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *MsgRemoveUser) Reset()         { *m = MsgRemoveUser{} }
func (m *MsgRemoveUser) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveUser) ProtoMessage()    {}
func (*MsgRemoveUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{12}
}
func (m *MsgRemoveUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveUser.Merge(m, src)
}
func (m *MsgRemoveUser) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveUser) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveUser.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveUser proto.InternalMessageInfo

func (m *MsgRemoveUser) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *MsgRemoveUser) GetSophonPublicKey() string {
	if m != nil {
		return m.SophonPublicKey
	}
	return ""
}

func (m *MsgRemoveUser) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// MsgRemoveUserResponse is the response type for the Msg/RemoveUser RPC method.
type MsgRemoveUserResponse struct {
}

func (m *MsgRemoveUserResponse) Reset()         { *m = MsgRemoveUserResponse{} }
func (m *MsgRemoveUserResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveUserResponse) ProtoMessage()    {}
func (*MsgRemoveUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{13}
}
func (m *MsgRemoveUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveUserResponse.Merge(m, src)
}
func (m *MsgRemoveUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveUserResponse proto.InternalMessageInfo

// Allows the admin to top up a user's credits.
type MsgTopUpUser struct {
	// the address that is toping up the user
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// the public key of the sophon as a hex string
	SophonPublicKey string `protobuf:"bytes,2,opt,name=sophon_public_key,json=sophonPublicKey,proto3" json:"sophon_public_key,omitempty"`
	// the identifier of the user
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// the amount of credits to top up
	Amount cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *MsgTopUpUser) Reset()         { *m = MsgTopUpUser{} }
func (m *MsgTopUpUser) String() string { return proto.CompactTextString(m) }
func (*MsgTopUpUser) ProtoMessage()    {}
func (*MsgTopUpUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{14}
}
func (m *MsgTopUpUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTopUpUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTopUpUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTopUpUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTopUpUser.Merge(m, src)
}
func (m *MsgTopUpUser) XXX_Size() int {
	return m.Size()
}
func (m *MsgTopUpUser) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTopUpUser.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTopUpUser proto.InternalMessageInfo

func (m *MsgTopUpUser) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgTopUpUser) GetSophonPublicKey() string {
	if m != nil {
		return m.SophonPublicKey
	}
	return ""
}

func (m *MsgTopUpUser) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// MsgTopUpUserResponse is the response type for the Msg/TopUpUser RPC method.
type MsgTopUpUserResponse struct {
}

func (m *MsgTopUpUserResponse) Reset()         { *m = MsgTopUpUserResponse{} }
func (m *MsgTopUpUserResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTopUpUserResponse) ProtoMessage()    {}
func (*MsgTopUpUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{15}
}
func (m *MsgTopUpUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTopUpUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTopUpUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTopUpUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTopUpUserResponse.Merge(m, src)
}
func (m *MsgTopUpUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTopUpUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTopUpUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTopUpUserResponse proto.InternalMessageInfo

// Allows the admin to settle the credits of the sophon.
type MsgSettleCredits struct {
	AdminAddress string `protobuf:"bytes,1,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// the public key of the sophon as a hex string
	SophonPublicKey string `protobuf:"bytes,2,opt,name=sophon_public_key,json=sophonPublicKey,proto3" json:"sophon_public_key,omitempty"`
	// the type of settle
	SettleType SettleType `protobuf:"varint,3,opt,name=settle_type,json=settleType,proto3,enum=sedachain.sophon.v1.SettleType" json:"settle_type,omitempty"`
	// the amount of credits to settle
	Amount cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *MsgSettleCredits) Reset()         { *m = MsgSettleCredits{} }
func (m *MsgSettleCredits) String() string { return proto.CompactTextString(m) }
func (*MsgSettleCredits) ProtoMessage()    {}
func (*MsgSettleCredits) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{16}
}
func (m *MsgSettleCredits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSettleCredits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSettleCredits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSettleCredits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSettleCredits.Merge(m, src)
}
func (m *MsgSettleCredits) XXX_Size() int {
	return m.Size()
}
func (m *MsgSettleCredits) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSettleCredits.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSettleCredits proto.InternalMessageInfo

func (m *MsgSettleCredits) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *MsgSettleCredits) GetSophonPublicKey() string {
	if m != nil {
		return m.SophonPublicKey
	}
	return ""
}

func (m *MsgSettleCredits) GetSettleType() SettleType {
	if m != nil {
		return m.SettleType
	}
	return SETTLE_TYPE_UNSPECIFIED
}

// MsgSettleCreditsResponse is the response type for the Msg/SettleCredits RPC
// method.
type MsgSettleCreditsResponse struct {
	// The amount of credits that were settled.
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *MsgSettleCreditsResponse) Reset()         { *m = MsgSettleCreditsResponse{} }
func (m *MsgSettleCreditsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSettleCreditsResponse) ProtoMessage()    {}
func (*MsgSettleCreditsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{17}
}
func (m *MsgSettleCreditsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSettleCreditsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSettleCreditsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSettleCreditsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSettleCreditsResponse.Merge(m, src)
}
func (m *MsgSettleCreditsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSettleCreditsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSettleCreditsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSettleCreditsResponse proto.InternalMessageInfo

// Allows the admin to expire the credits of a user.
type MsgExpireUserCredits struct {
	AdminAddress string `protobuf:"bytes,1,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// the public key of the sophon as a hex string
	SophonPublicKey string `protobuf:"bytes,2,opt,name=sophon_public_key,json=sophonPublicKey,proto3" json:"sophon_public_key,omitempty"`
	// the identifier of the user
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// the amount of credits to expire
	Amount cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *MsgExpireUserCredits) Reset()         { *m = MsgExpireUserCredits{} }
func (m *MsgExpireUserCredits) String() string { return proto.CompactTextString(m) }
func (*MsgExpireUserCredits) ProtoMessage()    {}
func (*MsgExpireUserCredits) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{18}
}
func (m *MsgExpireUserCredits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExpireUserCredits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExpireUserCredits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExpireUserCredits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExpireUserCredits.Merge(m, src)
}
func (m *MsgExpireUserCredits) XXX_Size() int {
	return m.Size()
}
func (m *MsgExpireUserCredits) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExpireUserCredits.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExpireUserCredits proto.InternalMessageInfo

func (m *MsgExpireUserCredits) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *MsgExpireUserCredits) GetSophonPublicKey() string {
	if m != nil {
		return m.SophonPublicKey
	}
	return ""
}

func (m *MsgExpireUserCredits) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// MsgExpireUserCreditsResponse is the response type for the
// Msg/ExpireUserCredits RPC method.
type MsgExpireUserCreditsResponse struct {
}

func (m *MsgExpireUserCreditsResponse) Reset()         { *m = MsgExpireUserCreditsResponse{} }
func (m *MsgExpireUserCreditsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExpireUserCreditsResponse) ProtoMessage()    {}
func (*MsgExpireUserCreditsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{19}
}
func (m *MsgExpireUserCreditsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExpireUserCreditsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExpireUserCreditsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExpireUserCreditsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExpireUserCreditsResponse.Merge(m, src)
}
func (m *MsgExpireUserCreditsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExpireUserCreditsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExpireUserCreditsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExpireUserCreditsResponse proto.InternalMessageInfo

// Allows the sophon to submit reports for a user.
type MsgSubmitReports struct {
	// the address of the sophon
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// the public key of the sophon
	SophonPublicKey []byte `protobuf:"bytes,2,opt,name=sophon_public_key,json=sophonPublicKey,proto3" json:"sophon_public_key,omitempty"`
	// the reports to process
	Reports []*UserReport `protobuf:"bytes,3,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (m *MsgSubmitReports) Reset()         { *m = MsgSubmitReports{} }
func (m *MsgSubmitReports) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitReports) ProtoMessage()    {}
func (*MsgSubmitReports) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{20}
}
func (m *MsgSubmitReports) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitReports) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitReports.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitReports) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitReports.Merge(m, src)
}
func (m *MsgSubmitReports) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitReports) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitReports.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitReports proto.InternalMessageInfo

func (m *MsgSubmitReports) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgSubmitReports) GetSophonPublicKey() []byte {
	if m != nil {
		return m.SophonPublicKey
	}
	return nil
}

func (m *MsgSubmitReports) GetReports() []*UserReport {
	if m != nil {
		return m.Reports
	}
	return nil
}

// MsgSubmitReportsResponse is the response type for the Msg/SubmitReports RPC
// method.
type MsgSubmitReportsResponse struct {
}

func (m *MsgSubmitReportsResponse) Reset()         { *m = MsgSubmitReportsResponse{} }
func (m *MsgSubmitReportsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitReportsResponse) ProtoMessage()    {}
func (*MsgSubmitReportsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{21}
}
func (m *MsgSubmitReportsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitReportsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitReportsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitReportsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitReportsResponse.Merge(m, src)
}
func (m *MsgSubmitReportsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitReportsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitReportsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitReportsResponse proto.InternalMessageInfo

// The request message for the UpdateParams method.
type MsgUpdateParams struct {
	// authority is the address that controls the module.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Params    Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{22}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse is the response type for the Msg/UpdateParams RPC
// method.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f8c6796aad78d8, []int{23}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("sedachain.sophon.v1.SettleType", SettleType_name, SettleType_value)
	proto.RegisterType((*MsgRegisterSophon)(nil), "sedachain.sophon.v1.MsgRegisterSophon")
	proto.RegisterType((*MsgRegisterSophonResponse)(nil), "sedachain.sophon.v1.MsgRegisterSophonResponse")
	proto.RegisterType((*MsgEditSophon)(nil), "sedachain.sophon.v1.MsgEditSophon")
	proto.RegisterType((*MsgEditSophonResponse)(nil), "sedachain.sophon.v1.MsgEditSophonResponse")
	proto.RegisterType((*MsgTransferOwnership)(nil), "sedachain.sophon.v1.MsgTransferOwnership")
	proto.RegisterType((*MsgTransferOwnershipResponse)(nil), "sedachain.sophon.v1.MsgTransferOwnershipResponse")
	proto.RegisterType((*MsgAcceptOwnership)(nil), "sedachain.sophon.v1.MsgAcceptOwnership")
	proto.RegisterType((*MsgAcceptOwnershipResponse)(nil), "sedachain.sophon.v1.MsgAcceptOwnershipResponse")
	proto.RegisterType((*MsgCancelOwnershipTransfer)(nil), "sedachain.sophon.v1.MsgCancelOwnershipTransfer")
	proto.RegisterType((*MsgCancelOwnershipTransferResponse)(nil), "sedachain.sophon.v1.MsgCancelOwnershipTransferResponse")
	proto.RegisterType((*MsgAddUser)(nil), "sedachain.sophon.v1.MsgAddUser")
	proto.RegisterType((*MsgAddUserResponse)(nil), "sedachain.sophon.v1.MsgAddUserResponse")
	proto.RegisterType((*MsgRemoveUser)(nil), "sedachain.sophon.v1.MsgRemoveUser")
	proto.RegisterType((*MsgRemoveUserResponse)(nil), "sedachain.sophon.v1.MsgRemoveUserResponse")
	proto.RegisterType((*MsgTopUpUser)(nil), "sedachain.sophon.v1.MsgTopUpUser")
	proto.RegisterType((*MsgTopUpUserResponse)(nil), "sedachain.sophon.v1.MsgTopUpUserResponse")
	proto.RegisterType((*MsgSettleCredits)(nil), "sedachain.sophon.v1.MsgSettleCredits")
	proto.RegisterType((*MsgSettleCreditsResponse)(nil), "sedachain.sophon.v1.MsgSettleCreditsResponse")
	proto.RegisterType((*MsgExpireUserCredits)(nil), "sedachain.sophon.v1.MsgExpireUserCredits")
	proto.RegisterType((*MsgExpireUserCreditsResponse)(nil), "sedachain.sophon.v1.MsgExpireUserCreditsResponse")
	proto.RegisterType((*MsgSubmitReports)(nil), "sedachain.sophon.v1.MsgSubmitReports")
	proto.RegisterType((*MsgSubmitReportsResponse)(nil), "sedachain.sophon.v1.MsgSubmitReportsResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "sedachain.sophon.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "sedachain.sophon.v1.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("sedachain/sophon/v1/tx.proto", fileDescriptor_01f8c6796aad78d8) }

var fileDescriptor_01f8c6796aad78d8 = []byte{
	// 1332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xdb, 0x6f, 0xdb, 0x64,
	0x14, 0x8f, 0x93, 0x2e, 0xa1, 0xa7, 0x5d, 0x2f, 0x26, 0x5b, 0x52, 0xb7, 0x4b, 0x8b, 0x35, 0x76,
	0xc9, 0x68, 0xb2, 0x76, 0x12, 0x53, 0x23, 0x0d, 0xd1, 0x4b, 0x10, 0xd1, 0xc8, 0x56, 0x39, 0xa9,
	0xa6, 0x21, 0x24, 0xcb, 0x8d, 0x3f, 0x1c, 0xab, 0xf5, 0x05, 0x7f, 0x4e, 0x2f, 0x6f, 0x08, 0x24,
	0x84, 0x78, 0xe2, 0x05, 0x89, 0x77, 0x5e, 0x78, 0xec, 0x43, 0x5f, 0x78, 0xe4, 0x01, 0xb4, 0xc7,
	0x69, 0x4f, 0x08, 0xa1, 0x09, 0xb5, 0x12, 0xfd, 0x07, 0xf8, 0x03, 0x90, 0xfd, 0xd9, 0x8e, 0x2f,
	0xf1, 0x92, 0x54, 0xa3, 0xf0, 0x52, 0xd9, 0xdf, 0xf9, 0x9d, 0xdb, 0xef, 0x9c, 0x9e, 0xef, 0x38,
	0x30, 0x87, 0x91, 0x28, 0xb4, 0xda, 0x82, 0xac, 0x96, 0xb1, 0xa6, 0xb7, 0x35, 0xb5, 0xbc, 0xb7,
	0x54, 0x36, 0x0f, 0x4a, 0xba, 0xa1, 0x99, 0x1a, 0xfd, 0xa6, 0x27, 0x2d, 0x11, 0x69, 0x69, 0x6f,
	0x89, 0xc9, 0x4a, 0x9a, 0xa4, 0xd9, 0xf2, 0xb2, 0xf5, 0x44, 0xa0, 0xcc, 0x4c, 0x4b, 0xc3, 0x8a,
	0x86, 0x79, 0x22, 0x20, 0x2f, 0x8e, 0x28, 0x47, 0xde, 0xca, 0x0a, 0x96, 0x2c, 0xeb, 0x0a, 0x96,
	0x1c, 0xc1, 0x42, 0x2f, 0xe7, 0x8e, 0x23, 0x82, 0x98, 0x16, 0x14, 0x59, 0xd5, 0xca, 0xf6, 0x5f,
	0x72, 0xc4, 0x9e, 0x24, 0x61, 0xba, 0x8e, 0x25, 0x0e, 0x49, 0x32, 0x36, 0x91, 0xd1, 0xb0, 0xe1,
	0xf4, 0xbb, 0x30, 0x2a, 0x74, 0xcc, 0xb6, 0x66, 0xc8, 0xe6, 0x61, 0x9e, 0x5a, 0xa0, 0x6e, 0x8d,
	0xae, 0xe5, 0x5f, 0x1c, 0x2f, 0x66, 0x9d, 0x40, 0x56, 0x45, 0xd1, 0x40, 0x18, 0x37, 0x4c, 0x43,
	0x56, 0x25, 0xae, 0x0b, 0xa5, 0x1f, 0xc0, 0x65, 0x6d, 0x5f, 0x45, 0x06, 0x2f, 0x10, 0x44, 0x3e,
	0xd9, 0x47, 0x77, 0xdc, 0x86, 0x3b, 0x67, 0xf4, 0x35, 0x00, 0xbd, 0xb3, 0xbd, 0x2b, 0xb7, 0xf8,
	0x1d, 0x74, 0x98, 0x4f, 0x59, 0xba, 0xdc, 0x28, 0x39, 0x79, 0x88, 0x6c, 0xeb, 0x82, 0xa8, 0xc8,
	0xaa, 0x67, 0x7d, 0xa4, 0x9f, 0x75, 0x1b, 0xee, 0x5a, 0x5f, 0x86, 0x8c, 0xab, 0x78, 0xa9, 0x8f,
	0xa2, 0x0b, 0xa4, 0x69, 0x18, 0x51, 0x90, 0xa2, 0xe5, 0xd3, 0x76, 0x2c, 0xf6, 0x73, 0xe5, 0xee,
	0x17, 0x67, 0x47, 0xc5, 0x6e, 0xd2, 0xdf, 0x9c, 0x1d, 0x15, 0xaf, 0x59, 0xd4, 0xbb, 0xac, 0x47,
	0xe8, 0x64, 0x67, 0x61, 0x26, 0x72, 0xc8, 0x21, 0xac, 0x6b, 0x2a, 0x46, 0xec, 0x57, 0x29, 0xb8,
	0x5c, 0xc7, 0x52, 0x55, 0x94, 0x4d, 0x87, 0xfd, 0x08, 0x8b, 0xd4, 0x50, 0x2c, 0x16, 0x61, 0x9a,
	0x44, 0xc2, 0xfb, 0xc8, 0xb4, 0x0b, 0xc1, 0x4d, 0x12, 0xc1, 0xa6, 0x47, 0x69, 0x0d, 0xa6, 0x55,
	0xb4, 0xcf, 0x07, 0x69, 0xb5, 0x89, 0x5f, 0xbb, 0x16, 0xe7, 0xee, 0xc7, 0xb3, 0xa3, 0x62, 0x82,
	0x9b, 0x54, 0xd1, 0xfe, 0xaa, 0x9f, 0xde, 0xf7, 0x60, 0x8c, 0x98, 0xf2, 0xd7, 0xa6, 0x8f, 0x11,
	0xb0, 0x8d, 0x10, 0xfd, 0x3b, 0x30, 0x61, 0xe9, 0xfb, 0x62, 0x26, 0x55, 0xba, 0x64, 0x41, 0x29,
	0x6e, 0x5c, 0x45, 0xfb, 0xdd, 0xb8, 0x17, 0xe0, 0x0d, 0x0b, 0xdc, 0xad, 0x8d, 0x0b, 0xcb, 0xa8,
	0x68, 0xbf, 0xee, 0x55, 0x29, 0xc8, 0xa3, 0x55, 0xa9, 0x99, 0x50, 0xa5, 0xba, 0xb4, 0xb3, 0x39,
	0xb8, 0x12, 0x38, 0xf0, 0x2a, 0xf4, 0x79, 0x12, 0xb2, 0x75, 0x2c, 0x35, 0x0d, 0x41, 0xc5, 0x9f,
	0x22, 0xe3, 0xb1, 0x65, 0x13, 0xb7, 0x65, 0xfd, 0x22, 0x0b, 0xb5, 0x41, 0x0a, 0x15, 0x74, 0x97,
	0xea, 0xe3, 0xce, 0xaa, 0xd1, 0x63, 0x9f, 0xc7, 0xca, 0xfd, 0xde, 0xa4, 0x2c, 0x84, 0x48, 0x89,
	0x64, 0xca, 0x16, 0x60, 0xae, 0xd7, 0xb9, 0x47, 0xd1, 0xcf, 0x14, 0xd0, 0x75, 0x2c, 0xad, 0xb6,
	0x5a, 0x48, 0x37, 0xbb, 0x04, 0xf5, 0x8c, 0x9a, 0x1a, 0x32, 0xea, 0x61, 0x78, 0xaa, 0xac, 0x58,
	0x19, 0x46, 0x9d, 0x5a, 0x59, 0x16, 0x42, 0x59, 0x86, 0x82, 0x65, 0xe7, 0x80, 0x89, 0x9e, 0x7a,
	0x19, 0xfe, 0x4a, 0xd9, 0xe2, 0x75, 0x41, 0x6d, 0xa1, 0x5d, 0x4f, 0xec, 0x32, 0x72, 0x81, 0xad,
	0x50, 0x79, 0xd0, 0xbb, 0x88, 0x37, 0x42, 0xe9, 0xc5, 0x44, 0xca, 0x5e, 0x07, 0x36, 0x5e, 0xea,
	0xa5, 0xfb, 0x5d, 0x12, 0xc0, 0x62, 0x43, 0x14, 0xb7, 0x30, 0x49, 0x2f, 0x38, 0x23, 0xa8, 0xa1,
	0x46, 0xef, 0x30, 0x9d, 0x9e, 0x83, 0x4c, 0x07, 0x23, 0x83, 0x97, 0x45, 0xe7, 0x06, 0x48, 0x5b,
	0xaf, 0x35, 0x91, 0x6e, 0xc2, 0xa4, 0xac, 0xca, 0xa6, 0x2c, 0xec, 0xf2, 0x2d, 0x03, 0x89, 0xb2,
	0xe9, 0x0e, 0x99, 0x3b, 0xcf, 0x5e, 0xce, 0x27, 0x7e, 0x7f, 0x39, 0x7f, 0x85, 0x44, 0x82, 0xc5,
	0x9d, 0x92, 0xac, 0x95, 0x15, 0xc1, 0x6c, 0x97, 0x6a, 0xaa, 0xf9, 0xe2, 0x78, 0x11, 0x9c, 0x10,
	0x6b, 0xaa, 0xc9, 0x4d, 0x38, 0x36, 0xd6, 0x89, 0x89, 0xca, 0xa2, 0xcd, 0x66, 0x20, 0x39, 0x8b,
	0xcd, 0xab, 0xe1, 0x66, 0x21, 0x44, 0xb0, 0x59, 0xd2, 0xe7, 0xe4, 0xcd, 0x63, 0xeb, 0x17, 0xca,
	0x9e, 0xe1, 0x1c, 0x52, 0xb4, 0x3d, 0xf4, 0x7f, 0x21, 0xcc, 0x19, 0x81, 0x91, 0xd4, 0x66, 0x22,
	0x97, 0x95, 0x1b, 0xb5, 0x33, 0x02, 0xbb, 0x07, 0x5e, 0x82, 0x7f, 0x53, 0x30, 0x6e, 0x0d, 0x00,
	0x4d, 0xdf, 0xd2, 0xed, 0xfc, 0xee, 0x42, 0x1a, 0x23, 0x55, 0x44, 0x46, 0xdf, 0xc4, 0x1c, 0xdc,
	0xeb, 0xe9, 0x81, 0x75, 0x48, 0x0b, 0x8a, 0xd6, 0x51, 0xcd, 0xf3, 0x94, 0xde, 0x51, 0xad, 0xdc,
	0xb2, 0x78, 0x71, 0xc2, 0xb2, 0x08, 0xc9, 0x87, 0xc7, 0x9f, 0x9b, 0x25, 0x7b, 0x95, 0x0c, 0x7e,
	0xf7, 0xdd, 0xa3, 0xe3, 0xa7, 0x24, 0x4c, 0xd5, 0xb1, 0xd4, 0x40, 0xa6, 0xb9, 0x8b, 0x9c, 0x4e,
	0xba, 0xc8, 0x92, 0xbf, 0x0f, 0x63, 0xd8, 0xf6, 0xcd, 0x9b, 0x87, 0x3a, 0xb2, 0x39, 0x9a, 0x58,
	0x9e, 0x2f, 0xf5, 0xd8, 0x2f, 0x4b, 0x24, 0xc6, 0xe6, 0xa1, 0x8e, 0x38, 0xc0, 0xde, 0xf3, 0xeb,
	0x21, 0xf2, 0x5e, 0xef, 0x06, 0x9b, 0x0b, 0xf1, 0x19, 0xa0, 0x89, 0xe5, 0x21, 0x1f, 0x3e, 0x73,
	0x79, 0xf5, 0x45, 0x45, 0x9d, 0x3b, 0x2a, 0xf6, 0x7b, 0x72, 0x5d, 0x57, 0x0f, 0x74, 0xd9, 0xb0,
	0xbb, 0xf8, 0x3f, 0x28, 0xd0, 0xbf, 0xdb, 0xc0, 0xf7, 0x7b, 0xf3, 0x1e, 0xbe, 0xc6, 0x23, 0x0c,
	0x38, 0xd7, 0x78, 0xe4, 0xdc, 0xeb, 0xeb, 0x3f, 0x28, 0xd2, 0xd7, 0x9d, 0x6d, 0x45, 0x36, 0x39,
	0xa4, 0x6b, 0x86, 0x19, 0xd8, 0x9b, 0xa9, 0x41, 0xf7, 0xe6, 0x58, 0xae, 0xc6, 0xa3, 0x5c, 0xad,
	0x40, 0xc6, 0x20, 0xae, 0xf2, 0xa9, 0x85, 0xd4, 0xad, 0xb1, 0x98, 0x46, 0x26, 0xff, 0x80, 0x16,
	0x8e, 0x73, 0xf1, 0x64, 0x78, 0x67, 0x5e, 0xd5, 0x7a, 0xfe, 0x4c, 0x58, 0x86, 0xb4, 0x9e, 0xff,
	0xcc, 0x4b, 0xfd, 0x98, 0x82, 0xc9, 0x3a, 0x96, 0xb6, 0x74, 0x51, 0x30, 0xd1, 0xa6, 0x60, 0x08,
	0x0a, 0x3e, 0xf7, 0x67, 0xd0, 0x0a, 0xa4, 0x75, 0xdb, 0x82, 0x9d, 0xf2, 0xd8, 0xf2, 0x6c, 0xcf,
	0x84, 0x88, 0x93, 0xb5, 0x11, 0xab, 0x03, 0x38, 0x47, 0xa1, 0x52, 0x8a, 0x7e, 0x5c, 0xcc, 0x86,
	0x72, 0xf2, 0x87, 0xc8, 0xce, 0x40, 0x2e, 0x74, 0xe4, 0x66, 0x54, 0xe4, 0x01, 0xba, 0xff, 0xfc,
	0xf4, 0x2c, 0xe4, 0x1a, 0xd5, 0x66, 0xf3, 0xa3, 0x2a, 0xdf, 0x7c, 0xba, 0x59, 0xe5, 0xb7, 0x1e,
	0x35, 0x36, 0xab, 0xeb, 0xb5, 0x0f, 0x6a, 0xd5, 0x8d, 0xa9, 0x04, 0x9d, 0x87, 0xac, 0x5f, 0xf8,
	0xa4, 0xd6, 0xfc, 0x70, 0x83, 0x5b, 0x7d, 0x32, 0x45, 0xd1, 0x59, 0x98, 0xf2, 0x4b, 0xd6, 0xb6,
	0xb8, 0x47, 0x53, 0x49, 0x66, 0xe4, 0xeb, 0x1f, 0x0a, 0x89, 0xe5, 0xbf, 0x46, 0x21, 0x55, 0xc7,
	0x12, 0xdd, 0x86, 0x89, 0xd0, 0xf7, 0xe3, 0x8d, 0x9e, 0x09, 0x47, 0xbe, 0x81, 0x98, 0xd2, 0x60,
	0x38, 0x6f, 0x3e, 0x7c, 0x02, 0xe0, 0xfb, 0x4e, 0x62, 0xe3, 0xb4, 0xbb, 0x18, 0xa6, 0xd8, 0x1f,
	0xe3, 0x59, 0xff, 0x0c, 0xa6, 0xa3, 0x3b, 0xfe, 0xed, 0x38, 0x03, 0x11, 0x28, 0xb3, 0x34, 0x30,
	0xd4, 0x73, 0xb9, 0x03, 0x93, 0xe1, 0x9d, 0xf9, 0x66, 0x9c, 0x95, 0x10, 0x90, 0x29, 0x0f, 0x08,
	0xf4, 0x9c, 0x7d, 0x49, 0x41, 0x2e, 0x6e, 0x7f, 0x8d, 0x35, 0x16, 0xa3, 0xc0, 0xdc, 0x1f, 0x52,
	0xc1, 0x8b, 0xa2, 0x01, 0x19, 0x77, 0xab, 0x9c, 0x8f, 0xcd, 0x80, 0x00, 0x98, 0x9b, 0x7d, 0x00,
	0xfe, 0xc6, 0xf0, 0x2d, 0x5f, 0x6c, 0x7c, 0x5b, 0xb9, 0x98, 0xf8, 0xc6, 0x88, 0x6e, 0x3f, 0xf4,
	0x53, 0x18, 0xed, 0x6e, 0x3e, 0x6f, 0xc5, 0x56, 0xd9, 0x85, 0x30, 0xb7, 0xfb, 0x42, 0xfc, 0x3d,
	0x17, 0xbd, 0xa8, 0x62, 0xf5, 0x23, 0xd0, 0xf8, 0x9e, 0x8b, 0x1d, 0xf2, 0x34, 0x82, 0xcb, 0xc1,
	0xc5, 0xe5, 0xed, 0x38, 0x1b, 0x01, 0x18, 0xb3, 0x38, 0x10, 0x2c, 0xe0, 0x26, 0x70, 0x8f, 0xc4,
	0xbb, 0xf1, 0xc3, 0x5e, 0xe1, 0xa6, 0xd7, 0xdc, 0xa6, 0xb7, 0x61, 0x3c, 0x30, 0xb3, 0xaf, 0xc7,
	0xa9, 0xfb, 0x51, 0xcc, 0x3b, 0x83, 0xa0, 0x5c, 0x1f, 0x6b, 0x0f, 0x9f, 0x9d, 0x14, 0xa8, 0xe7,
	0x27, 0x05, 0xea, 0xcf, 0x93, 0x02, 0xf5, 0xed, 0x69, 0x21, 0xf1, 0xfc, 0xb4, 0x90, 0xf8, 0xed,
	0xb4, 0x90, 0xf8, 0x78, 0x49, 0x92, 0xcd, 0x76, 0x67, 0xbb, 0xd4, 0xd2, 0x94, 0xb2, 0x65, 0xd1,
	0xfe, 0x51, 0xad, 0xa5, 0xed, 0xda, 0x2f, 0x8b, 0xe4, 0xc7, 0xb8, 0x03, 0x77, 0x76, 0x5b, 0xbb,
	0x1a, 0xde, 0x4e, 0xdb, 0x98, 0x7b, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x25, 0x6b, 0x2b, 0x2a,
	0x2c, 0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Registers a new sophon entry in the registry.
	RegisterSophon(ctx context.Context, in *MsgRegisterSophon, opts ...grpc.CallOption) (*MsgRegisterSophonResponse, error)
	// Edits an existing sophon.
	EditSophon(ctx context.Context, in *MsgEditSophon, opts ...grpc.CallOption) (*MsgEditSophonResponse, error)
	// Transfers the ownership of a sophon.
	TransferOwnership(ctx context.Context, in *MsgTransferOwnership, opts ...grpc.CallOption) (*MsgTransferOwnershipResponse, error)
	// Accepts the ownership of a sophon.
	AcceptOwnership(ctx context.Context, in *MsgAcceptOwnership, opts ...grpc.CallOption) (*MsgAcceptOwnershipResponse, error)
	// Cancels the ownership transfer of a sophon.
	CancelOwnershipTransfer(ctx context.Context, in *MsgCancelOwnershipTransfer, opts ...grpc.CallOption) (*MsgCancelOwnershipTransferResponse, error)
	// Adds a user to a sophon.
	AddUser(ctx context.Context, in *MsgAddUser, opts ...grpc.CallOption) (*MsgAddUserResponse, error)
	// Removes a user from a sophon.
	RemoveUser(ctx context.Context, in *MsgRemoveUser, opts ...grpc.CallOption) (*MsgRemoveUserResponse, error)
	// Top up a user's credits.
	TopUpUser(ctx context.Context, in *MsgTopUpUser, opts ...grpc.CallOption) (*MsgTopUpUserResponse, error)
	// Expire a user's credits.
	ExpireUserCredits(ctx context.Context, in *MsgExpireUserCredits, opts ...grpc.CallOption) (*MsgExpireUserCreditsResponse, error)
	// Settle a sophon's credits.
	SettleCredits(ctx context.Context, in *MsgSettleCredits, opts ...grpc.CallOption) (*MsgSettleCreditsResponse, error)
	// Submits reports for a sophon.
	SubmitReports(ctx context.Context, in *MsgSubmitReports, opts ...grpc.CallOption) (*MsgSubmitReportsResponse, error)
	// Used to update the modules parameters through the authority.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterSophon(ctx context.Context, in *MsgRegisterSophon, opts ...grpc.CallOption) (*MsgRegisterSophonResponse, error) {
	out := new(MsgRegisterSophonResponse)
	err := c.cc.Invoke(ctx, "/sedachain.sophon.v1.Msg/RegisterSophon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditSophon(ctx context.Context, in *MsgEditSophon, opts ...grpc.CallOption) (*MsgEditSophonResponse, error) {
	out := new(MsgEditSophonResponse)
	err := c.cc.Invoke(ctx, "/sedachain.sophon.v1.Msg/EditSophon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferOwnership(ctx context.Context, in *MsgTransferOwnership, opts ...grpc.CallOption) (*MsgTransferOwnershipResponse, error) {
	out := new(MsgTransferOwnershipResponse)
	err := c.cc.Invoke(ctx, "/sedachain.sophon.v1.Msg/TransferOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AcceptOwnership(ctx context.Context, in *MsgAcceptOwnership, opts ...grpc.CallOption) (*MsgAcceptOwnershipResponse, error) {
	out := new(MsgAcceptOwnershipResponse)
	err := c.cc.Invoke(ctx, "/sedachain.sophon.v1.Msg/AcceptOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelOwnershipTransfer(ctx context.Context, in *MsgCancelOwnershipTransfer, opts ...grpc.CallOption) (*MsgCancelOwnershipTransferResponse, error) {
	out := new(MsgCancelOwnershipTransferResponse)
	err := c.cc.Invoke(ctx, "/sedachain.sophon.v1.Msg/CancelOwnershipTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddUser(ctx context.Context, in *MsgAddUser, opts ...grpc.CallOption) (*MsgAddUserResponse, error) {
	out := new(MsgAddUserResponse)
	err := c.cc.Invoke(ctx, "/sedachain.sophon.v1.Msg/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveUser(ctx context.Context, in *MsgRemoveUser, opts ...grpc.CallOption) (*MsgRemoveUserResponse, error) {
	out := new(MsgRemoveUserResponse)
	err := c.cc.Invoke(ctx, "/sedachain.sophon.v1.Msg/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TopUpUser(ctx context.Context, in *MsgTopUpUser, opts ...grpc.CallOption) (*MsgTopUpUserResponse, error) {
	out := new(MsgTopUpUserResponse)
	err := c.cc.Invoke(ctx, "/sedachain.sophon.v1.Msg/TopUpUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExpireUserCredits(ctx context.Context, in *MsgExpireUserCredits, opts ...grpc.CallOption) (*MsgExpireUserCreditsResponse, error) {
	out := new(MsgExpireUserCreditsResponse)
	err := c.cc.Invoke(ctx, "/sedachain.sophon.v1.Msg/ExpireUserCredits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SettleCredits(ctx context.Context, in *MsgSettleCredits, opts ...grpc.CallOption) (*MsgSettleCreditsResponse, error) {
	out := new(MsgSettleCreditsResponse)
	err := c.cc.Invoke(ctx, "/sedachain.sophon.v1.Msg/SettleCredits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitReports(ctx context.Context, in *MsgSubmitReports, opts ...grpc.CallOption) (*MsgSubmitReportsResponse, error) {
	out := new(MsgSubmitReportsResponse)
	err := c.cc.Invoke(ctx, "/sedachain.sophon.v1.Msg/SubmitReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/sedachain.sophon.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Registers a new sophon entry in the registry.
	RegisterSophon(context.Context, *MsgRegisterSophon) (*MsgRegisterSophonResponse, error)
	// Edits an existing sophon.
	EditSophon(context.Context, *MsgEditSophon) (*MsgEditSophonResponse, error)
	// Transfers the ownership of a sophon.
	TransferOwnership(context.Context, *MsgTransferOwnership) (*MsgTransferOwnershipResponse, error)
	// Accepts the ownership of a sophon.
	AcceptOwnership(context.Context, *MsgAcceptOwnership) (*MsgAcceptOwnershipResponse, error)
	// Cancels the ownership transfer of a sophon.
	CancelOwnershipTransfer(context.Context, *MsgCancelOwnershipTransfer) (*MsgCancelOwnershipTransferResponse, error)
	// Adds a user to a sophon.
	AddUser(context.Context, *MsgAddUser) (*MsgAddUserResponse, error)
	// Removes a user from a sophon.
	RemoveUser(context.Context, *MsgRemoveUser) (*MsgRemoveUserResponse, error)
	// Top up a user's credits.
	TopUpUser(context.Context, *MsgTopUpUser) (*MsgTopUpUserResponse, error)
	// Expire a user's credits.
	ExpireUserCredits(context.Context, *MsgExpireUserCredits) (*MsgExpireUserCreditsResponse, error)
	// Settle a sophon's credits.
	SettleCredits(context.Context, *MsgSettleCredits) (*MsgSettleCreditsResponse, error)
	// Submits reports for a sophon.
	SubmitReports(context.Context, *MsgSubmitReports) (*MsgSubmitReportsResponse, error)
	// Used to update the modules parameters through the authority.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterSophon(ctx context.Context, req *MsgRegisterSophon) (*MsgRegisterSophonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSophon not implemented")
}
func (*UnimplementedMsgServer) EditSophon(ctx context.Context, req *MsgEditSophon) (*MsgEditSophonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditSophon not implemented")
}
func (*UnimplementedMsgServer) TransferOwnership(ctx context.Context, req *MsgTransferOwnership) (*MsgTransferOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwnership not implemented")
}
func (*UnimplementedMsgServer) AcceptOwnership(ctx context.Context, req *MsgAcceptOwnership) (*MsgAcceptOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOwnership not implemented")
}
func (*UnimplementedMsgServer) CancelOwnershipTransfer(ctx context.Context, req *MsgCancelOwnershipTransfer) (*MsgCancelOwnershipTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOwnershipTransfer not implemented")
}
func (*UnimplementedMsgServer) AddUser(ctx context.Context, req *MsgAddUser) (*MsgAddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (*UnimplementedMsgServer) RemoveUser(ctx context.Context, req *MsgRemoveUser) (*MsgRemoveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (*UnimplementedMsgServer) TopUpUser(ctx context.Context, req *MsgTopUpUser) (*MsgTopUpUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopUpUser not implemented")
}
func (*UnimplementedMsgServer) ExpireUserCredits(ctx context.Context, req *MsgExpireUserCredits) (*MsgExpireUserCreditsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpireUserCredits not implemented")
}
func (*UnimplementedMsgServer) SettleCredits(ctx context.Context, req *MsgSettleCredits) (*MsgSettleCreditsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettleCredits not implemented")
}
func (*UnimplementedMsgServer) SubmitReports(ctx context.Context, req *MsgSubmitReports) (*MsgSubmitReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitReports not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterSophon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterSophon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterSophon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.sophon.v1.Msg/RegisterSophon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterSophon(ctx, req.(*MsgRegisterSophon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditSophon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEditSophon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditSophon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.sophon.v1.Msg/EditSophon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditSophon(ctx, req.(*MsgEditSophon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferOwnership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.sophon.v1.Msg/TransferOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferOwnership(ctx, req.(*MsgTransferOwnership))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AcceptOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAcceptOwnership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AcceptOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.sophon.v1.Msg/AcceptOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AcceptOwnership(ctx, req.(*MsgAcceptOwnership))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelOwnershipTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelOwnershipTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelOwnershipTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.sophon.v1.Msg/CancelOwnershipTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelOwnershipTransfer(ctx, req.(*MsgCancelOwnershipTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.sophon.v1.Msg/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddUser(ctx, req.(*MsgAddUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.sophon.v1.Msg/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveUser(ctx, req.(*MsgRemoveUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TopUpUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTopUpUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TopUpUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.sophon.v1.Msg/TopUpUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TopUpUser(ctx, req.(*MsgTopUpUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExpireUserCredits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExpireUserCredits)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExpireUserCredits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.sophon.v1.Msg/ExpireUserCredits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExpireUserCredits(ctx, req.(*MsgExpireUserCredits))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SettleCredits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSettleCredits)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SettleCredits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.sophon.v1.Msg/SettleCredits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SettleCredits(ctx, req.(*MsgSettleCredits))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitReports)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.sophon.v1.Msg/SubmitReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitReports(ctx, req.(*MsgSubmitReports))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.sophon.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sedachain.sophon.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterSophon",
			Handler:    _Msg_RegisterSophon_Handler,
		},
		{
			MethodName: "EditSophon",
			Handler:    _Msg_EditSophon_Handler,
		},
		{
			MethodName: "TransferOwnership",
			Handler:    _Msg_TransferOwnership_Handler,
		},
		{
			MethodName: "AcceptOwnership",
			Handler:    _Msg_AcceptOwnership_Handler,
		},
		{
			MethodName: "CancelOwnershipTransfer",
			Handler:    _Msg_CancelOwnershipTransfer_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Msg_AddUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _Msg_RemoveUser_Handler,
		},
		{
			MethodName: "TopUpUser",
			Handler:    _Msg_TopUpUser_Handler,
		},
		{
			MethodName: "ExpireUserCredits",
			Handler:    _Msg_ExpireUserCredits_Handler,
		},
		{
			MethodName: "SettleCredits",
			Handler:    _Msg_SettleCredits_Handler,
		},
		{
			MethodName: "SubmitReports",
			Handler:    _Msg_SubmitReports_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sedachain/sophon/v1/tx.proto",
}

func (m *MsgRegisterSophon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterSophon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterSophon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterSophonResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterSophonResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterSophonResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgEditSophon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditSophon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditSophon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewMemo) > 0 {
		i -= len(m.NewMemo)
		copy(dAtA[i:], m.NewMemo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewMemo)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NewPublicKey) > 0 {
		i -= len(m.NewPublicKey)
		copy(dAtA[i:], m.NewPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewPublicKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NewAddress) > 0 {
		i -= len(m.NewAddress)
		copy(dAtA[i:], m.NewAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NewAdminAddress) > 0 {
		i -= len(m.NewAdminAddress)
		copy(dAtA[i:], m.NewAdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewAdminAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SophonPublicKey) > 0 {
		i -= len(m.SophonPublicKey)
		copy(dAtA[i:], m.SophonPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SophonPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditSophonResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditSophonResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditSophonResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransferOwnership) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferOwnership) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferOwnership) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewOwnerAddress) > 0 {
		i -= len(m.NewOwnerAddress)
		copy(dAtA[i:], m.NewOwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewOwnerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SophonPublicKey) > 0 {
		i -= len(m.SophonPublicKey)
		copy(dAtA[i:], m.SophonPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SophonPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferOwnershipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferOwnershipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferOwnershipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAcceptOwnership) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptOwnership) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptOwnership) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SophonPublicKey) > 0 {
		i -= len(m.SophonPublicKey)
		copy(dAtA[i:], m.SophonPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SophonPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NewOwnerAddress) > 0 {
		i -= len(m.NewOwnerAddress)
		copy(dAtA[i:], m.NewOwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewOwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAcceptOwnershipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptOwnershipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptOwnershipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelOwnershipTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelOwnershipTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelOwnershipTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SophonPublicKey) > 0 {
		i -= len(m.SophonPublicKey)
		copy(dAtA[i:], m.SophonPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SophonPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelOwnershipTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelOwnershipTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelOwnershipTransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.InitialCredits.Size()
		i -= size
		if _, err := m.InitialCredits.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SophonPublicKey) > 0 {
		i -= len(m.SophonPublicKey)
		copy(dAtA[i:], m.SophonPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SophonPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SophonPublicKey) > 0 {
		i -= len(m.SophonPublicKey)
		copy(dAtA[i:], m.SophonPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SophonPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTopUpUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTopUpUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTopUpUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SophonPublicKey) > 0 {
		i -= len(m.SophonPublicKey)
		copy(dAtA[i:], m.SophonPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SophonPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTopUpUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTopUpUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTopUpUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSettleCredits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSettleCredits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSettleCredits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.SettleType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SettleType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SophonPublicKey) > 0 {
		i -= len(m.SophonPublicKey)
		copy(dAtA[i:], m.SophonPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SophonPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSettleCreditsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSettleCreditsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSettleCreditsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgExpireUserCredits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExpireUserCredits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExpireUserCredits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SophonPublicKey) > 0 {
		i -= len(m.SophonPublicKey)
		copy(dAtA[i:], m.SophonPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SophonPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExpireUserCreditsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExpireUserCreditsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExpireUserCreditsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitReports) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitReports) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitReports) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reports) > 0 {
		for iNdEx := len(m.Reports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SophonPublicKey) > 0 {
		i -= len(m.SophonPublicKey)
		copy(dAtA[i:], m.SophonPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SophonPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitReportsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitReportsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitReportsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterSophon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterSophonResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgEditSophon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SophonPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewAdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewMemo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEditSophonResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransferOwnership) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SophonPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewOwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTransferOwnershipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAcceptOwnership) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NewOwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SophonPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAcceptOwnershipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelOwnershipTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SophonPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelOwnershipTransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SophonPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.InitialCredits.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAddUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SophonPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTopUpUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SophonPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgTopUpUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSettleCredits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SophonPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SettleType != 0 {
		n += 1 + sovTx(uint64(m.SettleType))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSettleCreditsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgExpireUserCredits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SophonPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgExpireUserCreditsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitReports) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SophonPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Reports) > 0 {
		for _, e := range m.Reports {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSubmitReportsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterSophon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterSophon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterSophon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterSophonResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterSophonResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterSophonResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditSophon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditSophon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditSophon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SophonPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SophonPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewAdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMemo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewMemo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditSophonResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditSophonResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditSophonResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferOwnership) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferOwnership: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferOwnership: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SophonPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SophonPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferOwnershipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferOwnershipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferOwnershipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptOwnership) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptOwnership: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptOwnership: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SophonPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SophonPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptOwnershipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptOwnershipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptOwnershipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelOwnershipTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelOwnershipTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelOwnershipTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SophonPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SophonPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelOwnershipTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelOwnershipTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelOwnershipTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SophonPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SophonPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialCredits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialCredits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SophonPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SophonPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTopUpUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTopUpUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTopUpUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SophonPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SophonPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTopUpUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTopUpUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTopUpUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSettleCredits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSettleCredits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSettleCredits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SophonPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SophonPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettleType", wireType)
			}
			m.SettleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettleType |= SettleType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSettleCreditsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSettleCreditsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSettleCreditsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExpireUserCredits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExpireUserCredits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExpireUserCredits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SophonPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SophonPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExpireUserCreditsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExpireUserCreditsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExpireUserCreditsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitReports) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitReports: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitReports: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SophonPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SophonPublicKey = append(m.SophonPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.SophonPublicKey == nil {
				m.SophonPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reports = append(m.Reports, &UserReport{})
			if err := m.Reports[len(m.Reports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitReportsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitReportsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitReportsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
