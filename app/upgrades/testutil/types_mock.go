// Code generated by MockGen. DO NOT EDIT.
// Source: app/upgrades/types.go
//
// Generated by this command:
//
//	mockgen -source=app/upgrades/types.go -package testutil -destination=app/upgrades/testutil/types_mock.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	module "github.com/cosmos/cosmos-sdk/types/module"
	gomock "go.uber.org/mock/gomock"
)

// MockModuleManager is a mock of ModuleManager interface.
type MockModuleManager struct {
	ctrl     *gomock.Controller
	recorder *MockModuleManagerMockRecorder
	isgomock struct{}
}

// MockModuleManagerMockRecorder is the mock recorder for MockModuleManager.
type MockModuleManagerMockRecorder struct {
	mock *MockModuleManager
}

// NewMockModuleManager creates a new mock instance.
func NewMockModuleManager(ctrl *gomock.Controller) *MockModuleManager {
	mock := &MockModuleManager{ctrl: ctrl}
	mock.recorder = &MockModuleManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModuleManager) EXPECT() *MockModuleManagerMockRecorder {
	return m.recorder
}

// GetVersionMap mocks base method.
func (m *MockModuleManager) GetVersionMap() module.VersionMap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionMap")
	ret0, _ := ret[0].(module.VersionMap)
	return ret0
}

// GetVersionMap indicates an expected call of GetVersionMap.
func (mr *MockModuleManagerMockRecorder) GetVersionMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionMap", reflect.TypeOf((*MockModuleManager)(nil).GetVersionMap))
}

// RunMigrations mocks base method.
func (m *MockModuleManager) RunMigrations(ctx context.Context, cfg module.Configurator, fromVM module.VersionMap) (module.VersionMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunMigrations", ctx, cfg, fromVM)
	ret0, _ := ret[0].(module.VersionMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunMigrations indicates an expected call of RunMigrations.
func (mr *MockModuleManagerMockRecorder) RunMigrations(ctx, cfg, fromVM any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunMigrations", reflect.TypeOf((*MockModuleManager)(nil).RunMigrations), ctx, cfg, fromVM)
}
