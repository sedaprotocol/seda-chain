syntax = "proto3";
package sedachain.data_proxy.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "sedachain/data_proxy/v1/data_proxy.proto";
import "amino/amino.proto";

option go_package = "github.com/sedaprotocol/seda-chain/x/data-proxy/types";

// Msg service defines the data-proxy tx gRPC methods.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // Registers a new data proxy entry in the registry.
  rpc RegisterDataProxy(MsgRegisterDataProxy)
      returns (MsgRegisterDataProxyResponse);

  // Edits an existing data proxy.
  rpc EditDataProxy(MsgEditDataProxy) returns (MsgEditDataProxyResponse);

  // Transfers the admin address of a data proxy
  rpc TransferAdmin(MsgTransferAdmin) returns (MsgTransferAdminResponse);

  // Used to update the modules parameters through governance.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// All data required for a new data proxy.
message MsgRegisterDataProxy {
  option (cosmos.msg.v1.signer) = "admin_address";
  option (amino.name) = "sedachain/MsgRegisterDataProxy";

  // admin_address is the address that can update the proxy config.
  string admin_address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // payout_address defines the address to which the data proxy fees should be
  // transferred.
  string payout_address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // fee defines the amount in aseda this data-proxy charges when utilised.
  cosmos.base.v1beta1.Coin fee = 3
      [ (amino.dont_omitempty) = true, (amino.encoding) = "legacy_coin" ];

  // memo defines an optional string which is not used by the protocol.
  string memo = 4;

  // hex encoded bytes as the expected flow already uses hex encoded bytes to go
  // from the CLI to the browser where the transaction is signed.
  string pub_key = 5;

  // hex encoded bytes as the expected flow already uses hex encoded bytes to go
  // from the CLI to the browser where the transaction is signed.
  string signature = 6;
}

// No response required.
message MsgRegisterDataProxyResponse {}

// Allow updating memo and payout address instantly and/or scheduling a fee
// update.
message MsgEditDataProxy {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "sedachain/MsgEditDataProxy";

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  string new_payout_address = 2 [
    (cosmos_proto.scalar) = "cosmos.AddressString",
    (amino.dont_omitempty) = false
  ];

  string new_memo = 3 [ (amino.dont_omitempty) = true ];

  cosmos.base.v1beta1.Coin new_fee = 4
      [ (amino.dont_omitempty) = false, (amino.encoding) = "legacy_coin" ];

  // 0 will default to the minimum delay configured in the params
  uint32 fee_update_delay = 5 [ (amino.dont_omitempty) = false ];

  // hex encoded bytes as the expected flow is users sending updates from the
  // browser
  string pub_key = 6 [ (amino.dont_omitempty) = true ];
}

// Allow transferring the admin role to a different address.
message MsgTransferAdmin {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "sedachain/MsgTransferAdmin";

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  string new_admin_address = 2
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // hex encoded bytes as the expected flow is users sending updates from the
  // browser
  string pub_key = 3;
}

// No response required.
message MsgTransferAdminResponse {}

// Returns the height after which the fee update will go into effect.
message MsgEditDataProxyResponse { int64 fee_update_height = 1; }

// The request message for the UpdateParams method.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  Params params = 2 [ (gogoproto.nullable) = false ];
}

// No response required.
message MsgUpdateParamsResponse {}