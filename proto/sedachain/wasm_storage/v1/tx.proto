syntax = "proto3";
package sedachain.wasm_storage.v1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "sedachain/wasm_storage/v1/wasm_storage.proto";
import "amino/amino.proto";

option go_package = "github.com/sedaprotocol/seda-chain/x/wasm-storage/types";

// Msg service defines the wasm-storage tx gRPC methods.
service Msg {
  // StoreOracleProgram stores an oracle program.
  rpc StoreOracleProgram(MsgStoreOracleProgram)
      returns (MsgStoreOracleProgramResponse);
  // InstantiateCoreContract instantiates the Core Contract and registers its
  // address.
  rpc InstantiateCoreContract(MsgInstantiateCoreContract)
      returns (MsgInstantiateCoreContractResponse);
  // The UpdateParams method updates the module's parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// The request message for the StoreOracleProgram method.
message MsgStoreOracleProgram {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // Wasm is the wasm program to store as gzip-compressed bytes.
  bytes wasm = 2;
  // StorageFee is the fee incurred for storing the unzipped wasm bytes.
  repeated cosmos.base.v1beta1.Coin storage_fee = 3 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (amino.encoding) = "legacy_coins",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// The response message for the StoreOracleProgram method.
message MsgStoreOracleProgramResponse { string hash = 1; }

// The request message for the InstantiateCoreContract method.
message MsgInstantiateCoreContract {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string admin = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 code_id = 3 [ (gogoproto.customname) = "CodeID" ];
  string label = 4;
  bytes msg = 5
      [ (gogoproto.casttype) =
            "github.com/CosmWasm/wasmd/x/wasm/types.RawContractMessage" ];
  repeated cosmos.base.v1beta1.Coin funds = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  bytes salt = 7;
  bool fix_msg = 8;
}

// The response message for the InstantiateCoreContract method.
message MsgInstantiateCoreContractResponse {
  string contract_address = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// The request message for the UpdateParams method.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // Authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  Params params = 2 [ (gogoproto.nullable) = false ];
}

// The response message for the UpdateParams method.
message MsgUpdateParamsResponse {}
