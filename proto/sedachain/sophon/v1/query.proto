syntax = "proto3";
package sedachain.sophon.v1;

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "sedachain/sophon/v1/sophon.proto";

option go_package = "github.com/sedaprotocol/seda-chain/x/sophon/types";

// Query defines the gRPC querier service.
service Query {
  // SophonInfo returns a sophon info when given its public key as a hex
  // encoded string.
  rpc SophonInfo(QuerySophonInfoRequest) returns (QuerySophonInfoResponse) {
    option (google.api.http).get = "/seda-chain/sophon/info/{sophon_pub_key}";
  }

  // SophonUsers returns a paginated list of Sophon users when given its public
  // key as a hex encoded string.
  rpc SophonUsers(QuerySophonUsersRequest) returns (QuerySophonUsersResponse) {
    option (google.api.http).get =
        "/seda-chain/sophon/info/{sophon_pub_key}/users";
  }

  // SophonUser returns a sophon user when given its public key as a hex
  // encoded string.
  rpc SophonUser(QuerySophonUserRequest) returns (QuerySophonUserResponse) {
    option (google.api.http).get =
        "/seda-chain/sophon/info/{sophon_pub_key}/users/{user_id}";
  }

  // SophonEligibility returns a sophon eligibility when given its public key
  // as a hex encoded string.
  rpc SophonEligibility(QuerySophonEligibilityRequest)
      returns (QuerySophonEligibilityResponse) {
    option (google.api.http).get = "/seda-chain/sophon/check_eligibility";
  }

  // Params returns the total set of sophon parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/seda-chain/sophon/params";
  }
}

// The request message for QuerySophonInfo RPC method.
message QuerySophonInfoRequest {
  // A hex encoded string of the public key of the sophon.
  string sophon_pub_key = 1;
}

// The response message for QuerySophonInfo RPC method.
message QuerySophonInfoResponse { SophonInfo info = 1; }

// The request message for QuerySophonUsers RPC method.
message QuerySophonUsersRequest {
  // A hex encoded string of the public key of the sophon.
  string sophon_pub_key = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// The response message for QuerySophonUsers RPC method.
message QuerySophonUsersResponse {
  // users are the users of the sophon with given sophon_pub_key.
  repeated SophonUser users = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// The request message for QuerySophonUser RPC method.
message QuerySophonUserRequest {
  // A hex encoded string of the public key of the Sophon.
  string sophon_pub_key = 1;

  // A hex encoded string of the public key of the user.
  string user_id = 2;
}

// The response message for QuerySophonUser RPC method.
message QuerySophonUserResponse { SophonUser user = 1; }

// The request message for QuerySophonEligibility RPC method.
message QuerySophonEligibilityRequest {
  // A hex encoded string of the signature of the sophon.
  string signature = 1;

  string block_height = 2;
}

// The response message for QuerySophonEligibility RPC method.
message QuerySophonEligibilityResponse {
  bool eligible = 1;

  string balance = 2;
}

// The request message for QueryParams RPC method.
message QueryParamsRequest {}

// The response message for QueryParams RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}
