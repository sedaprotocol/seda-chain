syntax = "proto3";
package sedachain.core.v1;

import "cosmos_proto/cosmos.proto";
import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "sedachain/core/v1/core.proto";

option go_package = "github.com/sedaprotocol/seda-chain/x/core/types";

// Query defines the gRPC querier service.
service Query {
  // Owner returns the owner of the core module.
  rpc Owner(QueryOwnerRequest) returns (QueryOwnerResponse) {
    option (google.api.http).get = "/seda-chain/core/owner";
  }

  // PendingOwner returns the pending owner of the core module.
  rpc PendingOwner(QueryPendingOwnerRequest)
      returns (QueryPendingOwnerResponse) {
    option (google.api.http).get = "/seda-chain/core/pending_owner";
  }

  // Paused returns whether the core module is paused.
  rpc Paused(QueryPausedRequest) returns (QueryPausedResponse) {
    option (google.api.http).get = "/seda-chain/core/paused";
  }

  // Allowlist returns the allowlist of the core module.
  rpc Allowlist(QueryAllowlistRequest) returns (QueryAllowlistResponse) {
    option (google.api.http).get = "/seda-chain/core/allowlist";
  }

  // Params returns the total set of core parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/seda-chain/core/params";
  }
}

// The request message for Query/Owner RPC method.
message QueryOwnerRequest {}

// The response message for Query/Owner RPC method.
message QueryOwnerResponse {
  // owner is the address of the core module owner.
  string owner = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// The request message for Query/PendingOwner RPC method.
message QueryPendingOwnerRequest {}

// The response message for Query/PendingOwner RPC method.
message QueryPendingOwnerResponse {
  // pending_owner is the address of the core module pending owner.
  string pending_owner = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// The request message for Query/Paused RPC method.
message QueryPausedRequest {}

// The response message for Query/Paused RPC method.
message QueryPausedResponse {
  // paused is whether the core module is paused.
  bool paused = 3;
}

// The request message for Query/Allowlist RPC method.
message QueryAllowlistRequest {}

// The response message for Query/Allowlist RPC method.
message QueryAllowlistResponse {
  // public_keys is the list of hex-encoded public keys in the allowlist.
  repeated string public_keys = 3;
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // Params defines the parameters of the module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}
