syntax = "proto3";
package sedachain.core.v1;

import "cosmos_proto/cosmos.proto";
import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "sedachain/core/v1/core.proto";

option go_package = "github.com/sedaprotocol/seda-chain/x/core/types";

// Query defines the gRPC querier service.
service Query {
  // Owner returns the owner of the core module.
  rpc Owner(QueryOwnerRequest) returns (QueryOwnerResponse) {
    option (google.api.http).get = "/seda-chain/core/owner";
  }

  // PendingOwner returns the pending owner of the core module.
  rpc PendingOwner(QueryPendingOwnerRequest)
      returns (QueryPendingOwnerResponse) {
    option (google.api.http).get = "/seda-chain/core/pending_owner";
  }

  // Paused returns whether the core module is paused.
  rpc Paused(QueryPausedRequest) returns (QueryPausedResponse) {
    option (google.api.http).get = "/seda-chain/core/paused";
  }

  // Allowlist returns the allowlist of staker public keys.
  rpc Allowlist(QueryAllowlistRequest) returns (QueryAllowlistResponse) {
    option (google.api.http).get = "/seda-chain/core/allowlist";
  }

  // Staker returns the staker given its public key.
  rpc Staker(QueryStakerRequest) returns (QueryStakerResponse) {
    option (google.api.http).get = "/seda-chain/core/staker/{public_key}";
  }

  // Executors returns stakers that are eligible to execute data requests.
  rpc Executors(QueryExecutorsRequest) returns (QueryExecutorsResponse) {
    option (google.api.http).get = "/seda-chain/core/executors";
  }

  // DataRequestsByStatus returns data requests by status.
  rpc DataRequestsByStatus(QueryDataRequestsByStatusRequest)
      returns (QueryDataRequestsByStatusResponse) {
    option (google.api.http).get =
        "/seda-chain/core/data_requests_by_status/{status}";
  }

  // AccountSeq returns the account sequence number for a given public key.
  rpc AccountSeq(QueryAccountSeqRequest) returns (QueryAccountSeqResponse) {
    option (google.api.http).get = "/seda-chain/core/account_seq/{public_key}";
  }

  // IsStakerExecutor returns whether the staker is a executor.
  rpc IsStakerExecutor(QueryIsStakerExecutorRequest)
      returns (QueryIsStakerExecutorResponse) {
    option (google.api.http).get =
        "/seda-chain/core/is_staker_executor/{public_key}";
  }

  // IsExecutorEligible returns whether the account is eligible to be an
  // executor.
  rpc IsExecutorEligible(QueryIsExecutorEligibleRequest)
      returns (QueryIsExecutorEligibleResponse) {
    option (google.api.http).get =
        "/seda-chain/core/is_executor_eligible/{data}";
  }

  // DataRequestStatuses returns the statuses of data requests given their IDs.
  rpc DataRequestStatuses(QueryDataRequestStatusesRequest)
      returns (QueryDataRequestStatusesResponse) {
    option (google.api.http).get =
        "/seda-chain/core/data_request_statuses/{data_request_ids}";
  }

  // Params returns the total set of core parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/seda-chain/core/params";
  }

  // StakingConfig returns the staking parameters of the core module.
  rpc StakingConfig(QueryStakingConfigRequest)
      returns (QueryStakingConfigResponse) {
    option (google.api.http).get = "/seda-chain/core/staking_config";
  }

  // DataRequestConfig returns the data request parameters of the core module.
  rpc DataRequestConfig(QueryDataRequestConfigRequest)
      returns (QueryDataRequestConfigResponse) {
    option (google.api.http).get = "/seda-chain/core/data_request_config";
  }
}

// The request message for Query/Owner RPC method.
message QueryOwnerRequest {}

// The response message for Query/Owner RPC method.
message QueryOwnerResponse {
  // owner is the address of the core module owner.
  string owner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// The request message for Query/PendingOwner RPC method.
message QueryPendingOwnerRequest {}

// The response message for Query/PendingOwner RPC method.
message QueryPendingOwnerResponse {
  // pending_owner is the address of the core module pending owner.
  string pending_owner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// The request message for Query/Paused RPC method.
message QueryPausedRequest {}

// The response message for Query/Paused RPC method.
message QueryPausedResponse {
  // paused is whether the core module is paused.
  bool paused = 1;
}

// The request message for Query/Allowlist RPC method.
message QueryAllowlistRequest {}

// The response message for Query/Allowlist RPC method.
message QueryAllowlistResponse {
  // public_keys is the list of hex-encoded public keys in the allowlist.
  repeated string public_keys = 1;
}

// The request message for Query/Staker RPC method.
message QueryStakerRequest { string public_key = 1; }

// The response message for Query/Staker RPC method.
message QueryStakerResponse {
  Staker staker = 1 [ (gogoproto.nullable) = false ];
}

// The request message for Query/Executors RPC method.
message QueryExecutorsRequest {
  uint32 limit = 1;
  uint32 offset = 2;
}

// The response message for Query/Executors RPC method.
message QueryExecutorsResponse {
  repeated Staker executors = 1 [ (gogoproto.nullable) = false ];
}

// The request message for Query/DataRequestsByStatus RPC method.
message QueryDataRequestsByStatusRequest {
  // Status specifies the status of the data requests to retrieve.
  DataRequestStatus status = 1;
  // Limit specifies the maximum number of data requests to retrieve.
  uint64 limit = 2;
  // LastSeenIndex, if specified, sets the starting point (exclusive) of the
  // query.
  repeated string last_seen_index = 3
      [ (gogoproto.moretags) = "minItems:3,maxItems:3" ];
}

// The response message for Query/DataRequestsByStatus RPC method.
message QueryDataRequestsByStatusResponse {
  // DataRequests is the list of data requests under the given status.
  repeated DataRequest data_requests = 1 [ (gogoproto.nullable) = false ];
  // IsPaused is indicates whether the core module is paused.
  bool is_paused = 2;
  // Total is the total number of data requests under the given status.
  uint64 total = 3;
  // LastSeenIndex is the index of the last data request retrieved.
  repeated string last_seen_index = 4;
}

// The request message for Query/AccountSeq RPC method.
message QueryAccountSeqRequest {
  // public_key is the hex-encoded public key of the account.
  string public_key = 1;
}

// QueryAccountSeqResponse is the response type for the Query/AccountSeq
// RPC method.
message QueryAccountSeqResponse {
  // account_seq is the account sequence number.
  uint64 account_seq = 1;
}

// The request message for Query/IsStakerExecutor RPC method.
message QueryIsStakerExecutorRequest {
  // public_key is the hex-encoded public key of the account.
  string public_key = 1;
}

// QueryIsStakerExecutorResponse is the response type for the
// Query/IsStakerExecutor RPC method.
message QueryIsStakerExecutorResponse {
  // is_staker_executor is whether the staker is a executor.
  bool is_staker_executor = 1;
}

// The request message for Query/IsExecutorEligible RPC method.
message QueryIsExecutorEligibleRequest {
  // data is the base64 encoded data used to determine eligibility.
  string data = 1;
}

// QueryIsExecutorEligibleResponse is the response type for the
// Query/IsExecutorEligible RPC method.
message QueryIsExecutorEligibleResponse {
  // is_executor_eligible is whether the account is eligible to be an executor.
  bool is_executor_eligible = 1;
}

// The request message for Query/DataRequestStatuses RPC method.
message QueryDataRequestStatusesRequest {
  repeated string data_request_ids = 1 [ (gogoproto.jsontag) = "dr_ids" ];
}

// The response message for Query/DataRequestStatuses RPC method.
message QueryDataRequestStatusesResponse {
  map<string, DataRequestStatus> statuses = 1;
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // Params defines the parameters of the module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// The request message for Query/StakingConfig RPC method.
message QueryStakingConfigRequest {}

// The response message for Query/StakingConfig RPC method.
message QueryStakingConfigResponse {
  StakingConfig staking_config = 1 [ (gogoproto.nullable) = false ];
}

// The request message for Query/DataRequestConfig RPC method.
message QueryDataRequestConfigRequest {}

// The response message for Query/DataRequestConfig RPC method.
message QueryDataRequestConfigResponse {
  DataRequestConfig data_request_config = 1 [ (gogoproto.nullable) = false ];
}
