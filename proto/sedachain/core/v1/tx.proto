syntax = "proto3";
package sedachain.core.v1;

import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos/base/v1beta1/coin.proto";
import "sedachain/core/v1/core.proto";

option go_package = "github.com/sedaprotocol/seda-chain/x/core/types";

// Msg defines the core Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // AddToAllowlist adds a new address to the allowlist.
  rpc AddToAllowlist(MsgAddToAllowlist) returns (MsgAddToAllowlistResponse);

  // Stake adds a stake to the executor identity.
  rpc Stake(MsgStake) returns (MsgStakeResponse);

  // PostDataRequest posts a data request.
  rpc PostDataRequest(MsgPostDataRequest) returns (MsgPostDataRequestResponse);

  // Commit makes a commitment to reveal a data result.
  rpc Commit(MsgCommit) returns (MsgCommitResponse);

  // Reveal reveals a data result.
  rpc Reveal(MsgReveal) returns (MsgRevealResponse);

  // UpdateParams updates the module's parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// The request message for the AddToAllowlist method.
message MsgAddToAllowlist {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string public_key = 2;
}

// The response message for the AddToAllowlist method.
message MsgAddToAllowlistResponse {}

// The request message for the Stake method.
message MsgStake {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string public_key = 2;
  string memo = 3;
  // Proof is hex-encoded proof of the identity.
  string proof = 4;
  cosmos.base.v1beta1.Coin stake = 5
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// The response message for the Stake method.
message MsgStakeResponse {}

// The request message for the PostDataRequest method.
message MsgPostDataRequest {
  option (cosmos.msg.v1.signer) = "sender";

  // Poster of the data request
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // Funds attached to the data request posting
  cosmos.base.v1beta1.Coin funds = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
  // Semantic versioning
  string version = 3;
  // Hex-encoded ID (hash) of the execution program
  string exec_program_id = 4;
  // Inputs for the execution program
  bytes exec_inputs = 5;
  // Gas limit for execution program execution
  uint64 exec_gas_limit = 6;
  // Hex-encoded ID (hash) of the tally program
  string tally_program_id = 7;
  // Inputs for the tally program
  bytes tally_inputs = 8;
  // Gas limit for tally program execution
  uint64 tally_gas_limit = 9;
  // Number of required data request executors (used as uint16)
  uint32 replication_factor = 10;
  // Specifications for the filter process
  bytes consensus_filter = 11;
  // Amount of SEDA tokens per unit gas (used as uint128)
  string gas_price = 12 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  // Public information attached to the data request
  bytes memo = 13;
  // Set by SEDA Protocol (e.g. OEV-enabled data requests)
  bytes s_e_d_a_payload = 14;
  // Set by the relayer
  bytes payback_address = 15;
}

// The response message for the PostDataRequest method.
message MsgPostDataRequestResponse {
  // DrId is the hex-encoded ID of the data request.
  string dr_id = 1;
  // Height is the block height at which the data request was posted.
  int64 height = 2;
}

// The request message for the Commit method.
message MsgCommit {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string dr_id = 2;
  string commit = 3;
  string public_key = 4;
  string proof = 5;
}

// The response message for the Commit method.
message MsgCommitResponse {}

// The request message for the Reveal method.
message MsgReveal {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  RevealBody reveal_body = 2;
  string public_key = 3;
  string proof = 4;
  repeated string stderr = 5;
  repeated string stdout = 6;
}

// The response message for the Reveal method.
message MsgRevealResponse {}

// The request message for the UpdateParams method.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  Params params = 2 [ (gogoproto.nullable) = false ];
}

// The response message for the UpdateParams method.
message MsgUpdateParamsResponse {}
